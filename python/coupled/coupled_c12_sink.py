import sys; sys.path.append("../modules/"); sys.path.append("../../../CPlantBox/");  sys.path.append("../../build-cmake/cpp/python_binding/")

from xylem_flux import XylemFluxPython  # Python hybrid solver
import plantbox as pb
import rsml_reader as rsml
from rosi_richards import RichardsSP  # C++ part (Dumux binding)
from richards import RichardsWrapper  # Python part
import vtk_plot as vp
import van_genuchten as vg
from root_conductivities import *

from math import *
import numpy as np
import matplotlib.pyplot as plt
import timeit
from mpi4py import MPI; comm = MPI.COMM_WORLD; rank = comm.Get_rank()


def sinusoidal(t):
    return np.sin(2. * pi * np.array(t) - 0.5 * pi) + 1.

""" 
Benchmark M1.2 static root system in soil (with the classic sink)

also works parallel with mpiexec (only slightly faster, due to overhead)
"""

""" Parameters """
min_b = [-4., -4., -15.]
max_b = [4., 4., 0.]
cell_number = [8, 8, 15]  # [8, 8, 15]  # [16, 16, 30]  # [32, 32, 60]  # [8, 8, 15]
periodic = False

name = "DuMux_1cm"
sand = [0.045, 0.43, 0.15, 3, 1000]
loam = [0.08, 0.43, 0.04, 1.6, 50]
clay = [0.1, 0.4, 0.01, 1.1, 10]
soil = clay

initial = -659.8 + 7.5  # -659.8

trans = 6.4  # cm3 /day (sinusoidal)
wilting_point = -15000  # cm

sim_time = 7  # [day] for task b
age_dependent = False  # conductivities
dt = 120. / (24 * 3600)  # [days] Time step must be very small

""" Initialize macroscopic soil model """
sp = vg.Parameters(soil)  # for debugging
cpp_base = RichardsSP()
s = RichardsWrapper(cpp_base)
s.initialize()
s.createGrid(min_b, max_b, cell_number, periodic)  # [cm]
s.setHomogeneousIC(initial, True)  # cm pressure head, equilibrium
s.setTopBC("noFlux")
s.setBotBC("noFlux")
s.setVGParameters([soil])
s.initializeProblem()
s.setCriticalPressure(wilting_point)

""" Initialize xylem model (a) or (b)"""
r = XylemFluxPython("../grids/RootSystem8.rsml")
r.rs.setRectangularGrid(pb.Vector3d(min_b[0], min_b[1], min_b[2]), pb.Vector3d(max_b[0], max_b[1], max_b[2]),
                        pb.Vector3d(cell_number[0], cell_number[1], cell_number[2]), True)  # cutting
init_conductivities(r, age_dependent)
r.rs.sort()  # ensures segment is located at index s.y-1
r.test()  # sanity checks
nodes = r.get_nodes()
rs_age = np.max(r.get_ages())

""" Coupling (map indices) """
picker = lambda x, y, z : s.pick([x, y, z])
r.rs.setSoilGrid(picker)  # maps segments
cci = picker(nodes[0, 0], nodes[0, 1], nodes[0, 2])  # collar cell index

""" Numerical solution (a) """
start_time = timeit.default_timer()
x_, y_, w_, cpx, cps = [], [], [], [], []
sx = s.getSolutionHead()  # inital condition, solverbase.py

N = round(sim_time / dt)
t = 0.

cell_volumes = np.array(s.getCellVolumes())

sx = [-698.056, -700.02, -703.357, -707.004, -709.753, -710.897, -710.836, -710.479, -697.415, -699.405, -702.798, -706.525, -709.308, -710.352, -710.156, -709.715, -695.982, -697.941, -701.294, -704.987, -707.725, -708.639, -708.321, -707.813, -693.682, -695.476, -698.529, -701.859, -704.307, -705.178, -704.932, -704.487, -690.752, -692.28, -694.855, -697.623, -699.653, -700.467, -700.38, -700.083, -687.719, -688.958, -691.026, -693.231, -694.865, -695.606, -695.663, -695.51, -685.22, -686.224, -687.892, -689.666, -691.011, -691.691, -691.841, -691.79, -683.81, -684.686, -686.137, -687.683, -688.877, -689.522, -689.718, -689.717, -704.819, -707.448, -711.961, -716.931, -720.525, -721.522, -720.811, -719.947, -704.211, -706.934, -711.663, -716.956, -720.778, -721.503, -720.426, -719.346, -702.71, -705.455, -710.273, -715.76, -719.757, -720.143, -718.713, -717.438, -700.102, -702.617, -706.977, -711.821, -715.24, -715.799, -714.655, -713.54, -696.653, -698.759, -702.345, -706.2, -708.828, -709.461, -708.791, -708.035, -693.013, -694.673, -697.448, -700.361, -702.343, -702.975, -702.683, -702.252, -689.991, -691.29, -693.436, -695.666, -697.225, -697.842, -697.786, -697.569, -688.281, -689.383, -691.195, -693.075, -694.427, -695.035, -695.09, -694.974, -717.191, -721.271, -728.426, -736.496, -742.145, -742.54, -740.108, -737.991, -716.703, -721.082, -728.957, -738.24, -744.975, -744.315, -740.672, -737.899, -715.128, -719.714, -728.178, -738.71, -747.028, -744.729, -739.686, -736.217, -711.917, -716.116, -723.678, -732.535, -738.758, -738.083, -734.215, -731.179, -707.399, -710.854, -716.884, -723.485, -727.511, -727.471, -725.183, -723.194, -702.496, -705.117, -709.551, -714.154, -716.835, -717.063, -715.858, -714.725, -698.375, -700.326, -703.548, -706.799, -708.763, -709.152, -708.578, -707.963, -696.034, -697.625, -700.218, -702.814, -704.461, -704.93, -704.643, -704.264, -734.747, -741.241, -752.968, -766.8, -776.6, -775.179, -769.137, -764.604, -734.551, -741.824, -755.581, -773.373, -787.76, -781.96, -772.076, -765.698, -733.012, -741.003, -756.963, -780.454, -805.713, -789.473, -773.785, -765.01, -728.922, -736.239, -750.195, -768.191, -782.002, -777.412, -766.279, -758.396, -722.756, -728.727, -739.658, -752.338, -758.687, -756.629, -750.655, -745.887, -715.846, -720.222, -727.849, -735.886, -739.382, -738.411, -735.285, -732.722, -709.97, -713.053, -718.201, -723.308, -725.732, -725.481, -723.879, -722.516, -706.624, -709.022, -712.927, -716.714, -718.722, -718.824, -717.894, -717.045, -756.483, -766.366, -784.772, -807.703, -824.896, -819.451, -807.289, -798.937, -756.798, -768.344, -791.476, -825.23, -859.16, -837.309, -814.798, -802.088, -755.486, -768.876, -798.486, -855.371, -986.011, -869.425, -823.736, -803.806, -750.285, -762.599, -787.869, -825.046, -858.478, -848.545, -816.291, -795.926, -741.931, -752.099, -772.376, -799.795, -806.427, -799.226, -786.279, -775.703, -732.246, -739.477, -752.893, -768.249, -770.966, -766.918, -760.364, -755.266, -723.927, -728.731, -737.006, -745.339, -747.766, -746.044, -742.707, -740.149, -719.195, -722.742, -728.575, -734.141, -736.411, -735.76, -733.81, -732.262, -780.644, -794.471, -820.709, -854.456, -880.354, -870.92, -851.684, -838.744, -781.552, -798.153, -832.54, -885.944, -940.178, -901.08, -864.404, -844.05, -780.516, -800.579, -848.095, -959.994, -1184.1, -962.042, -884.068, -848.735, -773.985, -792.819, -834.296, -903.218, -954.456, -922.532, -905.946, -841.583, -763.025, -779.127, -816.116, -901.017, -869.859, -850.308, -831.71, -809.475, -749.974, -761.145, -784.214, -818.965, -810.469, -799.694, -788.417, -779.676, -738.72, -745.705, -758.4, -772.264, -772.973, -768.591, -762.903, -758.829, -732.357, -737.248, -745.47, -753.402, -755.613, -753.825, -750.6, -748.23, -805.073, -822.796, -856.529, -900.131, -934.757, -925.129, -899.143, -881.445, -806.384, -827.744, -871.685, -937.923, -1004.86, -961.435, -913.744, -887.126, -805.215, -831.192, -891.319, -1013.69, -1249.86, -1031.86, -933.261, -890.139, -796.815, -821.698, -879.094, -995.003, -1075.31, -1074.38, -929.374, -875.331, -782.719, -803.795, -854.23, -972.71, -932.768, -903.874, -861.728, -837.051, -766.244, -780.851, -814.086, -891.517, -849.197, -830.232, -812.261, -801.119, -752.202, -760.981, -777.724, -798.388, -796.057, -789.038, -781.035, -775.795, -744.35, -750.304, -760.509, -770.686, -772.839, -770.176, -765.927, -762.933, -827.908, -849.364, -890.414, -944.006, -990.43, -987.182, -950.585, -926.385, -829.382, -855.41, -908.969, -987.216, -1072.16, -1024.31, -964.137, -930.964, -827.525, -859.434, -933.806, -1066.27, -1383.11, -1101.09, -977.564, -928.946, -815.952, -844.388, -908.526, -1022.87, -1213.38, -1047.07, -944.743, -901.666, -798.073, -820.577, -872.923, -996.7, -975.016, -924.946, -881.256, -857.886, -778.499, -793.149, -823.087, -865.178, -864.677, -847.586, -828.973, -817.716, -762.57, -771.472, -787.626, -805.375, -808.58, -802.845, -794.763, -789.377, -753.813, -759.977, -770.389, -780.665, -784.295, -782.263, -778.047, -774.969, -847.629, -872.374, -920.391, -984.152, -1046.71, -1084.2, -1008.71, -973.073, -848.957, -879.587, -945.069, -1034.99, -1128.74, -1099.54, -1019.64, -977.264, -846.087, -886.155, -1011.66, -1169.56, -1427.49, -1192.47, -1026.15, -971.579, -830.383, -860.444, -927.46, -1030.4, -1203.63, -1050.82, -966.01, -927.465, -808.673, -829.407, -871.63, -931.053, -966.346, -932.045, -895.462, -874.858, -786.908, -800.013, -824.478, -853.45, -865.806, -855.613, -840.218, -830.255, -769.945, -778.105, -792.302, -807.268, -813.918, -810.97, -804.36, -799.582, -760.767, -766.603, -776.336, -786.064, -790.96, -790.259, -786.85, -784.121, -863.313, -889.689, -941.161, -1012.53, -1089.85, -1154.06, -1059.69, -1015.38, -863.434, -894.309, -958.222, -1053.78, -1170.7, -1213.39, -1080.08, -1024.78, -857.915, -893.292, -974.465, -1112.9, -1419.42, -1200.62, -1079.42, -1035.24, -840.174, -867.95, -925.908, -1012.25, -1103.96, -1051.16, -989.308, -954.599, -816.357, -835.089, -871.059, -917.23, -950.46, -935.188, -907.654, -889.597, -793.26, -805.022, -826.138, -850.206, -864.654, -860.383, -848.624, -840.035, -775.645, -783.091, -795.817, -809.27, -817.086, -816.378, -811.348, -807.27, -766.209, -771.65, -780.691, -789.92, -795.449, -795.86, -793.309, -790.997, -876.603, -904.429, -959.21, -1036.12, -1115.6, -1147.27, -1088.19, -1042.85, -875.985, -908.199, -976.361, -1083.27, -1214.74, -1279.77, -1135.44, -1056.57, -868.978, -905.39, -996.986, -1168.27, -1478.03, -1396.98, -1213.64, -1053.4, -849.555, -877.646, -938.303, -1043.68, -1118.9, -1087.88, -1021.4, -972.13, -823.966, -842.355, -877.749, -924.12, -956.176, -946.593, -920.134, -900.401, -799.524, -810.859, -831.09, -854.246, -868.991, -866.689, -855.955, -847.47, -781.087, -788.233, -800.395, -813.34, -821.414, -821.517, -817.069, -813.213, -771.267, -776.507, -785.204, -794.17, -799.86, -800.698, -798.502, -796.36, -888.742, -917.923, -975.564, -1057, -1137.85, -1153.03, -1099.3, -1051.82, -887.978, -921.686, -993.83, -1114.24, -1268.49, -1301.4, -1174.24, -1064.59, -880.406, -917.9, -1009.2, -1232.56, -1745.19, -1320.49, -1127.6, -1039.75, -860.086, -889.423, -952.602, -1060.57, -1161.66, -1091.48, -1015.88, -971.982, -832.899, -852.095, -888.937, -937.036, -971.002, -954.365, -924.54, -904.569, -806.78, -818.493, -839.29, -862.831, -877.301, -873.199, -861.215, -852.29, -787.094, -794.384, -806.717, -819.674, -827.445, -826.908, -821.934, -817.821, -776.628, -781.923, -790.662, -799.564, -805.035, -805.54, -803.052, -800.75, -900.266, -930.751, -990.294, -1071.96, -1145.27, -1133.2, -1081.29, -1042.65, -900.069, -935.36, -1009.32, -1126.82, -1265.84, -1203.82, -1106.86, -1046.94, -893.126, -932.442, -1022.55, -1201.46, -1634.03, -1292.02, -1098.34, -1026, -872.812, -905.342, -973.936, -1079.57, -1174.29, -1093.17, -1011.23, -968.658, -843.79, -865.4, -906.562, -957.843, -987.393, -962.547, -927.795, -906.533, -815.301, -828.315, -851.257, -876.214, -888.588, -880.641, -865.949, -855.908, -793.762, -801.66, -814.898, -828.299, -835.101, -832.831, -826.472, -821.681, -782.331, -787.941, -797.101, -806.125, -811.044, -810.596, -807.28, -804.534, -910.78, -943.249, -1006.59, -1092.96, -1167.54, -1130.42, -1071.52, -1034.29, -912.056, -950.851, -1032.9, -1166.72, -1352.55, -1200.43, -1091.2, -1036.57, -907.318, -953.249, -1061.16, -1285.28, -1914.65, -1302.98, -1092.97, -1019.88, -887.818, -929.434, -1024.91, -1193.36, -1253.62, -1113.96, -1014.71, -968.321, -856.064, -883.148, -937.197, -1007.05, -1021.56, -977.265, -933.389, -909.105, -824.253, -839.79, -867.65, -897.442, -904.956, -890.043, -871.088, -859.289, -800.319, -809.276, -824.282, -838.918, -844.059, -839.109, -830.777, -825.043, -787.704, -793.826, -803.738, -813.123, -817.271, -815.498, -811.078, -807.753, -917.908, -952.086, -1018.62, -1107.5, -1174.93, -1130.28, -1068.14, -1030.65, -920.722, -963.131, -1053.72, -1198.84, -1345.56, -1198.95, -1087.22, -1032.87, -918.667, -973.277, -1109.35, -1415.55, -2024.12, -1301.42, -1092.66, -1018.42, -900.766, -957.365, -1122.51, -1760.23, -1357.84, -1136.54, -1020.15, -969.781, -865.998, -900.459, -977.482, -1102.14, -1062.35, -991.909, -938.807, -911.685, -831.008, -849.4, -883.928, -922.92, -920.964, -898.165, -875.265, -861.958, -805.035, -815.034, -832.003, -848.409, -851.476, -843.978, -833.989, -827.509, -791.482, -798.059, -808.693, -818.515, -821.962, -819.094, -813.819, -810.059]
s.setInitialCondition(sx)

#     sx = np.maximum(sx, wilting_point * np.ones(sx.shape))
# #     sx = s.applySource(dt, sx, fluxes, wilting_point)
#     s.setInitialCondition(sx)
#
#     try:
#         s.ddt = dt / 100
#         s.solve(dt)
#     except:
#         print("FAILED WITH")
#         print(sx)
#         quit()

for i in range(0, N):

    if rank == 0:  # Root part is not parallel

        rx = r.solve(rs_age + t, -trans * sinusoidal(t), sx[cci], sx, True, wilting_point, [])  # xylem_flux.py, cells = True

        fluxes = r.soilFluxes(rs_age + t, rx, sx, False)  # class XylemFlux is defined in MappedOrganism.h, approx = True
#         seg_fluxes = r.segFluxes(rs_age + t, rx, sx, approx = False, cells = True)  # classic sink
#         fluxes = r.sumSoilFluxes(seg_fluxes) # two lines does the same as soilFluxes (CHECK)

        sum_flux = 0.
        for f in fluxes.values():
            sum_flux += f
        print("Summed fluxes ", sum_flux, "= collar flux", r.collar_flux(rs_age + t, rx, sx), "= prescribed", -trans * sinusoidal(t))

    else:
        fluxes = None

    fluxes = comm.bcast(fluxes, root = 0)  # Soil part runs parallel

    # s.setSource(fluxes)  # richards.py

#     water = np.multiply(vg.water_content(sx, sp), cell_volumes)
#     water_change = np.zeros(water.shape)
#     for key, value in fluxes.items():
#         water_change[key] = value * dt
#     new_water = water + water_change
#     new_theta = np.divide(new_water, cell_volumes)
#     for j, theta_ in enumerate(new_theta):
#         sx[j] = vg.pressure_head(theta_, sp)
#     sx = np.maximum(sx, wilting_point * np.ones(sx.shape))
# #     sx = s.applySource(dt, sx, fluxes, wilting_point)
#     s.setInitialCondition(sx)

    try:
        # s.ddt = dt / 100
        s.solve(dt)
    except:
        print("FAILED WITH")
        str = "sx = ["
        for s in sx:
            str += "{:g}, ".format(s[0])
        str = str[:-2]
        str += "]"
        print(str)
        quit()

    sx = s.getSolutionHead()  # richards.py
    water = s.getWaterVolume()

    if rank == 0:
        n = round(float(i) / float(N) * 100.)
        min_sx = np.min(sx)
        min_rx = np.min(rx)
        max_sx = np.max(sx)
        max_rx = np.max(rx)
        print("[" + ''.join(["*"]) * n + ''.join([" "]) * (100 - n) + "], [{:g}, {:g}] cm soil [{:g}, {:g}] cm root at {:g} days {:g}"
              .format(min_sx, max_sx, min_rx, max_rx, s.simTime, rx[0]))
        f = float(r.collar_flux(rs_age + t, rx, sx))  # exact root collar flux
        x_.append(t)
        y_.append(sum_flux)
        w_.append(water)
        cpx.append(rx[0])
        cps.append(float(sx[cci]))

        # print("Time:", t, ", collar flux", f, "cm^3/day at", rx[0], "cm xylem ", float(sx_old[cci]), "cm soil", "; domain water", s.getWaterVolume(), "cm3")

    t += dt

s.writeDumuxVTK(name)

""" Plot """
if rank == 0:
    print ("Coupled benchmark solved in ", timeit.default_timer() - start_time, " s")
    vp.plot_roots_and_soil(r.rs, "pressure head", rx, s, periodic, min_b, max_b, cell_number, name)  # VTK vizualisation
    fig, ax1 = plt.subplots()
    ax1.plot(x_, trans * sinusoidal(x_), 'k')  # potential transpiration
    ax1.plot(x_, -np.array(y_), 'g')  # actual transpiration (neumann)
    ax2 = ax1.twinx()
    ax2.plot(x_, np.cumsum(-np.array(y_) * dt), 'c--')  # cumulative transpiration (neumann)
    ax1.set_xlabel("Time [d]")
    ax1.set_ylabel("Transpiration $[cm^3 d^{-1}]$")
    ax1.legend(['Potential', 'Actual', 'Cumulative'], loc = 'upper left')
    np.savetxt(name, np.vstack((x_, -np.array(y_))), delimiter = ';')
    plt.show()

