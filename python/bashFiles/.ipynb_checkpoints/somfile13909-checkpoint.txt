3 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
101 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
101 === rate=4.17262e-34, T=0.0209399, TIT=0.0418797, IT=0.5
101 finished solveLinearSystemImpl_ 1
101 converged value: 1 121 1 let s go get convergedRemote
101 to  comm_.min(converged) 
101 did  comm_.min(converged) convergedRemote: 1
101 final convergedRemote: 1
101 Update: x^(k+1) = x^k - deltax^k 
101 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
101 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
101 Newton iteration  3 done101 , maximum relative shift = 1.442e-01
101 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
111 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
111 === rate=4.17262e-34, T=0.020972, TIT=0.0419441, IT=0.5
111 finished solveLinearSystemImpl_ 1
111 converged value: 1 121 1 let s go get convergedRemote
111 to  comm_.min(converged) 
111 did  comm_.min(converged) convergedRemote: 1
111 final convergedRemote: 1
111 Update: x^(k+1) = x^k - deltax^k 
111 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
111 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
111 Newton iteration  3 done111 , maximum relative shift = 1.442e-01
111 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
52 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
52 === rate=4.17262e-34, T=0.0209432, TIT=0.0418864, IT=0.5
52 finished solveLinearSystemImpl_ 1
52 converged value: 1 121 1 let s go get convergedRemote
52 to  comm_.min(converged) 
52 did  comm_.min(converged) convergedRemote: 1
52 final convergedRemote: 1
52 Update: x^(k+1) = x^k - deltax^k 
52 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
52 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
52 Newton iteration  3 done52 , maximum relative shift = 1.442e-01
52 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
35 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
35 === rate=4.17262e-34, T=0.0209198, TIT=0.0418397, IT=0.5
35 finished solveLinearSystemImpl_ 1
35 converged value: 1 121 1 let s go get convergedRemote
35 to  comm_.min(converged) 
35 did  comm_.min(converged) convergedRemote: 1
35 final convergedRemote: 1
35 Update: x^(k+1) = x^k - deltax^k 
35 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
35 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
35 Newton iteration  3 done35 , maximum relative shift = 1.442e-01
35 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
17 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
17 === rate=4.17262e-34, T=0.0209163, TIT=0.0418326, IT=0.5
17 finished solveLinearSystemImpl_ 1
17 converged value: 1 121 1 let s go get convergedRemote
17 to  comm_.min(converged) 
17 did  comm_.min(converged) convergedRemote: 1
17 final convergedRemote: 1
17 Update: x^(k+1) = x^k - deltax^k 
17 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
17 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
17 Newton iteration  3 done17 , maximum relative shift = 1.442e-01
17 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
31 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
31 === rate=4.17262e-34, T=0.0209393, TIT=0.0418786, IT=0.5
31 finished solveLinearSystemImpl_ 1
31 converged value: 1 121 1 let s go get convergedRemote
31 to  comm_.min(converged) 
31 did  comm_.min(converged) convergedRemote: 1
31 final convergedRemote: 1
31 Update: x^(k+1) = x^k - deltax^k 
31 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
31 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
31 Newton iteration  3 done31 , maximum relative shift = 1.442e-01
31 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
30 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
30 === rate=4.17262e-34, T=0.0209515, TIT=0.0419031, IT=0.5
30 finished solveLinearSystemImpl_ 1
30 converged value: 1 121 1 let s go get convergedRemote
30 to  comm_.min(converged) 
30 did  comm_.min(converged) convergedRemote: 1
30 final convergedRemote: 1
30 Update: x^(k+1) = x^k - deltax^k 
30 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
30 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
30 Newton iteration  3 done30 , maximum relative shift = 1.442e-01
30 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
66 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
66 === rate=4.17262e-34, T=0.0209282, TIT=0.0418564, IT=0.5
66 finished solveLinearSystemImpl_ 1
66 converged value: 1 121 1 let s go get convergedRemote
66 to  comm_.min(converged) 
66 did  comm_.min(converged) convergedRemote: 1
66 final convergedRemote: 1
66 Update: x^(k+1) = x^k - deltax^k 
66 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
66 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
66 Newton iteration  3 done66 , maximum relative shift = 1.442e-01
66 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
24 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
24 === rate=4.17262e-34, T=0.0209075, TIT=0.041815, IT=0.5
24 finished solveLinearSystemImpl_ 1
24 converged value: 1 121 1 let s go get convergedRemote
24 to  comm_.min(converged) 
24 did  comm_.min(converged) convergedRemote: 1
24 final convergedRemote: 1
24 Update: x^(k+1) = x^k - deltax^k 
24 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
24 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
24 Newton iteration  3 done24 , maximum relative shift = 1.442e-01
24 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
97 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
97 === rate=4.17262e-34, T=0.0209568, TIT=0.0419137, IT=0.5
97 finished solveLinearSystemImpl_ 1
97 converged value: 1 121 1 let s go get convergedRemote
97 to  comm_.min(converged) 
97 did  comm_.min(converged) convergedRemote: 1
97 final convergedRemote: 1
97 Update: x^(k+1) = x^k - deltax^k 
97 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
97 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
97 Newton iteration  3 done97 , maximum relative shift = 1.442e-01
97 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
91 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
91 === rate=4.17262e-34, T=0.0209057, TIT=0.0418115, IT=0.5
91 finished solveLinearSystemImpl_ 1
91 converged value: 1 121 1 let s go get convergedRemote
91 to  comm_.min(converged) 
91 did  comm_.min(converged) convergedRemote: 1
91 final convergedRemote: 1
91 Update: x^(k+1) = x^k - deltax^k 
91 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
91 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
91 Newton iteration  3 done91 , maximum relative shift = 1.442e-01
91 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
37 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
37 === rate=4.17262e-34, T=0.0209589, TIT=0.0419178, IT=0.5
37 finished solveLinearSystemImpl_ 1
37 converged value: 1 121 1 let s go get convergedRemote
37 to  comm_.min(converged) 
37 did  comm_.min(converged) convergedRemote: 1
37 final convergedRemote: 1
37 Update: x^(k+1) = x^k - deltax^k 
37 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
37 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
37 Newton iteration  3 done37 , maximum relative shift = 1.442e-01
37 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
98 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
98 === rate=4.17262e-34, T=0.0209382, TIT=0.0418765, IT=0.5
98 finished solveLinearSystemImpl_ 1
98 converged value: 1 121 1 let s go get convergedRemote
98 to  comm_.min(converged) 
98 did  comm_.min(converged) convergedRemote: 1
98 final convergedRemote: 1
98 Update: x^(k+1) = x^k - deltax^k 
98 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
98 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
98 Newton iteration  3 done98 , maximum relative shift = 1.442e-01
98 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
36 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
36 === rate=4.17262e-34, T=0.0209604, TIT=0.0419207, IT=0.5
36 finished solveLinearSystemImpl_ 1
36 converged value: 1 121 1 let s go get convergedRemote
36 to  comm_.min(converged) 
36 did  comm_.min(converged) convergedRemote: 1
36 final convergedRemote: 1
36 Update: x^(k+1) = x^k - deltax^k 
36 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
36 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
36 Newton iteration  3 done36 , maximum relative shift = 1.442e-01
36 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
58 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
58 === rate=4.17262e-34, T=0.0209594, TIT=0.0419189, IT=0.5
58 finished solveLinearSystemImpl_ 1
58 converged value: 1 121 1 let s go get convergedRemote
58 to  comm_.min(converged) 
58 did  comm_.min(converged) convergedRemote: 1
58 final convergedRemote: 1
58 Update: x^(k+1) = x^k - deltax^k 
58 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
58 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
58 Newton iteration  3 done58 , maximum relative shift = 1.442e-01
58 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
102 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
102 === rate=4.17262e-34, T=0.0209208, TIT=0.0418417, IT=0.5
102 finished solveLinearSystemImpl_ 1
102 converged value: 1 121 1 let s go get convergedRemote
102 to  comm_.min(converged) 
102 did  comm_.min(converged) convergedRemote: 1
102 final convergedRemote: 1
102 Update: x^(k+1) = x^k - deltax^k 
102 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
102 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
102 Newton iteration  3 done102 , maximum relative shift = 1.442e-01
102 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
9 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
9 === rate=4.17262e-34, T=0.0209038, TIT=0.0418076, IT=0.5
9 finished solveLinearSystemImpl_ 1
9 converged value: 1 121 1 let s go get convergedRemote
9 to  comm_.min(converged) 
9 did  comm_.min(converged) convergedRemote: 1
9 final convergedRemote: 1
9 Update: x^(k+1) = x^k - deltax^k 
9 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
9 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
9 Newton iteration  3 done9 , maximum relative shift = 1.442e-01
9 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
81 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
81 === rate=4.17262e-34, T=0.0209117, TIT=0.0418234, IT=0.5
81 finished solveLinearSystemImpl_ 1
81 converged value: 1 121 1 let s go get convergedRemote
81 to  comm_.min(converged) 
81 did  comm_.min(converged) convergedRemote: 1
81 final convergedRemote: 1
81 Update: x^(k+1) = x^k - deltax^k 
81 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
81 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
81 Newton iteration  3 done81 , maximum relative shift = 1.442e-01
81 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
99 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
99 === rate=4.17262e-34, T=0.0209289, TIT=0.0418578, IT=0.5
99 finished solveLinearSystemImpl_ 1
99 converged value: 1 121 1 let s go get convergedRemote
99 to  comm_.min(converged) 
99 did  comm_.min(converged) convergedRemote: 1
99 final convergedRemote: 1
99 Update: x^(k+1) = x^k - deltax^k 
99 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
99 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
99 Newton iteration  3 done99 , maximum relative shift = 1.442e-01
99 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
92 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
92 === rate=4.17262e-34, T=0.0209123, TIT=0.0418246, IT=0.5
92 finished solveLinearSystemImpl_ 1
92 converged value: 1 121 1 let s go get convergedRemote
92 to  comm_.min(converged) 
92 did  comm_.min(converged) convergedRemote: 1
92 final convergedRemote: 1
92 Update: x^(k+1) = x^k - deltax^k 
92 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
92 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
92 Newton iteration  3 done92 , maximum relative shift = 1.442e-01
92 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
94 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
94 === rate=4.17262e-34, T=0.0209508, TIT=0.0419015, IT=0.5
94 finished solveLinearSystemImpl_ 1
94 converged value: 1 121 1 let s go get convergedRemote
94 to  comm_.min(converged) 
94 did  comm_.min(converged) convergedRemote: 1
94 final convergedRemote: 1
94 Update: x^(k+1) = x^k - deltax^k 
94 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
94 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
94 Newton iteration  3 done94 , maximum relative shift = 1.442e-01
94 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
34 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
34 === rate=4.17262e-34, T=0.0209016, TIT=0.0418033, IT=0.5
34 finished solveLinearSystemImpl_ 1
34 converged value: 1 121 1 let s go get convergedRemote
34 to  comm_.min(converged) 
34 did  comm_.min(converged) convergedRemote: 1
34 final convergedRemote: 1
34 Update: x^(k+1) = x^k - deltax^k 
34 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
34 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
34 Newton iteration  3 done34 , maximum relative shift = 1.442e-01
34 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
18 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
18 === rate=4.17262e-34, T=0.0209154, TIT=0.0418308, IT=0.5
18 finished solveLinearSystemImpl_ 1
18 converged value: 1 121 1 let s go get convergedRemote
18 to  comm_.min(converged) 
18 did  comm_.min(converged) convergedRemote: 1
18 final convergedRemote: 1
18 Update: x^(k+1) = x^k - deltax^k 
18 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
18 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
18 Newton iteration  3 done18 , maximum relative shift = 1.442e-01
18 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
90 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
90 === rate=4.17262e-34, T=0.020904, TIT=0.0418081, IT=0.5
90 finished solveLinearSystemImpl_ 1
90 converged value: 1 121 1 let s go get convergedRemote
90 to  comm_.min(converged) 
90 did  comm_.min(converged) convergedRemote: 1
90 final convergedRemote: 1
90 Update: x^(k+1) = x^k - deltax^k 
90 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
90 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
90 Newton iteration  3 done90 , maximum relative shift = 1.442e-01
90 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
43 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
43 === rate=4.17262e-34, T=0.0209336, TIT=0.0418672, IT=0.5
43 finished solveLinearSystemImpl_ 1
43 converged value: 1 121 1 let s go get convergedRemote
43 to  comm_.min(converged) 
43 did  comm_.min(converged) convergedRemote: 1
43 final convergedRemote: 1
43 Update: x^(k+1) = x^k - deltax^k 
43 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
43 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
43 Newton iteration  3 done43 , maximum relative shift = 1.442e-01
43 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
42 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
42 === rate=4.17262e-34, T=0.0209139, TIT=0.0418279, IT=0.5
42 finished solveLinearSystemImpl_ 1
42 converged value: 1 121 1 let s go get convergedRemote
42 to  comm_.min(converged) 
42 did  comm_.min(converged) convergedRemote: 1
42 final convergedRemote: 1
42 Update: x^(k+1) = x^k - deltax^k 
42 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
42 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
42 Newton iteration  3 done42 , maximum relative shift = 1.442e-01
42 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
57 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
57 === rate=4.17262e-34, T=0.0209335, TIT=0.0418669, IT=0.5
57 finished solveLinearSystemImpl_ 1
57 converged value: 1 121 1 let s go get convergedRemote
57 to  comm_.min(converged) 
57 did  comm_.min(converged) convergedRemote: 1
57 final convergedRemote: 1
57 Update: x^(k+1) = x^k - deltax^k 
57 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
57 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
57 Newton iteration  3 done57 , maximum relative shift = 1.442e-01
57 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
21 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
21 === rate=4.17262e-34, T=0.0208959, TIT=0.0417918, IT=0.5
21 finished solveLinearSystemImpl_ 1
21 converged value: 1 121 1 let s go get convergedRemote
21 to  comm_.min(converged) 
21 did  comm_.min(converged) convergedRemote: 1
21 final convergedRemote: 1
21 Update: x^(k+1) = x^k - deltax^k 
21 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
21 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
21 Newton iteration  3 done21 , maximum relative shift = 1.442e-01
21 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
100 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
100 === rate=4.17262e-34, T=0.0209394, TIT=0.0418788, IT=0.5
100 finished solveLinearSystemImpl_ 1
100 converged value: 1 121 1 let s go get convergedRemote
100 to  comm_.min(converged) 
100 did  comm_.min(converged) convergedRemote: 1
100 final convergedRemote: 1
100 Update: x^(k+1) = x^k - deltax^k 
100 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
100 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
100 Newton iteration  3 done100 , maximum relative shift = 1.442e-01
100 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
96 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
96 === rate=4.17262e-34, T=0.0209694, TIT=0.0419388, IT=0.5
96 finished solveLinearSystemImpl_ 1
96 converged value: 1 121 1 let s go get convergedRemote
96 to  comm_.min(converged) 
96 did  comm_.min(converged) convergedRemote: 1
96 final convergedRemote: 1
96 Update: x^(k+1) = x^k - deltax^k 
96 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
96 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
96 Newton iteration  3 done96 , maximum relative shift = 1.442e-01
96 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
64 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
64 === rate=4.17262e-34, T=0.0209294, TIT=0.0418587, IT=0.5
64 finished solveLinearSystemImpl_ 1
64 converged value: 1 121 1 let s go get convergedRemote
64 to  comm_.min(converged) 
64 did  comm_.min(converged) convergedRemote: 1
64 final convergedRemote: 1
64 Update: x^(k+1) = x^k - deltax^k 
64 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
64 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
64 Newton iteration  3 done64 , maximum relative shift = 1.442e-01
64 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
93 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
93 === rate=4.17262e-34, T=0.0209071, TIT=0.0418142, IT=0.5
93 finished solveLinearSystemImpl_ 1
93 converged value: 1 121 1 let s go get convergedRemote
93 to  comm_.min(converged) 
93 did  comm_.min(converged) convergedRemote: 1
93 final convergedRemote: 1
93 Update: x^(k+1) = x^k - deltax^k 
93 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
93 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
93 Newton iteration  3 done93 , maximum relative shift = 1.442e-01
93 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
13 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
13 === rate=4.17262e-34, T=0.0209361, TIT=0.0418721, IT=0.5
13 finished solveLinearSystemImpl_ 1
13 converged value: 1 121 1 let s go get convergedRemote
13 to  comm_.min(converged) 
13 did  comm_.min(converged) convergedRemote: 1
13 final convergedRemote: 1
13 Update: x^(k+1) = x^k - deltax^k 
13 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
13 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
13 Newton iteration  3 done13 , maximum relative shift = 1.442e-01
13 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
47 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
47 === rate=4.17262e-34, T=0.0209506, TIT=0.0419011, IT=0.5
47 finished solveLinearSystemImpl_ 1
47 converged value: 1 121 1 let s go get convergedRemote
47 to  comm_.min(converged) 
47 did  comm_.min(converged) convergedRemote: 1
47 final convergedRemote: 1
47 Update: x^(k+1) = x^k - deltax^k 
47 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
47 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
47 Newton iteration  3 done47 , maximum relative shift = 1.442e-01
47 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
67 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
67 === rate=4.17262e-34, T=0.020917, TIT=0.041834, IT=0.5
67 finished solveLinearSystemImpl_ 1
67 converged value: 1 121 1 let s go get convergedRemote
67 to  comm_.min(converged) 
67 did  comm_.min(converged) convergedRemote: 1
67 final convergedRemote: 1
67 Update: x^(k+1) = x^k - deltax^k 
67 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
67 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
67 Newton iteration  3 done67 , maximum relative shift = 1.442e-01
67 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
83 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
83 === rate=4.17262e-34, T=0.0209221, TIT=0.0418443, IT=0.5
83 finished solveLinearSystemImpl_ 1
83 converged value: 1 121 1 let s go get convergedRemote
83 to  comm_.min(converged) 
83 did  comm_.min(converged) convergedRemote: 1
83 final convergedRemote: 1
83 Update: x^(k+1) = x^k - deltax^k 
83 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
83 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
83 Newton iteration  3 done83 , maximum relative shift = 1.442e-01
83 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
80 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
80 === rate=4.17262e-34, T=0.0209243, TIT=0.0418486, IT=0.5
80 finished solveLinearSystemImpl_ 1
80 converged value: 1 121 1 let s go get convergedRemote
80 to  comm_.min(converged) 
80 did  comm_.min(converged) convergedRemote: 1
80 final convergedRemote: 1
80 Update: x^(k+1) = x^k - deltax^k 
80 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
80 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
80 Newton iteration  3 done80 , maximum relative shift = 1.442e-01
80 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
113 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
113 === rate=4.17262e-34, T=0.0209375, TIT=0.041875, IT=0.5
113 finished solveLinearSystemImpl_ 1
113 converged value: 1 121 1 let s go get convergedRemote
113 to  comm_.min(converged) 
113 did  comm_.min(converged) convergedRemote: 1
113 final convergedRemote: 1
113 Update: x^(k+1) = x^k - deltax^k 
113 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
113 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
113 Newton iteration  3 done113 , maximum relative shift = 1.442e-01
113 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
8 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
8 === rate=4.17262e-34, T=0.0209313, TIT=0.0418626, IT=0.5
8 finished solveLinearSystemImpl_ 1
8 converged value: 1 121 1 let s go get convergedRemote
8 to  comm_.min(converged) 
8 did  comm_.min(converged) convergedRemote: 1
8 final convergedRemote: 1
8 Update: x^(k+1) = x^k - deltax^k 
8 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
8 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
8 Newton iteration  3 done8 , maximum relative shift = 1.442e-01
8 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
20 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
20 === rate=4.17262e-34, T=0.0208856, TIT=0.0417711, IT=0.5
20 finished solveLinearSystemImpl_ 1
20 converged value: 1 121 1 let s go get convergedRemote
20 to  comm_.min(converged) 
20 did  comm_.min(converged) convergedRemote: 1
20 final convergedRemote: 1
20 Update: x^(k+1) = x^k - deltax^k 
20 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
20 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
20 Newton iteration  3 done20 , maximum relative shift = 1.442e-01
20 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
7 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
7 === rate=4.17262e-34, T=0.0209334, TIT=0.0418668, IT=0.5
7 finished solveLinearSystemImpl_ 1
7 converged value: 1 121 1 let s go get convergedRemote
7 to  comm_.min(converged) 
7 did  comm_.min(converged) convergedRemote: 1
7 final convergedRemote: 1
7 Update: x^(k+1) = x^k - deltax^k 
7 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
7 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
7 Newton iteration  3 done7 , maximum relative shift = 1.442e-01
7 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
112 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
112 === rate=4.17262e-34, T=0.0209494, TIT=0.0418988, IT=0.5
112 finished solveLinearSystemImpl_ 1
112 converged value: 1 121 1 let s go get convergedRemote
112 to  comm_.min(converged) 
112 did  comm_.min(converged) convergedRemote: 1
112 final convergedRemote: 1
112 Update: x^(k+1) = x^k - deltax^k 
112 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
112 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
112 Newton iteration  3 done112 , maximum relative shift = 1.442e-01
112 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
95 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
95 === rate=4.17262e-34, T=0.0209539, TIT=0.0419079, IT=0.5
95 finished solveLinearSystemImpl_ 1
95 converged value: 1 121 1 let s go get convergedRemote
95 to  comm_.min(converged) 
95 did  comm_.min(converged) convergedRemote: 1
95 final convergedRemote: 1
95 Update: x^(k+1) = x^k - deltax^k 
95 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
95 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
95 Newton iteration  3 done95 , maximum relative shift = 1.442e-01
95 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
40 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
40 === rate=4.17262e-34, T=0.0209517, TIT=0.0419035, IT=0.5
40 finished solveLinearSystemImpl_ 1
40 converged value: 1 121 1 let s go get convergedRemote
40 to  comm_.min(converged) 
40 did  comm_.min(converged) convergedRemote: 1
40 final convergedRemote: 1
40 Update: x^(k+1) = x^k - deltax^k 
40 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
40 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
40 Newton iteration  3 done40 , maximum relative shift = 1.442e-01
40 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
70 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
70 === rate=4.17262e-34, T=0.0209284, TIT=0.0418567, IT=0.5
70 finished solveLinearSystemImpl_ 1
70 converged value: 1 121 1 let s go get convergedRemote
70 to  comm_.min(converged) 
70 did  comm_.min(converged) convergedRemote: 1
70 final convergedRemote: 1
70 Update: x^(k+1) = x^k - deltax^k 
70 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
70 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
70 Newton iteration  3 done70 , maximum relative shift = 1.442e-01
70 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
71 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
71 === rate=4.17262e-34, T=0.020916, TIT=0.0418321, IT=0.5
71 finished solveLinearSystemImpl_ 1
71 converged value: 1 121 1 let s go get convergedRemote
71 to  comm_.min(converged) 
71 did  comm_.min(converged) convergedRemote: 1
71 final convergedRemote: 1
71 Update: x^(k+1) = x^k - deltax^k 
71 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
71 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
71 Newton iteration  3 done71 , maximum relative shift = 1.442e-01
71 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
12 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
12 === rate=4.17262e-34, T=0.0209396, TIT=0.0418791, IT=0.5
12 finished solveLinearSystemImpl_ 1
12 converged value: 1 121 1 let s go get convergedRemote
12 to  comm_.min(converged) 
12 did  comm_.min(converged) convergedRemote: 1
12 final convergedRemote: 1
12 Update: x^(k+1) = x^k - deltax^k 
12 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
12 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
12 Newton iteration  3 done12 , maximum relative shift = 1.442e-01
12 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
114 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
114 === rate=4.17262e-34, T=0.0209494, TIT=0.0418988, IT=0.5
114 finished solveLinearSystemImpl_ 1
114 converged value: 1 121 1 let s go get convergedRemote
114 to  comm_.min(converged) 
114 did  comm_.min(converged) convergedRemote: 1
114 final convergedRemote: 1
114 Update: x^(k+1) = x^k - deltax^k 
114 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
114 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
114 Newton iteration  3 done114 , maximum relative shift = 1.442e-01
114 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
63 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
63 === rate=4.17262e-34, T=0.0209646, TIT=0.0419291, IT=0.5
63 finished solveLinearSystemImpl_ 1
63 converged value: 1 121 1 let s go get convergedRemote
63 to  comm_.min(converged) 
63 did  comm_.min(converged) convergedRemote: 1
63 final convergedRemote: 1
63 Update: x^(k+1) = x^k - deltax^k 
63 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
63 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
63 Newton iteration  3 done63 , maximum relative shift = 1.442e-01
63 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
56 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
56 === rate=4.17262e-34, T=0.0209303, TIT=0.0418605, IT=0.5
56 finished solveLinearSystemImpl_ 1
56 converged value: 1 121 1 let s go get convergedRemote
56 to  comm_.min(converged) 
56 did  comm_.min(converged) convergedRemote: 1
56 final convergedRemote: 1
56 Update: x^(k+1) = x^k - deltax^k 
56 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
56 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
56 Newton iteration  3 done56 , maximum relative shift = 1.442e-01
56 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
116 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
116 === rate=4.17262e-34, T=0.0209479, TIT=0.0418959, IT=0.5
116 finished solveLinearSystemImpl_ 1
116 converged value: 1 121 1 let s go get convergedRemote
116 to  comm_.min(converged) 
116 did  comm_.min(converged) convergedRemote: 1
116 final convergedRemote: 1
116 Update: x^(k+1) = x^k - deltax^k 
116 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
116 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
116 Newton iteration  3 done116 , maximum relative shift = 1.442e-01
116 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
25 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
25 === rate=4.17262e-34, T=0.0209007, TIT=0.0418014, IT=0.5
25 finished solveLinearSystemImpl_ 1
25 converged value: 1 121 1 let s go get convergedRemote
25 to  comm_.min(converged) 
25 did  comm_.min(converged) convergedRemote: 1
25 final convergedRemote: 1
25 Update: x^(k+1) = x^k - deltax^k 
25 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
25 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
25 Newton iteration  3 done25 , maximum relative shift = 1.442e-01
25 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
55 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
55 === rate=4.17262e-34, T=0.0209426, TIT=0.0418852, IT=0.5
55 finished solveLinearSystemImpl_ 1
55 converged value: 1 121 1 let s go get convergedRemote
55 to  comm_.min(converged) 
55 did  comm_.min(converged) convergedRemote: 1
55 final convergedRemote: 1
55 Update: x^(k+1) = x^k - deltax^k 
55 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
55 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
55 Newton iteration  3 done55 , maximum relative shift = 1.442e-01
55 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
49 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
49 === rate=4.17262e-34, T=0.0209269, TIT=0.0418538, IT=0.5
49 finished solveLinearSystemImpl_ 1
49 converged value: 1 121 1 let s go get convergedRemote
49 to  comm_.min(converged) 
49 did  comm_.min(converged) convergedRemote: 1
49 final convergedRemote: 1
49 Update: x^(k+1) = x^k - deltax^k 
49 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
49 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
49 Newton iteration  3 done49 , maximum relative shift = 1.442e-01
49 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
54 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
54 === rate=4.17262e-34, T=0.0209602, TIT=0.0419204, IT=0.5
54 finished solveLinearSystemImpl_ 1
54 converged value: 1 121 1 let s go get convergedRemote
54 to  comm_.min(converged) 
54 did  comm_.min(converged) convergedRemote: 1
54 final convergedRemote: 1
54 Update: x^(k+1) = x^k - deltax^k 
54 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
54 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
54 Newton iteration  3 done54 , maximum relative shift = 1.442e-01
54 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
46 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
46 === rate=4.17262e-34, T=0.0209646, TIT=0.0419292, IT=0.5
46 finished solveLinearSystemImpl_ 1
46 converged value: 1 121 1 let s go get convergedRemote
46 to  comm_.min(converged) 
46 did  comm_.min(converged) convergedRemote: 1
46 final convergedRemote: 1
46 Update: x^(k+1) = x^k - deltax^k 
46 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
46 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
46 Newton iteration  3 done46 , maximum relative shift = 1.442e-01
46 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
79 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
79 === rate=4.17262e-34, T=0.0209616, TIT=0.0419233, IT=0.5
79 finished solveLinearSystemImpl_ 1
79 converged value: 1 121 1 let s go get convergedRemote
79 to  comm_.min(converged) 
79 did  comm_.min(converged) convergedRemote: 1
79 final convergedRemote: 1
79 Update: x^(k+1) = x^k - deltax^k 
79 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
79 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
79 Newton iteration  3 done79 , maximum relative shift = 1.442e-01
79 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
86 istlsolver::printOutput 
  0.5      1.31627e-22       2.0427e-17
86 === rate=4.17262e-34, T=0.0209184, TIT=0.0418368, IT=0.5
86 finished solveLinearSystemImpl_ 1
86 converged value: 1 121 1 let s go get convergedRemote
86 to  comm_.min(converged) 
86 did  comm_.min(converged) convergedRemote: 1
86 final convergedRemote: 1
86 Update: x^(k+1) = x^k - deltax^k 
86 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
86 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
86 Newton iteration  3 done86 , maximum relative shift = 1.442e-01
86 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
43 Solve: M deltax^k = r 
43 Newton::solveLinearSystem : entering the try section 3
43 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
43 solveLinearSystemImpl_, before converged = ls.solve 
43 121 amgbackend::solve isParallel 1
42 Solve: M deltax^k = r 
42 Newton::solveLinearSystem : entering the try section 3
42 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
42 solveLinearSystemImpl_, before converged = ls.solve 
42 121 amgbackend::solve isParallel 1
57 Solve: M deltax^k = r 
57 Newton::solveLinearSystem : entering the try section 3
57 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
57 solveLinearSystemImpl_, before converged = ls.solve 
57 121 amgbackend::solve isParallel 1
21 Solve: M deltax^k = r 
21 Newton::solveLinearSystem : entering the try section 3
21 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
21 solveLinearSystemImpl_, before converged = ls.solve 
21 121 amgbackend::solve isParallel 1
100 Solve: M deltax^k = r 
100 Newton::solveLinearSystem : entering the try section 3
100 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
100 solveLinearSystemImpl_, before converged = ls.solve 
100 121 amgbackend::solve isParallel 1
96 Solve: M deltax^k = r 
96 Newton::solveLinearSystem : entering the try section 3
96 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
96 solveLinearSystemImpl_, before converged = ls.solve 
96 121 amgbackend::solve isParallel 1
64 Solve: M deltax^k = r 
64 Newton::solveLinearSystem : entering the try section 3
64 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
64 solveLinearSystemImpl_, before converged = ls.solve 
64 121 amgbackend::solve isParallel 1
93 Solve: M deltax^k = r 
93 Newton::solveLinearSystem : entering the try section 3
93 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
93 solveLinearSystemImpl_, before converged = ls.solve 
93 121 amgbackend::solve isParallel 1
13 Solve: M deltax^k = r 
13 Newton::solveLinearSystem : entering the try section 3
13 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
13 solveLinearSystemImpl_, before converged = ls.solve 
13 121 amgbackend::solve isParallel 1
47 Solve: M deltax^k = r 
47 Newton::solveLinearSystem : entering the try section 3
47 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
47 solveLinearSystemImpl_, before converged = ls.solve 
47 121 amgbackend::solve isParallel 1
67 Solve: M deltax^k = r 
67 Newton::solveLinearSystem : entering the try section 3
67 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
67 solveLinearSystemImpl_, before converged = ls.solve 
67 121 amgbackend::solve isParallel 1
83 Solve: M deltax^k = r 
83 Newton::solveLinearSystem : entering the try section 3
83 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
83 solveLinearSystemImpl_, before converged = ls.solve 
83 121 amgbackend::solve isParallel 1
80 Solve: M deltax^k = r 
80 Newton::solveLinearSystem : entering the try section 3
80 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
80 solveLinearSystemImpl_, before converged = ls.solve 
80 121 amgbackend::solve isParallel 1
113 Solve: M deltax^k = r 
113 Newton::solveLinearSystem : entering the try section 3
113 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
113 solveLinearSystemImpl_, before converged = ls.solve 
113 121 amgbackend::solve isParallel 1
8 Solve: M deltax^k = r 
8 Newton::solveLinearSystem : entering the try section 3
8 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
8 solveLinearSystemImpl_, before converged = ls.solve 
8 121 amgbackend::solve isParallel 1
20 Solve: M deltax^k = r 
20 Newton::solveLinearSystem : entering the try section 3
20 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
20 solveLinearSystemImpl_, before converged = ls.solve 
20 121 amgbackend::solve isParallel 1
7 Solve: M deltax^k = r 
7 Newton::solveLinearSystem : entering the try section 3
7 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
7 solveLinearSystemImpl_, before converged = ls.solve 
7 121 amgbackend::solve isParallel 1
112 Solve: M deltax^k = r 
112 Newton::solveLinearSystem : entering the try section 3
112 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
112 solveLinearSystemImpl_, before converged = ls.solve 
112 121 amgbackend::solve isParallel 1
95 Solve: M deltax^k = r 
95 Newton::solveLinearSystem : entering the try section 3
95 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
95 solveLinearSystemImpl_, before converged = ls.solve 
95 121 amgbackend::solve isParallel 1
40 Solve: M deltax^k = r 
40 Newton::solveLinearSystem : entering the try section 3
40 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
40 solveLinearSystemImpl_, before converged = ls.solve 
40 121 amgbackend::solve isParallel 1
70 Solve: M deltax^k = r 
70 Newton::solveLinearSystem : entering the try section 3
70 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
70 solveLinearSystemImpl_, before converged = ls.solve 
70 121 amgbackend::solve isParallel 1
71 Solve: M deltax^k = r 
71 Newton::solveLinearSystem : entering the try section 3
71 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
71 solveLinearSystemImpl_, before converged = ls.solve 
71 121 amgbackend::solve isParallel 1
12 Solve: M deltax^k = r 
12 Newton::solveLinearSystem : entering the try section 3
12 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
12 solveLinearSystemImpl_, before converged = ls.solve 
12 121 amgbackend::solve isParallel 1
114 Solve: M deltax^k = r 
114 Newton::solveLinearSystem : entering the try section 3
114 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
114 solveLinearSystemImpl_, before converged = ls.solve 
114 121 amgbackend::solve isParallel 1
63 Solve: M deltax^k = r 
63 Newton::solveLinearSystem : entering the try section 3
63 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
63 solveLinearSystemImpl_, before converged = ls.solve 
63 121 amgbackend::solve isParallel 1
56 Solve: M deltax^k = r 
56 Newton::solveLinearSystem : entering the try section 3
56 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
56 solveLinearSystemImpl_, before converged = ls.solve 
56 121 amgbackend::solve isParallel 1
116 Solve: M deltax^k = r 
116 Newton::solveLinearSystem : entering the try section 3
116 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
116 solveLinearSystemImpl_, before converged = ls.solve 
116 121 amgbackend::solve isParallel 1
25 Solve: M deltax^k = r 
25 Newton::solveLinearSystem : entering the try section 3
25 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
25 solveLinearSystemImpl_, before converged = ls.solve 
25 121 amgbackend::solve isParallel 1
55 Solve: M deltax^k = r 
55 Newton::solveLinearSystem : entering the try section 3
55 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
55 solveLinearSystemImpl_, before converged = ls.solve 
55 121 amgbackend::solve isParallel 1
49 Solve: M deltax^k = r 
49 Newton::solveLinearSystem : entering the try section 3
49 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
49 solveLinearSystemImpl_, before converged = ls.solve 
49 121 amgbackend::solve isParallel 1
54 Solve: M deltax^k = r 
54 Newton::solveLinearSystem : entering the try section 3
54 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
54 solveLinearSystemImpl_, before converged = ls.solve 
54 121 amgbackend::solve isParallel 1
46 Solve: M deltax^k = r 
46 Newton::solveLinearSystem : entering the try section 3
46 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
46 solveLinearSystemImpl_, before converged = ls.solve 
46 121 amgbackend::solve isParallel 1
79 Solve: M deltax^k = r 
79 Newton::solveLinearSystem : entering the try section 3
79 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
79 solveLinearSystemImpl_, before converged = ls.solve 
79 121 amgbackend::solve isParallel 1
105 Solve: M deltax^k = r 
105 Newton::solveLinearSystem : entering the try section 3
105 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
105 solveLinearSystemImpl_, before converged = ls.solve 
105 121 amgbackend::solve isParallel 1
53 Solve: M deltax^k = r 
53 Newton::solveLinearSystem : entering the try section 3
53 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
53 solveLinearSystemImpl_, before converged = ls.solve 
53 121 amgbackend::solve isParallel 1
38 Solve: M deltax^k = r 
38 Newton::solveLinearSystem : entering the try section 3
38 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
38 solveLinearSystemImpl_, before converged = ls.solve 
38 121 amgbackend::solve isParallel 1
44 Solve: M deltax^k = r 
44 Newton::solveLinearSystem : entering the try section 3
44 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
44 solveLinearSystemImpl_, before converged = ls.solve 
44 121 amgbackend::solve isParallel 1
69 Solve: M deltax^k = r 
69 Newton::solveLinearSystem : entering the try section 3
69 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
69 solveLinearSystemImpl_, before converged = ls.solve 
69 121 amgbackend::solve isParallel 1
120 Solve: M deltax^k = r 
120 Newton::solveLinearSystem : entering the try section 3
120 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
120 solveLinearSystemImpl_, before converged = ls.solve 
120 121 amgbackend::solve isParallel 1
28 Solve: M deltax^k = r 
28 Newton::solveLinearSystem : entering the try section 3
28 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
28 solveLinearSystemImpl_, before converged = ls.solve 
28 121 amgbackend::solve isParallel 1
75 Solve: M deltax^k = r 
75 Newton::solveLinearSystem : entering the try section 3
75 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
75 solveLinearSystemImpl_, before converged = ls.solve 
75 121 amgbackend::solve isParallel 1
61 Solve: M deltax^k = r 
61 Newton::solveLinearSystem : entering the try section 3
61 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
61 solveLinearSystemImpl_, before converged = ls.solve 
61 121 amgbackend::solve isParallel 1
6 Solve: M deltax^k = r 
6 Newton::solveLinearSystem : entering the try section 3
6 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
6 solveLinearSystemImpl_, before converged = ls.solve 
6 121 amgbackend::solve isParallel 1
110 Solve: M deltax^k = r 
110 Newton::solveLinearSystem : entering the try section 3
110 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
110 solveLinearSystemImpl_, before converged = ls.solve 
110 121 amgbackend::solve isParallel 1
74 Solve: M deltax^k = r 
74 Newton::solveLinearSystem : entering the try section 3
74 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
74 solveLinearSystemImpl_, before converged = ls.solve 
74 121 amgbackend::solve isParallel 1
10 Solve: M deltax^k = r 
10 Newton::solveLinearSystem : entering the try section 3
10 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
10 solveLinearSystemImpl_, before converged = ls.solve 
10 121 amgbackend::solve isParallel 1
59 Solve: M deltax^k = r 
59 Newton::solveLinearSystem : entering the try section 3
59 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
59 solveLinearSystemImpl_, before converged = ls.solve 
59 121 amgbackend::solve isParallel 1
72 Solve: M deltax^k = r 
72 Newton::solveLinearSystem : entering the try section 3
72 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
72 solveLinearSystemImpl_, before converged = ls.solve 
72 121 amgbackend::solve isParallel 1
89 Solve: M deltax^k = r 
89 Newton::solveLinearSystem : entering the try section 3
89 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
89 solveLinearSystemImpl_, before converged = ls.solve 
89 121 amgbackend::solve isParallel 1
23 Solve: M deltax^k = r 
23 Newton::solveLinearSystem : entering the try section 3
23 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
23 solveLinearSystemImpl_, before converged = ls.solve 
23 121 amgbackend::solve isParallel 1
41 Solve: M deltax^k = r 
41 Newton::solveLinearSystem : entering the try section 3
41 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
41 solveLinearSystemImpl_, before converged = ls.solve 
41 121 amgbackend::solve isParallel 1
11 Solve: M deltax^k = r 
11 Newton::solveLinearSystem : entering the try section 3
11 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
11 solveLinearSystemImpl_, before converged = ls.solve 
11 121 amgbackend::solve isParallel 1
27 Solve: M deltax^k = r 
27 Newton::solveLinearSystem : entering the try section 3
27 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
27 solveLinearSystemImpl_, before converged = ls.solve 
27 121 amgbackend::solve isParallel 1
76 Solve: M deltax^k = r 
76 Newton::solveLinearSystem : entering the try section 3
76 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
76 solveLinearSystemImpl_, before converged = ls.solve 
76 121 amgbackend::solve isParallel 1
86 Solve: M deltax^k = r 
86 Newton::solveLinearSystem : entering the try section 3
86 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
86 solveLinearSystemImpl_, before converged = ls.solve 
86 121 amgbackend::solve isParallel 1
87 Solve: M deltax^k = r 
87 Newton::solveLinearSystem : entering the try section 3
87 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
87 solveLinearSystemImpl_, before converged = ls.solve 
87 121 amgbackend::solve isParallel 1
16 Solve: M deltax^k = r 
16 Newton::solveLinearSystem : entering the try section 3
16 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
16 solveLinearSystemImpl_, before converged = ls.solve 
16 121 amgbackend::solve isParallel 1
19 Solve: M deltax^k = r 
19 Newton::solveLinearSystem : entering the try section 3
19 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
19 solveLinearSystemImpl_, before converged = ls.solve 
19 121 amgbackend::solve isParallel 1
103 Solve: M deltax^k = r 
103 Newton::solveLinearSystem : entering the try section 3
103 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
103 solveLinearSystemImpl_, before converged = ls.solve 
103 121 amgbackend::solve isParallel 1
0 Solve: M deltax^k = r 
0 Newton::solveLinearSystem : entering the try section 3
0 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
0 solveLinearSystemImpl_, before converged = ls.solve 
0 121 amgbackend::solve isParallel 1
115 Solve: M deltax^k = r 
115 Newton::solveLinearSystem : entering the try section 3
115 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
115 solveLinearSystemImpl_, before converged = ls.solve 
115 121 amgbackend::solve isParallel 1
107 Solve: M deltax^k = r 
107 Newton::solveLinearSystem : entering the try section 3
107 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
107 solveLinearSystemImpl_, before converged = ls.solve 
107 121 amgbackend::solve isParallel 1
62 Solve: M deltax^k = r 
62 Newton::solveLinearSystem : entering the try section 3
62 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
62 solveLinearSystemImpl_, before converged = ls.solve 
62 121 amgbackend::solve isParallel 1
4 Solve: M deltax^k = r 
4 Newton::solveLinearSystem : entering the try section 3
4 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
4 solveLinearSystemImpl_, before converged = ls.solve 
4 121 amgbackend::solve isParallel 1
22 Solve: M deltax^k = r 
22 Newton::solveLinearSystem : entering the try section 3
22 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
22 solveLinearSystemImpl_, before converged = ls.solve 
22 121 amgbackend::solve isParallel 1
82 Solve: M deltax^k = r 
82 Newton::solveLinearSystem : entering the try section 3
82 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
82 solveLinearSystemImpl_, before converged = ls.solve 
82 121 amgbackend::solve isParallel 1
88 Solve: M deltax^k = r 
88 Newton::solveLinearSystem : entering the try section 3
88 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
88 solveLinearSystemImpl_, before converged = ls.solve 
88 121 amgbackend::solve isParallel 1
73 Solve: M deltax^k = r 
73 Newton::solveLinearSystem : entering the try section 3
73 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
73 solveLinearSystemImpl_, before converged = ls.solve 
73 121 amgbackend::solve isParallel 1
5 Solve: M deltax^k = r 
5 Newton::solveLinearSystem : entering the try section 3
5 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
5 solveLinearSystemImpl_, before converged = ls.solve 
5 121 amgbackend::solve isParallel 1
108 Solve: M deltax^k = r 
108 Newton::solveLinearSystem : entering the try section 3
108 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
108 solveLinearSystemImpl_, before converged = ls.solve 
108 121 amgbackend::solve isParallel 1
118 Solve: M deltax^k = r 
118 Newton::solveLinearSystem : entering the try section 3
118 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
118 solveLinearSystemImpl_, before converged = ls.solve 
118 121 amgbackend::solve isParallel 1
26 Solve: M deltax^k = r 
26 Newton::solveLinearSystem : entering the try section 3
26 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
26 solveLinearSystemImpl_, before converged = ls.solve 
26 121 amgbackend::solve isParallel 1
39 Solve: M deltax^k = r 
39 Newton::solveLinearSystem : entering the try section 3
39 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
39 solveLinearSystemImpl_, before converged = ls.solve 
39 121 amgbackend::solve isParallel 1
48 Solve: M deltax^k = r 
48 Newton::solveLinearSystem : entering the try section 3
48 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
48 solveLinearSystemImpl_, before converged = ls.solve 
48 121 amgbackend::solve isParallel 1
104 Solve: M deltax^k = r 
104 Newton::solveLinearSystem : entering the try section 3
104 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
104 solveLinearSystemImpl_, before converged = ls.solve 
104 121 amgbackend::solve isParallel 1
119 Solve: M deltax^k = r 
119 Newton::solveLinearSystem : entering the try section 3
119 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
119 solveLinearSystemImpl_, before converged = ls.solve 
119 121 amgbackend::solve isParallel 1
78 Solve: M deltax^k = r 
78 Newton::solveLinearSystem : entering the try section 3
78 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
78 solveLinearSystemImpl_, before converged = ls.solve 
78 121 amgbackend::solve isParallel 1
29 Solve: M deltax^k = r 
29 Newton::solveLinearSystem : entering the try section 3
29 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
29 solveLinearSystemImpl_, before converged = ls.solve 
29 121 amgbackend::solve isParallel 1
68 Solve: M deltax^k = r 
68 Newton::solveLinearSystem : entering the try section 3
68 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
68 solveLinearSystemImpl_, before converged = ls.solve 
68 121 amgbackend::solve isParallel 1
85 Solve: M deltax^k = r 
85 Newton::solveLinearSystem : entering the try section 3
85 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
85 solveLinearSystemImpl_, before converged = ls.solve 
85 121 amgbackend::solve isParallel 1
60 Solve: M deltax^k = r 
60 Newton::solveLinearSystem : entering the try section 3
60 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
60 solveLinearSystemImpl_, before converged = ls.solve 
60 121 amgbackend::solve isParallel 1
65 Solve: M deltax^k = r 
65 Newton::solveLinearSystem : entering the try section 3
65 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
65 solveLinearSystemImpl_, before converged = ls.solve 
65 121 amgbackend::solve isParallel 1
45 Solve: M deltax^k = r 
45 Newton::solveLinearSystem : entering the try section 3
45 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
45 solveLinearSystemImpl_, before converged = ls.solve 
45 121 amgbackend::solve isParallel 1
106 Solve: M deltax^k = r 
106 Newton::solveLinearSystem : entering the try section 3
106 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
106 solveLinearSystemImpl_, before converged = ls.solve 
106 121 amgbackend::solve isParallel 1
1 Solve: M deltax^k = r 
1 Newton::solveLinearSystem : entering the try section 3
1 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
1 solveLinearSystemImpl_, before converged = ls.solve 
1 121 amgbackend::solve isParallel 1
33 Solve: M deltax^k = r 
33 Newton::solveLinearSystem : entering the try section 3
33 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
33 solveLinearSystemImpl_, before converged = ls.solve 
33 121 amgbackend::solve isParallel 1
15 Solve: M deltax^k = r 
15 Newton::solveLinearSystem : entering the try section 3
15 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
15 solveLinearSystemImpl_, before converged = ls.solve 
15 121 amgbackend::solve isParallel 1
14 Solve: M deltax^k = r 
14 Newton::solveLinearSystem : entering the try section 3
14 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
14 solveLinearSystemImpl_, before converged = ls.solve 
14 121 amgbackend::solve isParallel 1
32 Solve: M deltax^k = r 
32 Newton::solveLinearSystem : entering the try section 3
32 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
32 solveLinearSystemImpl_, before converged = ls.solve 
32 121 amgbackend::solve isParallel 1
84 Solve: M deltax^k = r 
84 Newton::solveLinearSystem : entering the try section 3
84 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
84 solveLinearSystemImpl_, before converged = ls.solve 
84 121 amgbackend::solve isParallel 1
2 Solve: M deltax^k = r 
2 Newton::solveLinearSystem : entering the try section 3
2 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
2 solveLinearSystemImpl_, before converged = ls.solve 
2 121 amgbackend::solve isParallel 1
50 Solve: M deltax^k = r 
50 Newton::solveLinearSystem : entering the try section 3
50 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
50 solveLinearSystemImpl_, before converged = ls.solve 
50 121 amgbackend::solve isParallel 1
77 Solve: M deltax^k = r 
77 Newton::solveLinearSystem : entering the try section 3
77 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
77 solveLinearSystemImpl_, before converged = ls.solve 
77 121 amgbackend::solve isParallel 1
109 Solve: M deltax^k = r 
109 Newton::solveLinearSystem : entering the try section 3
109 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
109 solveLinearSystemImpl_, before converged = ls.solve 
109 121 amgbackend::solve isParallel 1
51 Solve: M deltax^k = r 
51 Newton::solveLinearSystem : entering the try section 3
51 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
51 solveLinearSystemImpl_, before converged = ls.solve 
51 121 amgbackend::solve isParallel 1
117 Solve: M deltax^k = r 
117 Newton::solveLinearSystem : entering the try section 3
117 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
117 solveLinearSystemImpl_, before converged = ls.solve 
117 121 amgbackend::solve isParallel 1
3 Solve: M deltax^k = r 
3 Newton::solveLinearSystem : entering the try section 3
3 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
3 solveLinearSystemImpl_, before converged = ls.solve 
3 121 amgbackend::solve isParallel 1
101 Solve: M deltax^k = r 
101 Newton::solveLinearSystem : entering the try section 3
101 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
101 solveLinearSystemImpl_, before converged = ls.solve 
101 121 amgbackend::solve isParallel 1
111 Solve: M deltax^k = r 
111 Newton::solveLinearSystem : entering the try section 3
111 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
111 solveLinearSystemImpl_, before converged = ls.solve 
111 121 amgbackend::solve isParallel 1
52 Solve: M deltax^k = r 
52 Newton::solveLinearSystem : entering the try section 3
52 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
52 solveLinearSystemImpl_, before converged = ls.solve 
52 121 amgbackend::solve isParallel 1
35 Solve: M deltax^k = r 
35 Newton::solveLinearSystem : entering the try section 3
35 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
35 solveLinearSystemImpl_, before converged = ls.solve 
35 121 amgbackend::solve isParallel 1
17 Solve: M deltax^k = r 
17 Newton::solveLinearSystem : entering the try section 3
17 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
17 solveLinearSystemImpl_, before converged = ls.solve 
17 121 amgbackend::solve isParallel 1
31 Solve: M deltax^k = r 
31 Newton::solveLinearSystem : entering the try section 3
31 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
31 solveLinearSystemImpl_, before converged = ls.solve 
31 121 amgbackend::solve isParallel 1
30 Solve: M deltax^k = r 
30 Newton::solveLinearSystem : entering the try section 3
30 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
30 solveLinearSystemImpl_, before converged = ls.solve 
30 121 amgbackend::solve isParallel 1
66 Solve: M deltax^k = r 
66 Newton::solveLinearSystem : entering the try section 3
66 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
66 solveLinearSystemImpl_, before converged = ls.solve 
66 121 amgbackend::solve isParallel 1
24 Solve: M deltax^k = r 
24 Newton::solveLinearSystem : entering the try section 3
24 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
24 solveLinearSystemImpl_, before converged = ls.solve 
24 121 amgbackend::solve isParallel 1
97 Solve: M deltax^k = r 
97 Newton::solveLinearSystem : entering the try section 3
97 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
97 solveLinearSystemImpl_, before converged = ls.solve 
97 121 amgbackend::solve isParallel 1
91 Solve: M deltax^k = r 
91 Newton::solveLinearSystem : entering the try section 3
91 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
91 solveLinearSystemImpl_, before converged = ls.solve 
91 121 amgbackend::solve isParallel 1
37 Solve: M deltax^k = r 
37 Newton::solveLinearSystem : entering the try section 3
37 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
37 solveLinearSystemImpl_, before converged = ls.solve 
37 121 amgbackend::solve isParallel 1
98 Solve: M deltax^k = r 
98 Newton::solveLinearSystem : entering the try section 3
98 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
98 solveLinearSystemImpl_, before converged = ls.solve 
98 121 amgbackend::solve isParallel 1
36 Solve: M deltax^k = r 
36 Newton::solveLinearSystem : entering the try section 3
36 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
36 solveLinearSystemImpl_, before converged = ls.solve 
36 121 amgbackend::solve isParallel 1
58 Solve: M deltax^k = r 
58 Newton::solveLinearSystem : entering the try section 3
58 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
58 solveLinearSystemImpl_, before converged = ls.solve 
58 121 amgbackend::solve isParallel 1
102 Solve: M deltax^k = r 
102 Newton::solveLinearSystem : entering the try section 3
102 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
102 solveLinearSystemImpl_, before converged = ls.solve 
102 121 amgbackend::solve isParallel 1
9 Solve: M deltax^k = r 
9 Newton::solveLinearSystem : entering the try section 3
9 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
9 solveLinearSystemImpl_, before converged = ls.solve 
9 121 amgbackend::solve isParallel 1
81 Solve: M deltax^k = r 
81 Newton::solveLinearSystem : entering the try section 3
81 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
81 solveLinearSystemImpl_, before converged = ls.solve 
81 121 amgbackend::solve isParallel 1
99 Solve: M deltax^k = r 
99 Newton::solveLinearSystem : entering the try section 3
99 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
99 solveLinearSystemImpl_, before converged = ls.solve 
99 121 amgbackend::solve isParallel 1
92 Solve: M deltax^k = r 
92 Newton::solveLinearSystem : entering the try section 3
92 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
92 solveLinearSystemImpl_, before converged = ls.solve 
92 121 amgbackend::solve isParallel 1
94 Solve: M deltax^k = r 
94 Newton::solveLinearSystem : entering the try section 3
94 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
94 solveLinearSystemImpl_, before converged = ls.solve 
94 121 amgbackend::solve isParallel 1
34 Solve: M deltax^k = r 
34 Newton::solveLinearSystem : entering the try section 3
34 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
34 solveLinearSystemImpl_, before converged = ls.solve 
34 121 amgbackend::solve isParallel 1
18 Solve: M deltax^k = r 
18 Newton::solveLinearSystem : entering the try section 3
18 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
18 solveLinearSystemImpl_, before converged = ls.solve 
18 121 amgbackend::solve isParallel 1
90 Solve: M deltax^k = r 
90 Newton::solveLinearSystem : entering the try section 3
90 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
90 solveLinearSystemImpl_, before converged = ls.solve 
90 121 amgbackend::solve isParallel 1
83 121 before Dune::BiCGSTABSolver 
83 Dune::BiCGSTABSolver.apply(x, b, result_) 
83 BiCGSTABSolver::apply 
80 121 before Dune::BiCGSTABSolver 
80 Dune::BiCGSTABSolver.apply(x, b, result_) 
80 BiCGSTABSolver::apply 
113 121 before Dune::BiCGSTABSolver 
113 Dune::BiCGSTABSolver.apply(x, b, result_) 
113 BiCGSTABSolver::apply 
8 121 before Dune::BiCGSTABSolver 
8 Dune::BiCGSTABSolver.apply(x, b, result_) 
8 BiCGSTABSolver::apply 
20 121 before Dune::BiCGSTABSolver 
20 Dune::BiCGSTABSolver.apply(x, b, result_) 
20 BiCGSTABSolver::apply 
7 121 before Dune::BiCGSTABSolver 
7 Dune::BiCGSTABSolver.apply(x, b, result_) 
7 BiCGSTABSolver::apply 
112 121 before Dune::BiCGSTABSolver 
112 Dune::BiCGSTABSolver.apply(x, b, result_) 
112 BiCGSTABSolver::apply 
95 121 before Dune::BiCGSTABSolver 
95 Dune::BiCGSTABSolver.apply(x, b, result_) 
95 BiCGSTABSolver::apply 
40 121 before Dune::BiCGSTABSolver 
40 Dune::BiCGSTABSolver.apply(x, b, result_) 
40 BiCGSTABSolver::apply 
70 121 before Dune::BiCGSTABSolver 
70 Dune::BiCGSTABSolver.apply(x, b, result_) 
70 BiCGSTABSolver::apply 
71 121 before Dune::BiCGSTABSolver 
71 Dune::BiCGSTABSolver.apply(x, b, result_) 
71 BiCGSTABSolver::apply 
12 121 before Dune::BiCGSTABSolver 
12 Dune::BiCGSTABSolver.apply(x, b, result_) 
12 BiCGSTABSolver::apply 
114 121 before Dune::BiCGSTABSolver 
114 Dune::BiCGSTABSolver.apply(x, b, result_) 
114 BiCGSTABSolver::apply 
63 121 before Dune::BiCGSTABSolver 
63 Dune::BiCGSTABSolver.apply(x, b, result_) 
63 BiCGSTABSolver::apply 
56 121 before Dune::BiCGSTABSolver 
56 Dune::BiCGSTABSolver.apply(x, b, result_) 
56 BiCGSTABSolver::apply 
116 121 before Dune::BiCGSTABSolver 
116 Dune::BiCGSTABSolver.apply(x, b, result_) 
116 BiCGSTABSolver::apply 
25 121 before Dune::BiCGSTABSolver 
25 Dune::BiCGSTABSolver.apply(x, b, result_) 
25 BiCGSTABSolver::apply 
55 121 before Dune::BiCGSTABSolver 
55 Dune::BiCGSTABSolver.apply(x, b, result_) 
55 BiCGSTABSolver::apply 
49 121 before Dune::BiCGSTABSolver 
49 Dune::BiCGSTABSolver.apply(x, b, result_) 
49 BiCGSTABSolver::apply 
54 121 before Dune::BiCGSTABSolver 
54 Dune::BiCGSTABSolver.apply(x, b, result_) 
54 BiCGSTABSolver::apply 
46 121 before Dune::BiCGSTABSolver 
46 Dune::BiCGSTABSolver.apply(x, b, result_) 
46 BiCGSTABSolver::apply 
79 121 before Dune::BiCGSTABSolver 
79 Dune::BiCGSTABSolver.apply(x, b, result_) 
79 BiCGSTABSolver::apply 
105 121 before Dune::BiCGSTABSolver 
105 Dune::BiCGSTABSolver.apply(x, b, result_) 
105 BiCGSTABSolver::apply 
53 121 before Dune::BiCGSTABSolver 
53 Dune::BiCGSTABSolver.apply(x, b, result_) 
53 BiCGSTABSolver::apply 
38 121 before Dune::BiCGSTABSolver 
38 Dune::BiCGSTABSolver.apply(x, b, result_) 
38 BiCGSTABSolver::apply 
44 121 before Dune::BiCGSTABSolver 
44 Dune::BiCGSTABSolver.apply(x, b, result_) 
44 BiCGSTABSolver::apply 
69 121 before Dune::BiCGSTABSolver 
69 Dune::BiCGSTABSolver.apply(x, b, result_) 
69 BiCGSTABSolver::apply 
120 121 before Dune::BiCGSTABSolver 
120 Dune::BiCGSTABSolver.apply(x, b, result_) 
120 BiCGSTABSolver::apply 
28 121 before Dune::BiCGSTABSolver 
28 Dune::BiCGSTABSolver.apply(x, b, result_) 
28 BiCGSTABSolver::apply 
75 121 before Dune::BiCGSTABSolver 
75 Dune::BiCGSTABSolver.apply(x, b, result_) 
75 BiCGSTABSolver::apply 
61 121 before Dune::BiCGSTABSolver 
61 Dune::BiCGSTABSolver.apply(x, b, result_) 
61 BiCGSTABSolver::apply 
6 121 before Dune::BiCGSTABSolver 
6 Dune::BiCGSTABSolver.apply(x, b, result_) 
6 BiCGSTABSolver::apply 
110 121 before Dune::BiCGSTABSolver 
110 Dune::BiCGSTABSolver.apply(x, b, result_) 
110 BiCGSTABSolver::apply 
74 121 before Dune::BiCGSTABSolver 
74 Dune::BiCGSTABSolver.apply(x, b, result_) 
74 BiCGSTABSolver::apply 
10 121 before Dune::BiCGSTABSolver 
10 Dune::BiCGSTABSolver.apply(x, b, result_) 
10 BiCGSTABSolver::apply 
59 121 before Dune::BiCGSTABSolver 
59 Dune::BiCGSTABSolver.apply(x, b, result_) 
59 BiCGSTABSolver::apply 
72 121 before Dune::BiCGSTABSolver 
72 Dune::BiCGSTABSolver.apply(x, b, result_) 
72 BiCGSTABSolver::apply 
89 121 before Dune::BiCGSTABSolver 
89 Dune::BiCGSTABSolver.apply(x, b, result_) 
89 BiCGSTABSolver::apply 
23 121 before Dune::BiCGSTABSolver 
23 Dune::BiCGSTABSolver.apply(x, b, result_) 
23 BiCGSTABSolver::apply 
41 121 before Dune::BiCGSTABSolver 
41 Dune::BiCGSTABSolver.apply(x, b, result_) 
41 BiCGSTABSolver::apply 
11 121 before Dune::BiCGSTABSolver 
11 Dune::BiCGSTABSolver.apply(x, b, result_) 
11 BiCGSTABSolver::apply 
27 121 before Dune::BiCGSTABSolver 
27 Dune::BiCGSTABSolver.apply(x, b, result_) 
27 BiCGSTABSolver::apply 
90 121 before Dune::BiCGSTABSolver 
90 Dune::BiCGSTABSolver.apply(x, b, result_) 
90 BiCGSTABSolver::apply 
86 121 before Dune::BiCGSTABSolver 
86 Dune::BiCGSTABSolver.apply(x, b, result_) 
86 BiCGSTABSolver::apply 
87 121 before Dune::BiCGSTABSolver 
87 Dune::BiCGSTABSolver.apply(x, b, result_) 
87 BiCGSTABSolver::apply 
16 121 before Dune::BiCGSTABSolver 
16 Dune::BiCGSTABSolver.apply(x, b, result_) 
16 BiCGSTABSolver::apply 
19 121 before Dune::BiCGSTABSolver 
19 Dune::BiCGSTABSolver.apply(x, b, result_) 
19 BiCGSTABSolver::apply 
103 121 before Dune::BiCGSTABSolver 
103 Dune::BiCGSTABSolver.apply(x, b, result_) 
103 BiCGSTABSolver::apply 
115 121 before Dune::BiCGSTABSolver 
115 Dune::BiCGSTABSolver.apply(x, b, result_) 
115 BiCGSTABSolver::apply 
107 121 before Dune::BiCGSTABSolver 
107 Dune::BiCGSTABSolver.apply(x, b, result_) 
107 BiCGSTABSolver::apply 
62 121 before Dune::BiCGSTABSolver 
62 Dune::BiCGSTABSolver.apply(x, b, result_) 
62 BiCGSTABSolver::apply 
4 121 before Dune::BiCGSTABSolver 
4 Dune::BiCGSTABSolver.apply(x, b, result_) 
4 BiCGSTABSolver::apply 
22 121 before Dune::BiCGSTABSolver 
22 Dune::BiCGSTABSolver.apply(x, b, result_) 
22 BiCGSTABSolver::apply 
82 121 before Dune::BiCGSTABSolver 
82 Dune::BiCGSTABSolver.apply(x, b, result_) 
82 BiCGSTABSolver::apply 
88 121 before Dune::BiCGSTABSolver 
88 Dune::BiCGSTABSolver.apply(x, b, result_) 
88 BiCGSTABSolver::apply 
73 121 before Dune::BiCGSTABSolver 
73 Dune::BiCGSTABSolver.apply(x, b, result_) 
73 BiCGSTABSolver::apply 
5 121 before Dune::BiCGSTABSolver 
5 Dune::BiCGSTABSolver.apply(x, b, result_) 
5 BiCGSTABSolver::apply 
108 121 before Dune::BiCGSTABSolver 
108 Dune::BiCGSTABSolver.apply(x, b, result_) 
108 BiCGSTABSolver::apply 
118 121 before Dune::BiCGSTABSolver 
118 Dune::BiCGSTABSolver.apply(x, b, result_) 
118 BiCGSTABSolver::apply 
26 121 before Dune::BiCGSTABSolver 
26 Dune::BiCGSTABSolver.apply(x, b, result_) 
26 BiCGSTABSolver::apply 
39 121 before Dune::BiCGSTABSolver 
39 Dune::BiCGSTABSolver.apply(x, b, result_) 
39 BiCGSTABSolver::apply 
48 121 before Dune::BiCGSTABSolver 
48 Dune::BiCGSTABSolver.apply(x, b, result_) 
48 BiCGSTABSolver::apply 
104 121 before Dune::BiCGSTABSolver 
104 Dune::BiCGSTABSolver.apply(x, b, result_) 
104 BiCGSTABSolver::apply 
119 121 before Dune::BiCGSTABSolver 
119 Dune::BiCGSTABSolver.apply(x, b, result_) 
119 BiCGSTABSolver::apply 
78 121 before Dune::BiCGSTABSolver 
78 Dune::BiCGSTABSolver.apply(x, b, result_) 
78 BiCGSTABSolver::apply 
29 121 before Dune::BiCGSTABSolver 
29 Dune::BiCGSTABSolver.apply(x, b, result_) 
29 BiCGSTABSolver::apply 
68 121 before Dune::BiCGSTABSolver 
68 Dune::BiCGSTABSolver.apply(x, b, result_) 
68 BiCGSTABSolver::apply 
85 121 before Dune::BiCGSTABSolver 
85 Dune::BiCGSTABSolver.apply(x, b, result_) 
85 BiCGSTABSolver::apply 
60 121 before Dune::BiCGSTABSolver 
60 Dune::BiCGSTABSolver.apply(x, b, result_) 
60 BiCGSTABSolver::apply 
65 121 before Dune::BiCGSTABSolver 
65 Dune::BiCGSTABSolver.apply(x, b, result_) 
65 BiCGSTABSolver::apply 
45 121 before Dune::BiCGSTABSolver 
45 Dune::BiCGSTABSolver.apply(x, b, result_) 
45 BiCGSTABSolver::apply 
106 121 before Dune::BiCGSTABSolver 
106 Dune::BiCGSTABSolver.apply(x, b, result_) 
106 BiCGSTABSolver::apply 
1 121 before Dune::BiCGSTABSolver 
1 Dune::BiCGSTABSolver.apply(x, b, result_) 
1 BiCGSTABSolver::apply 
33 121 before Dune::BiCGSTABSolver 
33 Dune::BiCGSTABSolver.apply(x, b, result_) 
33 BiCGSTABSolver::apply 
15 121 before Dune::BiCGSTABSolver 
15 Dune::BiCGSTABSolver.apply(x, b, result_) 
15 BiCGSTABSolver::apply 
14 121 before Dune::BiCGSTABSolver 
14 Dune::BiCGSTABSolver.apply(x, b, result_) 
14 BiCGSTABSolver::apply 
32 121 before Dune::BiCGSTABSolver 
32 Dune::BiCGSTABSolver.apply(x, b, result_) 
32 BiCGSTABSolver::apply 
84 121 before Dune::BiCGSTABSolver 
84 Dune::BiCGSTABSolver.apply(x, b, result_) 
84 BiCGSTABSolver::apply 
2 121 before Dune::BiCGSTABSolver 
2 Dune::BiCGSTABSolver.apply(x, b, result_) 
2 BiCGSTABSolver::apply 
50 121 before Dune::BiCGSTABSolver 
50 Dune::BiCGSTABSolver.apply(x, b, result_) 
50 BiCGSTABSolver::apply 
77 121 before Dune::BiCGSTABSolver 
77 Dune::BiCGSTABSolver.apply(x, b, result_) 
77 BiCGSTABSolver::apply 
109 121 before Dune::BiCGSTABSolver 
109 Dune::BiCGSTABSolver.apply(x, b, result_) 
109 BiCGSTABSolver::apply 
51 121 before Dune::BiCGSTABSolver 
51 Dune::BiCGSTABSolver.apply(x, b, result_) 
51 BiCGSTABSolver::apply 
117 121 before Dune::BiCGSTABSolver 
117 Dune::BiCGSTABSolver.apply(x, b, result_) 
117 BiCGSTABSolver::apply 
3 121 before Dune::BiCGSTABSolver 
3 Dune::BiCGSTABSolver.apply(x, b, result_) 
3 BiCGSTABSolver::apply 
101 121 before Dune::BiCGSTABSolver 
101 Dune::BiCGSTABSolver.apply(x, b, result_) 
101 BiCGSTABSolver::apply 
111 121 before Dune::BiCGSTABSolver 
111 Dune::BiCGSTABSolver.apply(x, b, result_) 
111 BiCGSTABSolver::apply 
52 121 before Dune::BiCGSTABSolver 
52 Dune::BiCGSTABSolver.apply(x, b, result_) 
52 BiCGSTABSolver::apply 
35 121 before Dune::BiCGSTABSolver 
35 Dune::BiCGSTABSolver.apply(x, b, result_) 
35 BiCGSTABSolver::apply 
17 121 before Dune::BiCGSTABSolver 
17 Dune::BiCGSTABSolver.apply(x, b, result_) 
17 BiCGSTABSolver::apply 
31 121 before Dune::BiCGSTABSolver 
31 Dune::BiCGSTABSolver.apply(x, b, result_) 
31 BiCGSTABSolver::apply 
30 121 before Dune::BiCGSTABSolver 
30 Dune::BiCGSTABSolver.apply(x, b, result_) 
30 BiCGSTABSolver::apply 
66 121 before Dune::BiCGSTABSolver 
66 Dune::BiCGSTABSolver.apply(x, b, result_) 
66 BiCGSTABSolver::apply 
24 121 before Dune::BiCGSTABSolver 
24 Dune::BiCGSTABSolver.apply(x, b, result_) 
24 BiCGSTABSolver::apply 
97 121 before Dune::BiCGSTABSolver 
97 Dune::BiCGSTABSolver.apply(x, b, result_) 
97 BiCGSTABSolver::apply 
91 121 before Dune::BiCGSTABSolver 
91 Dune::BiCGSTABSolver.apply(x, b, result_) 
91 BiCGSTABSolver::apply 
37 121 before Dune::BiCGSTABSolver 
37 Dune::BiCGSTABSolver.apply(x, b, result_) 
37 BiCGSTABSolver::apply 
98 121 before Dune::BiCGSTABSolver 
98 Dune::BiCGSTABSolver.apply(x, b, result_) 
98 BiCGSTABSolver::apply 
36 121 before Dune::BiCGSTABSolver 
36 Dune::BiCGSTABSolver.apply(x, b, result_) 
36 BiCGSTABSolver::apply 
58 121 before Dune::BiCGSTABSolver 
58 Dune::BiCGSTABSolver.apply(x, b, result_) 
58 BiCGSTABSolver::apply 
102 121 before Dune::BiCGSTABSolver 
102 Dune::BiCGSTABSolver.apply(x, b, result_) 
102 BiCGSTABSolver::apply 
9 121 before Dune::BiCGSTABSolver 
9 Dune::BiCGSTABSolver.apply(x, b, result_) 
9 BiCGSTABSolver::apply 
81 121 before Dune::BiCGSTABSolver 
81 Dune::BiCGSTABSolver.apply(x, b, result_) 
81 BiCGSTABSolver::apply 
99 121 before Dune::BiCGSTABSolver 
99 Dune::BiCGSTABSolver.apply(x, b, result_) 
99 BiCGSTABSolver::apply 
92 121 before Dune::BiCGSTABSolver 
92 Dune::BiCGSTABSolver.apply(x, b, result_) 
92 BiCGSTABSolver::apply 
94 121 before Dune::BiCGSTABSolver 
94 Dune::BiCGSTABSolver.apply(x, b, result_) 
94 BiCGSTABSolver::apply 
34 121 before Dune::BiCGSTABSolver 
34 Dune::BiCGSTABSolver.apply(x, b, result_) 
34 BiCGSTABSolver::apply 
18 121 before Dune::BiCGSTABSolver 
18 Dune::BiCGSTABSolver.apply(x, b, result_) 
18 BiCGSTABSolver::apply 
76 121 before Dune::BiCGSTABSolver 
76 Dune::BiCGSTABSolver.apply(x, b, result_) 
76 BiCGSTABSolver::apply 
43 121 before Dune::BiCGSTABSolver 
43 Dune::BiCGSTABSolver.apply(x, b, result_) 
43 BiCGSTABSolver::apply 
42 121 before Dune::BiCGSTABSolver 
42 Dune::BiCGSTABSolver.apply(x, b, result_) 
42 BiCGSTABSolver::apply 
57 121 before Dune::BiCGSTABSolver 
57 Dune::BiCGSTABSolver.apply(x, b, result_) 
57 BiCGSTABSolver::apply 
21 121 before Dune::BiCGSTABSolver 
21 Dune::BiCGSTABSolver.apply(x, b, result_) 
21 BiCGSTABSolver::apply 
100 121 before Dune::BiCGSTABSolver 
100 Dune::BiCGSTABSolver.apply(x, b, result_) 
100 BiCGSTABSolver::apply 
96 121 before Dune::BiCGSTABSolver 
96 Dune::BiCGSTABSolver.apply(x, b, result_) 
96 BiCGSTABSolver::apply 
64 121 before Dune::BiCGSTABSolver 
64 Dune::BiCGSTABSolver.apply(x, b, result_) 
64 BiCGSTABSolver::apply 
93 121 before Dune::BiCGSTABSolver 
93 Dune::BiCGSTABSolver.apply(x, b, result_) 
93 BiCGSTABSolver::apply 
13 121 before Dune::BiCGSTABSolver 
13 Dune::BiCGSTABSolver.apply(x, b, result_) 
13 BiCGSTABSolver::apply 
47 121 before Dune::BiCGSTABSolver 
47 Dune::BiCGSTABSolver.apply(x, b, result_) 
47 BiCGSTABSolver::apply 
67 121 before Dune::BiCGSTABSolver 
67 Dune::BiCGSTABSolver.apply(x, b, result_) 
67 BiCGSTABSolver::apply 
5 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
108 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
118 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
26 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
39 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
48 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
104 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
119 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
78 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
29 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
68 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
85 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
60 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
65 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
45 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
106 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
1 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
33 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
15 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
14 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
32 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
84 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
2 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
50 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
77 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
109 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
51 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
117 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
3 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
101 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
111 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
52 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
35 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
17 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
31 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
30 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
66 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
24 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
97 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
91 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
37 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
98 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
36 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
58 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
102 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
9 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
81 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
99 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
92 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
94 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
34 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
18 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
76 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
43 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
42 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
57 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
21 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
100 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
96 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
64 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
93 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
13 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
47 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
27 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
83 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
80 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
113 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
8 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
20 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
7 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
112 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
95 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
40 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
70 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
71 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
12 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
114 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
63 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
56 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
116 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
25 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
55 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
49 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
54 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
46 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
79 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
105 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
53 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
38 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
44 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
69 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
120 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
28 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
75 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
61 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
6 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
110 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
74 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
10 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
59 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
72 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
89 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
23 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
41 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
11 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
67 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
90 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
86 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
87 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
16 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
19 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
Using a direct coarse solver (SuperLU)
Building hierarchy of 2 levels (inclusive coarse solver) took 0.0241194 seconds.
0 121 before Dune::BiCGSTABSolver 
0 Dune::BiCGSTABSolver.apply(x, b, result_) 
0 BiCGSTABSolver::apply 
0 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
103 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
115 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
107 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
62 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
4 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
22 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
82 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
88 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
73 === BiCGSTABSolver
 Iter          Defect            Rate
    0      2.44634e-06
113 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
113 === rate=2.39334e-33, T=0.0207044, TIT=0.0414088, IT=0.5
113 finished solveLinearSystemImpl_ 1
113 converged value: 1 121 1 let s go get convergedRemote
113 to  comm_.min(converged) 
113 did  comm_.min(converged) convergedRemote: 1
113 final convergedRemote: 1
113 Update: x^(k+1) = x^k - deltax^k 
113 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
113 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
113 Newton iteration  4 done113 , maximum relative shift = 1.453e-01
113 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
8 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
8 === rate=2.39334e-33, T=0.0206857, TIT=0.0413714, IT=0.5
8 finished solveLinearSystemImpl_ 1
8 converged value: 1 121 1 let s go get convergedRemote
8 to  comm_.min(converged) 
8 did  comm_.min(converged) convergedRemote: 1
8 final convergedRemote: 1
8 Update: x^(k+1) = x^k - deltax^k 
8 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
8 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
8 Newton iteration  4 done8 , maximum relative shift = 1.453e-01
8 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
20 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
20 === rate=2.39334e-33, T=0.0206968, TIT=0.0413935, IT=0.5
20 finished solveLinearSystemImpl_ 1
20 converged value: 1 121 1 let s go get convergedRemote
20 to  comm_.min(converged) 
20 did  comm_.min(converged) convergedRemote: 1
20 final convergedRemote: 1
20 Update: x^(k+1) = x^k - deltax^k 
20 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
20 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
20 Newton iteration  4 done20 , maximum relative shift = 1.453e-01
20 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
7 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
7 === rate=2.39334e-33, T=0.0206986, TIT=0.0413973, IT=0.5
7 finished solveLinearSystemImpl_ 1
7 converged value: 1 121 1 let s go get convergedRemote
7 to  comm_.min(converged) 
7 did  comm_.min(converged) convergedRemote: 1
7 final convergedRemote: 1
7 Update: x^(k+1) = x^k - deltax^k 
7 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
7 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
7 Newton iteration  4 done7 , maximum relative shift = 1.453e-01
7 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
112 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
112 === rate=2.39334e-33, T=0.0207056, TIT=0.0414111, IT=0.5
112 finished solveLinearSystemImpl_ 1
112 converged value: 1 121 1 let s go get convergedRemote
112 to  comm_.min(converged) 
112 did  comm_.min(converged) convergedRemote: 1
112 final convergedRemote: 1
112 Update: x^(k+1) = x^k - deltax^k 
112 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
112 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
112 Newton iteration  4 done112 , maximum relative shift = 1.453e-01
112 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
95 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
95 === rate=2.39334e-33, T=0.0207376, TIT=0.0414752, IT=0.5
95 finished solveLinearSystemImpl_ 1
95 converged value: 1 121 1 let s go get convergedRemote
95 to  comm_.min(converged) 
95 did  comm_.min(converged) convergedRemote: 1
95 final convergedRemote: 1
95 Update: x^(k+1) = x^k - deltax^k 
95 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
95 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
95 Newton iteration  4 done95 , maximum relative shift = 1.453e-01
95 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
40 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
40 === rate=2.39334e-33, T=0.0206718, TIT=0.0413435, IT=0.5
40 finished solveLinearSystemImpl_ 1
40 converged value: 1 121 1 let s go get convergedRemote
40 to  comm_.min(converged) 
40 did  comm_.min(converged) convergedRemote: 1
40 final convergedRemote: 1
40 Update: x^(k+1) = x^k - deltax^k 
40 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
40 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
40 Newton iteration  4 done40 , maximum relative shift = 1.453e-01
40 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
70 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
70 === rate=2.39334e-33, T=0.0206774, TIT=0.0413548, IT=0.5
70 finished solveLinearSystemImpl_ 1
70 converged value: 1 121 1 let s go get convergedRemote
70 to  comm_.min(converged) 
70 did  comm_.min(converged) convergedRemote: 1
70 final convergedRemote: 1
70 Update: x^(k+1) = x^k - deltax^k 
70 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
70 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
70 Newton iteration  4 done70 , maximum relative shift = 1.453e-01
70 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
71 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
71 === rate=2.39334e-33, T=0.0206738, TIT=0.0413475, IT=0.5
71 finished solveLinearSystemImpl_ 1
71 converged value: 1 121 1 let s go get convergedRemote
71 to  comm_.min(converged) 
71 did  comm_.min(converged) convergedRemote: 1
71 final convergedRemote: 1
71 Update: x^(k+1) = x^k - deltax^k 
71 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
71 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
71 Newton iteration  4 done71 , maximum relative shift = 1.453e-01
71 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
12 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
12 === rate=2.39334e-33, T=0.0207382, TIT=0.0414764, IT=0.5
12 finished solveLinearSystemImpl_ 1
12 converged value: 1 121 1 let s go get convergedRemote
12 to  comm_.min(converged) 
12 did  comm_.min(converged) convergedRemote: 1
12 final convergedRemote: 1
12 Update: x^(k+1) = x^k - deltax^k 
12 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
12 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
12 Newton iteration  4 done12 , maximum relative shift = 1.453e-01
12 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
114 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
114 === rate=2.39334e-33, T=0.020739, TIT=0.041478, IT=0.5
114 finished solveLinearSystemImpl_ 1
114 converged value: 1 121 1 let s go get convergedRemote
114 to  comm_.min(converged) 
114 did  comm_.min(converged) convergedRemote: 1
114 final convergedRemote: 1
114 Update: x^(k+1) = x^k - deltax^k 
114 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
114 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
114 Newton iteration  4 done114 , maximum relative shift = 1.453e-01
114 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
63 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
63 === rate=2.39334e-33, T=0.0207367, TIT=0.0414733, IT=0.5
63 finished solveLinearSystemImpl_ 1
63 converged value: 1 121 1 let s go get convergedRemote
63 to  comm_.min(converged) 
63 did  comm_.min(converged) convergedRemote: 1
63 final convergedRemote: 1
63 Update: x^(k+1) = x^k - deltax^k 
63 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
63 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
63 Newton iteration  4 done63 , maximum relative shift = 1.453e-01
63 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
56 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
56 === rate=2.39334e-33, T=0.0206898, TIT=0.0413796, IT=0.5
56 finished solveLinearSystemImpl_ 1
56 converged value: 1 121 1 let s go get convergedRemote
56 to  comm_.min(converged) 
56 did  comm_.min(converged) convergedRemote: 1
56 final convergedRemote: 1
56 Update: x^(k+1) = x^k - deltax^k 
56 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
56 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
56 Newton iteration  4 done56 , maximum relative shift = 1.453e-01
56 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
116 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
116 === rate=2.39334e-33, T=0.0207609, TIT=0.0415219, IT=0.5
116 finished solveLinearSystemImpl_ 1
116 converged value: 1 121 1 let s go get convergedRemote
116 to  comm_.min(converged) 
116 did  comm_.min(converged) convergedRemote: 1
116 final convergedRemote: 1
116 Update: x^(k+1) = x^k - deltax^k 
116 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
116 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
116 Newton iteration  4 done116 , maximum relative shift = 1.453e-01
116 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
25 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
25 === rate=2.39334e-33, T=0.0206868, TIT=0.0413736, IT=0.5
25 finished solveLinearSystemImpl_ 1
25 converged value: 1 121 1 let s go get convergedRemote
25 to  comm_.min(converged) 
25 did  comm_.min(converged) convergedRemote: 1
25 final convergedRemote: 1
25 Update: x^(k+1) = x^k - deltax^k 
25 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
25 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
25 Newton iteration  4 done25 , maximum relative shift = 1.453e-01
25 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
55 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
55 === rate=2.39334e-33, T=0.0207204, TIT=0.0414408, IT=0.5
55 finished solveLinearSystemImpl_ 1
55 converged value: 1 121 1 let s go get convergedRemote
55 to  comm_.min(converged) 
55 did  comm_.min(converged) convergedRemote: 1
55 final convergedRemote: 1
55 Update: x^(k+1) = x^k - deltax^k 
55 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
55 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
55 Newton iteration  4 done55 , maximum relative shift = 1.453e-01
55 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
49 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
49 === rate=2.39334e-33, T=0.0206915, TIT=0.0413831, IT=0.5
49 finished solveLinearSystemImpl_ 1
49 converged value: 1 121 1 let s go get convergedRemote
49 to  comm_.min(converged) 
49 did  comm_.min(converged) convergedRemote: 1
49 final convergedRemote: 1
49 Update: x^(k+1) = x^k - deltax^k 
49 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
49 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
49 Newton iteration  4 done49 , maximum relative shift = 1.453e-01
49 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
54 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
54 === rate=2.39334e-33, T=0.0207117, TIT=0.0414234, IT=0.5
54 finished solveLinearSystemImpl_ 1
54 converged value: 1 121 1 let s go get convergedRemote
54 to  comm_.min(converged) 
54 did  comm_.min(converged) convergedRemote: 1
54 final convergedRemote: 1
54 Update: x^(k+1) = x^k - deltax^k 
54 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
54 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
54 Newton iteration  4 done54 , maximum relative shift = 1.453e-01
54 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
46 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
46 === rate=2.39334e-33, T=0.0207512, TIT=0.0415023, IT=0.5
46 finished solveLinearSystemImpl_ 1
46 converged value: 1 121 1 let s go get convergedRemote
46 to  comm_.min(converged) 
46 did  comm_.min(converged) convergedRemote: 1
46 final convergedRemote: 1
46 Update: x^(k+1) = x^k - deltax^k 
46 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
46 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
46 Newton iteration  4 done46 , maximum relative shift = 1.453e-01
46 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
79 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
79 === rate=2.39334e-33, T=0.0207065, TIT=0.0414131, IT=0.5
79 finished solveLinearSystemImpl_ 1
79 converged value: 1 121 1 let s go get convergedRemote
79 to  comm_.min(converged) 
79 did  comm_.min(converged) convergedRemote: 1
79 final convergedRemote: 1
79 Update: x^(k+1) = x^k - deltax^k 
79 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
79 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
79 Newton iteration  4 done79 , maximum relative shift = 1.453e-01
79 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
105 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
105 === rate=2.39334e-33, T=0.020679, TIT=0.0413579, IT=0.5
105 finished solveLinearSystemImpl_ 1
105 converged value: 1 121 1 let s go get convergedRemote
105 to  comm_.min(converged) 
105 did  comm_.min(converged) convergedRemote: 1
105 final convergedRemote: 1
105 Update: x^(k+1) = x^k - deltax^k 
105 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
105 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
105 Newton iteration  4 done105 , maximum relative shift = 1.453e-01
105 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
53 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
53 === rate=2.39334e-33, T=0.0207332, TIT=0.0414665, IT=0.5
53 finished solveLinearSystemImpl_ 1
53 converged value: 1 121 1 let s go get convergedRemote
53 to  comm_.min(converged) 
53 did  comm_.min(converged) convergedRemote: 1
53 final convergedRemote: 1
53 Update: x^(k+1) = x^k - deltax^k 
53 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
53 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
53 Newton iteration  4 done53 , maximum relative shift = 1.453e-01
53 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
38 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
38 === rate=2.39334e-33, T=0.0207053, TIT=0.0414106, IT=0.5
38 finished solveLinearSystemImpl_ 1
38 converged value: 1 121 1 let s go get convergedRemote
38 to  comm_.min(converged) 
38 did  comm_.min(converged) convergedRemote: 1
38 final convergedRemote: 1
38 Update: x^(k+1) = x^k - deltax^k 
38 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
38 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
38 Newton iteration  4 done38 , maximum relative shift = 1.453e-01
38 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
44 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
44 === rate=2.39334e-33, T=0.0207376, TIT=0.0414752, IT=0.5
44 finished solveLinearSystemImpl_ 1
44 converged value: 1 121 1 let s go get convergedRemote
44 to  comm_.min(converged) 
44 did  comm_.min(converged) convergedRemote: 1
44 final convergedRemote: 1
44 Update: x^(k+1) = x^k - deltax^k 
44 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
44 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
44 Newton iteration  4 done44 , maximum relative shift = 1.453e-01
44 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
69 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
69 === rate=2.39334e-33, T=0.0207067, TIT=0.0414133, IT=0.5
69 finished solveLinearSystemImpl_ 1
69 converged value: 1 121 1 let s go get convergedRemote
69 to  comm_.min(converged) 
69 did  comm_.min(converged) convergedRemote: 1
69 final convergedRemote: 1
69 Update: x^(k+1) = x^k - deltax^k 
69 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
69 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
69 Newton iteration  4 done69 , maximum relative shift = 1.453e-01
69 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
120 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
120 === rate=2.39334e-33, T=0.0207131, TIT=0.0414261, IT=0.5
120 finished solveLinearSystemImpl_ 1
120 converged value: 1 121 1 let s go get convergedRemote
120 to  comm_.min(converged) 
120 did  comm_.min(converged) convergedRemote: 1
120 final convergedRemote: 1
120 Update: x^(k+1) = x^k - deltax^k 
120 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
120 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
120 Newton iteration  4 done120 , maximum relative shift = 1.453e-01
120 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
28 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
28 === rate=2.39334e-33, T=0.0207194, TIT=0.0414389, IT=0.5
28 finished solveLinearSystemImpl_ 1
28 converged value: 1 121 1 let s go get convergedRemote
28 to  comm_.min(converged) 
28 did  comm_.min(converged) convergedRemote: 1
28 final convergedRemote: 1
28 Update: x^(k+1) = x^k - deltax^k 
28 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
28 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
28 Newton iteration  4 done28 , maximum relative shift = 1.453e-01
28 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
75 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
75 === rate=2.39334e-33, T=0.0207032, TIT=0.0414064, IT=0.5
75 finished solveLinearSystemImpl_ 1
75 converged value: 1 121 1 let s go get convergedRemote
75 to  comm_.min(converged) 
75 did  comm_.min(converged) convergedRemote: 1
75 final convergedRemote: 1
75 Update: x^(k+1) = x^k - deltax^k 
75 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
75 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
75 Newton iteration  4 done75 , maximum relative shift = 1.453e-01
75 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
61 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
61 === rate=2.39334e-33, T=0.020747, TIT=0.0414939, IT=0.5
61 finished solveLinearSystemImpl_ 1
61 converged value: 1 121 1 let s go get convergedRemote
61 to  comm_.min(converged) 
61 did  comm_.min(converged) convergedRemote: 1
61 final convergedRemote: 1
61 Update: x^(k+1) = x^k - deltax^k 
61 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
61 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
61 Newton iteration  4 done61 , maximum relative shift = 1.453e-01
61 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
6 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
6 === rate=2.39334e-33, T=0.0206892, TIT=0.0413784, IT=0.5
6 finished solveLinearSystemImpl_ 1
6 converged value: 1 121 1 let s go get convergedRemote
6 to  comm_.min(converged) 
6 did  comm_.min(converged) convergedRemote: 1
6 final convergedRemote: 1
6 Update: x^(k+1) = x^k - deltax^k 
6 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
6 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
6 Newton iteration  4 done6 , maximum relative shift = 1.453e-01
6 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
110 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
110 === rate=2.39334e-33, T=0.0206943, TIT=0.0413886, IT=0.5
110 finished solveLinearSystemImpl_ 1
110 converged value: 1 121 1 let s go get convergedRemote
110 to  comm_.min(converged) 
110 did  comm_.min(converged) convergedRemote: 1
110 final convergedRemote: 1
110 Update: x^(k+1) = x^k - deltax^k 
110 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
110 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
110 Newton iteration  4 done110 , maximum relative shift = 1.453e-01
110 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
74 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
74 === rate=2.39334e-33, T=0.0206856, TIT=0.0413713, IT=0.5
74 finished solveLinearSystemImpl_ 1
74 converged value: 1 121 1 let s go get convergedRemote
74 to  comm_.min(converged) 
74 did  comm_.min(converged) convergedRemote: 1
74 final convergedRemote: 1
74 Update: x^(k+1) = x^k - deltax^k 
74 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
74 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
74 Newton iteration  4 done74 , maximum relative shift = 1.453e-01
74 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
10 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
10 === rate=2.39334e-33, T=0.0206745, TIT=0.041349, IT=0.5
10 finished solveLinearSystemImpl_ 1
10 converged value: 1 121 1 let s go get convergedRemote
10 to  comm_.min(converged) 
10 did  comm_.min(converged) convergedRemote: 1
10 final convergedRemote: 1
10 Update: x^(k+1) = x^k - deltax^k 
10 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
10 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
10 Newton iteration  4 done10 , maximum relative shift = 1.453e-01
10 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
59 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
59 === rate=2.39334e-33, T=0.0206779, TIT=0.0413558, IT=0.5
59 finished solveLinearSystemImpl_ 1
59 converged value: 1 121 1 let s go get convergedRemote
59 to  comm_.min(converged) 
59 did  comm_.min(converged) convergedRemote: 1
59 final convergedRemote: 1
59 Update: x^(k+1) = x^k - deltax^k 
59 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
59 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
59 Newton iteration  4 done59 , maximum relative shift = 1.453e-01
59 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
72 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
72 === rate=2.39334e-33, T=0.0206475, TIT=0.0412951, IT=0.5
72 finished solveLinearSystemImpl_ 1
72 converged value: 1 121 1 let s go get convergedRemote
72 to  comm_.min(converged) 
72 did  comm_.min(converged) convergedRemote: 1
72 final convergedRemote: 1
72 Update: x^(k+1) = x^k - deltax^k 
72 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
72 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
72 Newton iteration  4 done72 , maximum relative shift = 1.453e-01
72 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
89 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
89 === rate=2.39334e-33, T=0.0206965, TIT=0.041393, IT=0.5
89 finished solveLinearSystemImpl_ 1
89 converged value: 1 121 1 let s go get convergedRemote
89 to  comm_.min(converged) 
89 did  comm_.min(converged) convergedRemote: 1
89 final convergedRemote: 1
89 Update: x^(k+1) = x^k - deltax^k 
89 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
89 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
89 Newton iteration  4 done89 , maximum relative shift = 1.453e-01
89 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
23 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
23 === rate=2.39334e-33, T=0.0206866, TIT=0.0413731, IT=0.5
23 finished solveLinearSystemImpl_ 1
23 converged value: 1 121 1 let s go get convergedRemote
23 to  comm_.min(converged) 
23 did  comm_.min(converged) convergedRemote: 1
23 final convergedRemote: 1
23 Update: x^(k+1) = x^k - deltax^k 
23 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
23 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
23 Newton iteration  4 done23 , maximum relative shift = 1.453e-01
23 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
41 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
41 === rate=2.39334e-33, T=0.0206768, TIT=0.0413536, IT=0.5
41 finished solveLinearSystemImpl_ 1
41 converged value: 1 121 1 let s go get convergedRemote
41 to  comm_.min(converged) 
41 did  comm_.min(converged) convergedRemote: 1
41 final convergedRemote: 1
41 Update: x^(k+1) = x^k - deltax^k 
41 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
41 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
41 Newton iteration  4 done41 , maximum relative shift = 1.453e-01
41 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
73 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
73 === rate=2.39334e-33, T=0.0206639, TIT=0.0413278, IT=0.5
73 finished solveLinearSystemImpl_ 1
73 converged value: 1 121 1 let s go get convergedRemote
73 to  comm_.min(converged) 
73 did  comm_.min(converged) convergedRemote: 1
73 final convergedRemote: 1
73 Update: x^(k+1) = x^k - deltax^k 
73 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
73 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
73 Newton iteration  4 done73 , maximum relative shift = 1.453e-01
73 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
67 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
67 === rate=2.39334e-33, T=0.0207012, TIT=0.0414024, IT=0.5
67 finished solveLinearSystemImpl_ 1
67 converged value: 1 121 1 let s go get convergedRemote
67 to  comm_.min(converged) 
67 did  comm_.min(converged) convergedRemote: 1
67 final convergedRemote: 1
67 Update: x^(k+1) = x^k - deltax^k 
67 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
67 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
67 Newton iteration  4 done67 , maximum relative shift = 1.453e-01
67 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
90 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
90 === rate=2.39334e-33, T=0.0207213, TIT=0.0414427, IT=0.5
90 finished solveLinearSystemImpl_ 1
90 converged value: 1 121 1 let s go get convergedRemote
90 to  comm_.min(converged) 
90 did  comm_.min(converged) convergedRemote: 1
90 final convergedRemote: 1
90 Update: x^(k+1) = x^k - deltax^k 
90 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
90 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
90 Newton iteration  4 done90 , maximum relative shift = 1.453e-01
90 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
86 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
86 === rate=2.39334e-33, T=0.0206858, TIT=0.0413715, IT=0.5
86 finished solveLinearSystemImpl_ 1
86 converged value: 1 121 1 let s go get convergedRemote
86 to  comm_.min(converged) 
86 did  comm_.min(converged) convergedRemote: 1
86 final convergedRemote: 1
86 Update: x^(k+1) = x^k - deltax^k 
86 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
86 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
86 Newton iteration  4 done86 , maximum relative shift = 1.453e-01
86 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
87 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
87 === rate=2.39334e-33, T=0.0207064, TIT=0.0414128, IT=0.5
87 finished solveLinearSystemImpl_ 1
87 converged value: 1 121 1 let s go get convergedRemote
87 to  comm_.min(converged) 
87 did  comm_.min(converged) convergedRemote: 1
87 final convergedRemote: 1
87 Update: x^(k+1) = x^k - deltax^k 
87 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
87 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
87 Newton iteration  4 done87 , maximum relative shift = 1.453e-01
87 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
16 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
16 === rate=2.39334e-33, T=0.0206975, TIT=0.0413951, IT=0.5
16 finished solveLinearSystemImpl_ 1
16 converged value: 1 121 1 let s go get convergedRemote
16 to  comm_.min(converged) 
16 did  comm_.min(converged) convergedRemote: 1
16 final convergedRemote: 1
16 Update: x^(k+1) = x^k - deltax^k 
16 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
16 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
16 Newton iteration  4 done16 , maximum relative shift = 1.453e-01
16 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
19 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
19 === rate=2.39334e-33, T=0.0207016, TIT=0.0414033, IT=0.5
19 finished solveLinearSystemImpl_ 1
19 converged value: 1 121 1 let s go get convergedRemote
19 to  comm_.min(converged) 
19 did  comm_.min(converged) convergedRemote: 1
19 final convergedRemote: 1
19 Update: x^(k+1) = x^k - deltax^k 
19 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
19 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
19 Newton iteration  4 done19 , maximum relative shift = 1.453e-01
19 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
0 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
0 === rate=2.39334e-33, T=0.0108069, TIT=0.0216138, IT=0.5
0 finished solveLinearSystemImpl_ 1
0 converged value: 1 121 1 let s go get convergedRemote
0 to  comm_.min(converged) 
0 did  comm_.min(converged) convergedRemote: 1
0 final convergedRemote: 1
0 Update: x^(k+1) = x^k - deltax^k 
0 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
0 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
0 Newton iteration  4 done0 , maximum relative shift = 1.453e-01
0 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
103 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
103 === rate=2.39334e-33, T=0.0207129, TIT=0.0414258, IT=0.5
103 finished solveLinearSystemImpl_ 1
103 converged value: 1 121 1 let s go get convergedRemote
103 to  comm_.min(converged) 
103 did  comm_.min(converged) convergedRemote: 1
103 final convergedRemote: 1
103 Update: x^(k+1) = x^k - deltax^k 
103 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
103 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
103 Newton iteration  4 done103 , maximum relative shift = 1.453e-01
103 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
115 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
115 === rate=2.39334e-33, T=0.0207375, TIT=0.0414751, IT=0.5
115 finished solveLinearSystemImpl_ 1
115 converged value: 1 121 1 let s go get convergedRemote
115 to  comm_.min(converged) 
115 did  comm_.min(converged) convergedRemote: 1
115 final convergedRemote: 1
115 Update: x^(k+1) = x^k - deltax^k 
115 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
115 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
115 Newton iteration  4 done115 , maximum relative shift = 1.453e-01
115 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
107 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
107 === rate=2.39334e-33, T=0.0206725, TIT=0.0413451, IT=0.5
107 finished solveLinearSystemImpl_ 1
107 converged value: 1 121 1 let s go get convergedRemote
107 to  comm_.min(converged) 
107 did  comm_.min(converged) convergedRemote: 1
107 final convergedRemote: 1
107 Update: x^(k+1) = x^k - deltax^k 
107 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
107 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
107 Newton iteration  4 done107 , maximum relative shift = 1.453e-01
107 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
62 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
62 === rate=2.39334e-33, T=0.0207442, TIT=0.0414885, IT=0.5
62 finished solveLinearSystemImpl_ 1
62 converged value: 1 121 1 let s go get convergedRemote
62 to  comm_.min(converged) 
62 did  comm_.min(converged) convergedRemote: 1
62 final convergedRemote: 1
62 Update: x^(k+1) = x^k - deltax^k 
62 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
62 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
62 Newton iteration  4 done62 , maximum relative shift = 1.453e-01
62 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
4 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
4 === rate=2.39334e-33, T=0.0207383, TIT=0.0414766, IT=0.5
4 finished solveLinearSystemImpl_ 1
4 converged value: 1 121 1 let s go get convergedRemote
4 to  comm_.min(converged) 
4 did  comm_.min(converged) convergedRemote: 1
4 final convergedRemote: 1
4 Update: x^(k+1) = x^k - deltax^k 
4 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
4 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
4 Newton iteration  4 done4 , maximum relative shift = 1.453e-01
4 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
22 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
22 === rate=2.39334e-33, T=0.0206728, TIT=0.0413456, IT=0.5
22 finished solveLinearSystemImpl_ 1
22 converged value: 1 121 1 let s go get convergedRemote
22 to  comm_.min(converged) 
22 did  comm_.min(converged) convergedRemote: 1
22 final convergedRemote: 1
22 Update: x^(k+1) = x^k - deltax^k 
22 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
22 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
22 Newton iteration  4 done22 , maximum relative shift = 1.453e-01
22 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
82 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
82 === rate=2.39334e-33, T=0.0207161, TIT=0.0414323, IT=0.5
82 finished solveLinearSystemImpl_ 1
82 converged value: 1 121 1 let s go get convergedRemote
82 to  comm_.min(converged) 
82 did  comm_.min(converged) convergedRemote: 1
82 final convergedRemote: 1
82 Update: x^(k+1) = x^k - deltax^k 
82 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
82 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
82 Newton iteration  4 done82 , maximum relative shift = 1.453e-01
82 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
88 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
88 === rate=2.39334e-33, T=0.0206694, TIT=0.0413388, IT=0.5
88 finished solveLinearSystemImpl_ 1
88 converged value: 1 121 1 let s go get convergedRemote
88 to  comm_.min(converged) 
88 did  comm_.min(converged) convergedRemote: 1
88 final convergedRemote: 1
88 Update: x^(k+1) = x^k - deltax^k 
88 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
88 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
88 Newton iteration  4 done88 , maximum relative shift = 1.453e-01
88 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
11 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
11 === rate=2.39334e-33, T=0.0206772, TIT=0.0413544, IT=0.5
11 finished solveLinearSystemImpl_ 1
11 converged value: 1 121 1 let s go get convergedRemote
11 to  comm_.min(converged) 
11 did  comm_.min(converged) convergedRemote: 1
11 final convergedRemote: 1
11 Update: x^(k+1) = x^k - deltax^k 
11 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
11 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
11 Newton iteration  4 done11 , maximum relative shift = 1.453e-01
11 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
5 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
5 === rate=2.39334e-33, T=0.0207317, TIT=0.0414634, IT=0.5
5 finished solveLinearSystemImpl_ 1
5 converged value: 1 121 1 let s go get convergedRemote
5 to  comm_.min(converged) 
5 did  comm_.min(converged) convergedRemote: 1
5 final convergedRemote: 1
5 Update: x^(k+1) = x^k - deltax^k 
5 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
5 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
5 Newton iteration  4 done5 , maximum relative shift = 1.453e-01
5 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
108 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
108 === rate=2.39334e-33, T=0.0207086, TIT=0.0414172, IT=0.5
108 finished solveLinearSystemImpl_ 1
108 converged value: 1 121 1 let s go get convergedRemote
108 to  comm_.min(converged) 
108 did  comm_.min(converged) convergedRemote: 1
108 final convergedRemote: 1
108 Update: x^(k+1) = x^k - deltax^k 
108 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
108 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
108 Newton iteration  4 done108 , maximum relative shift = 1.453e-01
108 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
118 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
118 === rate=2.39334e-33, T=0.020706, TIT=0.0414121, IT=0.5
118 finished solveLinearSystemImpl_ 1
118 converged value: 1 121 1 let s go get convergedRemote
118 to  comm_.min(converged) 
118 did  comm_.min(converged) convergedRemote: 1
118 final convergedRemote: 1
118 Update: x^(k+1) = x^k - deltax^k 
118 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
118 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
118 Newton iteration  4 done118 , maximum relative shift = 1.453e-01
118 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
26 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
26 === rate=2.39334e-33, T=0.0206971, TIT=0.0413943, IT=0.5
26 finished solveLinearSystemImpl_ 1
26 converged value: 1 121 1 let s go get convergedRemote
26 to  comm_.min(converged) 
26 did  comm_.min(converged) convergedRemote: 1
26 final convergedRemote: 1
26 Update: x^(k+1) = x^k - deltax^k 
26 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
26 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
26 Newton iteration  4 done26 , maximum relative shift = 1.453e-01
26 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
39 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
39 === rate=2.39334e-33, T=0.0207159, TIT=0.0414319, IT=0.5
39 finished solveLinearSystemImpl_ 1
39 converged value: 1 121 1 let s go get convergedRemote
39 to  comm_.min(converged) 
39 did  comm_.min(converged) convergedRemote: 1
39 final convergedRemote: 1
39 Update: x^(k+1) = x^k - deltax^k 
39 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
39 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
39 Newton iteration  4 done39 , maximum relative shift = 1.453e-01
39 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
48 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
48 === rate=2.39334e-33, T=0.0206855, TIT=0.0413709, IT=0.5
48 finished solveLinearSystemImpl_ 1
48 converged value: 1 121 1 let s go get convergedRemote
48 to  comm_.min(converged) 
48 did  comm_.min(converged) convergedRemote: 1
48 final convergedRemote: 1
48 Update: x^(k+1) = x^k - deltax^k 
48 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
48 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
48 Newton iteration  4 done48 , maximum relative shift = 1.453e-01
48 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
104 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
104 === rate=2.39334e-33, T=0.0206735, TIT=0.0413469, IT=0.5
104 finished solveLinearSystemImpl_ 1
104 converged value: 1 121 1 let s go get convergedRemote
104 to  comm_.min(converged) 
104 did  comm_.min(converged) convergedRemote: 1
104 final convergedRemote: 1
104 Update: x^(k+1) = x^k - deltax^k 
104 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
104 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
104 Newton iteration  4 done104 , maximum relative shift = 1.453e-01
104 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
119 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
119 === rate=2.39334e-33, T=0.020739, TIT=0.0414779, IT=0.5
119 finished solveLinearSystemImpl_ 1
119 converged value: 1 121 1 let s go get convergedRemote
119 to  comm_.min(converged) 
119 did  comm_.min(converged) convergedRemote: 1
119 final convergedRemote: 1
119 Update: x^(k+1) = x^k - deltax^k 
119 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
119 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
119 Newton iteration  4 done119 , maximum relative shift = 1.453e-01
119 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
78 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
78 === rate=2.39334e-33, T=0.0207004, TIT=0.0414009, IT=0.5
78 finished solveLinearSystemImpl_ 1
78 converged value: 1 121 1 let s go get convergedRemote
78 to  comm_.min(converged) 
78 did  comm_.min(converged) convergedRemote: 1
78 final convergedRemote: 1
78 Update: x^(k+1) = x^k - deltax^k 
78 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
78 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
78 Newton iteration  4 done78 , maximum relative shift = 1.453e-01
78 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
29 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
29 === rate=2.39334e-33, T=0.0207156, TIT=0.0414312, IT=0.5
29 finished solveLinearSystemImpl_ 1
29 converged value: 1 121 1 let s go get convergedRemote
29 to  comm_.min(converged) 
29 did  comm_.min(converged) convergedRemote: 1
29 final convergedRemote: 1
29 Update: x^(k+1) = x^k - deltax^k 
29 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
29 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
29 Newton iteration  4 done29 , maximum relative shift = 1.453e-01
29 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
68 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
68 === rate=2.39334e-33, T=0.0207149, TIT=0.0414298, IT=0.5
68 finished solveLinearSystemImpl_ 1
68 converged value: 1 121 1 let s go get convergedRemote
68 to  comm_.min(converged) 
68 did  comm_.min(converged) convergedRemote: 1
68 final convergedRemote: 1
68 Update: x^(k+1) = x^k - deltax^k 
68 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
68 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
68 Newton iteration  4 done68 , maximum relative shift = 1.453e-01
68 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
85 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
85 === rate=2.39334e-33, T=0.0206887, TIT=0.0413773, IT=0.5
85 finished solveLinearSystemImpl_ 1
85 converged value: 1 121 1 let s go get convergedRemote
85 to  comm_.min(converged) 
85 did  comm_.min(converged) convergedRemote: 1
85 final convergedRemote: 1
85 Update: x^(k+1) = x^k - deltax^k 
85 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
85 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
85 Newton iteration  4 done85 , maximum relative shift = 1.453e-01
85 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
60 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
60 === rate=2.39334e-33, T=0.0207614, TIT=0.0415227, IT=0.5
60 finished solveLinearSystemImpl_ 1
60 converged value: 1 121 1 let s go get convergedRemote
60 to  comm_.min(converged) 
60 did  comm_.min(converged) convergedRemote: 1
60 final convergedRemote: 1
60 Update: x^(k+1) = x^k - deltax^k 
60 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
60 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
60 Newton iteration  4 done60 , maximum relative shift = 1.453e-01
60 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
65 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
65 === rate=2.39334e-33, T=0.0206769, TIT=0.0413538, IT=0.5
65 finished solveLinearSystemImpl_ 1
65 converged value: 1 121 1 let s go get convergedRemote
65 to  comm_.min(converged) 
65 did  comm_.min(converged) convergedRemote: 1
65 final convergedRemote: 1
65 Update: x^(k+1) = x^k - deltax^k 
65 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
65 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
65 Newton iteration  4 done65 , maximum relative shift = 1.453e-01
65 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
45 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
45 === rate=2.39334e-33, T=0.0207242, TIT=0.0414483, IT=0.5
45 finished solveLinearSystemImpl_ 1
45 converged value: 1 121 1 let s go get convergedRemote
45 to  comm_.min(converged) 
45 did  comm_.min(converged) convergedRemote: 1
45 final convergedRemote: 1
45 Update: x^(k+1) = x^k - deltax^k 
45 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
45 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
45 Newton iteration  4 done45 , maximum relative shift = 1.453e-01
45 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
106 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
106 === rate=2.39334e-33, T=0.0206811, TIT=0.0413622, IT=0.5
106 finished solveLinearSystemImpl_ 1
106 converged value: 1 121 1 let s go get convergedRemote
106 to  comm_.min(converged) 
106 did  comm_.min(converged) convergedRemote: 1
106 final convergedRemote: 1
106 Update: x^(k+1) = x^k - deltax^k 
106 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
106 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
106 Newton iteration  4 done106 , maximum relative shift = 1.453e-01
106 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
1 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
1 === rate=2.39334e-33, T=0.020706, TIT=0.0414121, IT=0.5
1 finished solveLinearSystemImpl_ 1
1 converged value: 1 121 1 let s go get convergedRemote
1 to  comm_.min(converged) 
1 did  comm_.min(converged) convergedRemote: 1
1 final convergedRemote: 1
1 Update: x^(k+1) = x^k - deltax^k 
1 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
1 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
1 Newton iteration  4 done1 , maximum relative shift = 1.453e-01
1 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
33 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
33 === rate=2.39334e-33, T=0.0207094, TIT=0.0414189, IT=0.5
33 finished solveLinearSystemImpl_ 1
33 converged value: 1 121 1 let s go get convergedRemote
33 to  comm_.min(converged) 
33 did  comm_.min(converged) convergedRemote: 1
33 final convergedRemote: 1
33 Update: x^(k+1) = x^k - deltax^k 
33 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
33 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
33 Newton iteration  4 done33 , maximum relative shift = 1.453e-01
33 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
15 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
15 === rate=2.39334e-33, T=0.0207045, TIT=0.0414089, IT=0.5
15 finished solveLinearSystemImpl_ 1
15 converged value: 1 121 1 let s go get convergedRemote
15 to  comm_.min(converged) 
15 did  comm_.min(converged) convergedRemote: 1
15 final convergedRemote: 1
15 Update: x^(k+1) = x^k - deltax^k 
15 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
15 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
15 Newton iteration  4 done15 , maximum relative shift = 1.453e-01
15 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
14 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
14 === rate=2.39334e-33, T=0.0206925, TIT=0.0413849, IT=0.5
14 finished solveLinearSystemImpl_ 1
14 converged value: 1 121 1 let s go get convergedRemote
14 to  comm_.min(converged) 
14 did  comm_.min(converged) convergedRemote: 1
14 final convergedRemote: 1
14 Update: x^(k+1) = x^k - deltax^k 
14 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
14 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
14 Newton iteration  4 done14 , maximum relative shift = 1.453e-01
14 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
32 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
32 === rate=2.39334e-33, T=0.0207103, TIT=0.0414207, IT=0.5
32 finished solveLinearSystemImpl_ 1
32 converged value: 1 121 1 let s go get convergedRemote
32 to  comm_.min(converged) 
32 did  comm_.min(converged) convergedRemote: 1
32 final convergedRemote: 1
32 Update: x^(k+1) = x^k - deltax^k 
32 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
32 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
32 Newton iteration  4 done32 , maximum relative shift = 1.453e-01
32 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
84 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
84 === rate=2.39334e-33, T=0.0206897, TIT=0.0413793, IT=0.5
84 finished solveLinearSystemImpl_ 1
84 converged value: 1 121 1 let s go get convergedRemote
84 to  comm_.min(converged) 
84 did  comm_.min(converged) convergedRemote: 1
84 final convergedRemote: 1
84 Update: x^(k+1) = x^k - deltax^k 
84 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
84 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
84 Newton iteration  4 done84 , maximum relative shift = 1.453e-01
84 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
2 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
2 === rate=2.39334e-33, T=0.0206954, TIT=0.0413908, IT=0.5
2 finished solveLinearSystemImpl_ 1
2 converged value: 1 121 1 let s go get convergedRemote
2 to  comm_.min(converged) 
2 did  comm_.min(converged) convergedRemote: 1
2 final convergedRemote: 1
2 Update: x^(k+1) = x^k - deltax^k 
2 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
2 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
2 Newton iteration  4 done2 , maximum relative shift = 1.453e-01
2 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
50 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
50 === rate=2.39334e-33, T=0.0207046, TIT=0.0414092, IT=0.5
50 finished solveLinearSystemImpl_ 1
50 converged value: 1 121 1 let s go get convergedRemote
50 to  comm_.min(converged) 
50 did  comm_.min(converged) convergedRemote: 1
50 final convergedRemote: 1
50 Update: x^(k+1) = x^k - deltax^k 
50 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
50 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
50 Newton iteration  4 done50 , maximum relative shift = 1.453e-01
50 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
77 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
77 === rate=2.39334e-33, T=0.0206949, TIT=0.0413898, IT=0.5
77 finished solveLinearSystemImpl_ 1
77 converged value: 1 121 1 let s go get convergedRemote
77 to  comm_.min(converged) 
77 did  comm_.min(converged) convergedRemote: 1
77 final convergedRemote: 1
77 Update: x^(k+1) = x^k - deltax^k 
77 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
77 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
77 Newton iteration  4 done77 , maximum relative shift = 1.453e-01
77 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
109 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
109 === rate=2.39334e-33, T=0.020705, TIT=0.0414101, IT=0.5
109 finished solveLinearSystemImpl_ 1
109 converged value: 1 121 1 let s go get convergedRemote
109 to  comm_.min(converged) 
109 did  comm_.min(converged) convergedRemote: 1
109 final convergedRemote: 1
109 Update: x^(k+1) = x^k - deltax^k 
109 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
109 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
109 Newton iteration  4 done109 , maximum relative shift = 1.453e-01
109 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
51 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
51 === rate=2.39334e-33, T=0.0207101, TIT=0.0414203, IT=0.5
51 finished solveLinearSystemImpl_ 1
51 converged value: 1 121 1 let s go get convergedRemote
51 to  comm_.min(converged) 
51 did  comm_.min(converged) convergedRemote: 1
51 final convergedRemote: 1
51 Update: x^(k+1) = x^k - deltax^k 
51 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
51 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
51 Newton iteration  4 done51 , maximum relative shift = 1.453e-01
51 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
117 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
117 === rate=2.39334e-33, T=0.0207066, TIT=0.0414132, IT=0.5
117 finished solveLinearSystemImpl_ 1
117 converged value: 1 121 1 let s go get convergedRemote
117 to  comm_.min(converged) 
117 did  comm_.min(converged) convergedRemote: 1
117 final convergedRemote: 1
117 Update: x^(k+1) = x^k - deltax^k 
117 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
117 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
117 Newton iteration  4 done117 , maximum relative shift = 1.453e-01
117 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
3 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
3 === rate=2.39334e-33, T=0.0206964, TIT=0.0413928, IT=0.5
3 finished solveLinearSystemImpl_ 1
3 converged value: 1 121 1 let s go get convergedRemote
3 to  comm_.min(converged) 
3 did  comm_.min(converged) convergedRemote: 1
3 final convergedRemote: 1
3 Update: x^(k+1) = x^k - deltax^k 
3 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
3 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
3 Newton iteration  4 done3 , maximum relative shift = 1.453e-01
3 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
101 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
101 === rate=2.39334e-33, T=0.0207133, TIT=0.0414267, IT=0.5
101 finished solveLinearSystemImpl_ 1
101 converged value: 1 121 1 let s go get convergedRemote
101 to  comm_.min(converged) 
101 did  comm_.min(converged) convergedRemote: 1
101 final convergedRemote: 1
101 Update: x^(k+1) = x^k - deltax^k 
101 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
101 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
101 Newton iteration  4 done101 , maximum relative shift = 1.453e-01
101 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
111 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
111 === rate=2.39334e-33, T=0.020703, TIT=0.0414059, IT=0.5
111 finished solveLinearSystemImpl_ 1
111 converged value: 1 121 1 let s go get convergedRemote
111 to  comm_.min(converged) 
111 did  comm_.min(converged) convergedRemote: 1
111 final convergedRemote: 1
111 Update: x^(k+1) = x^k - deltax^k 
111 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
111 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
111 Newton iteration  4 done111 , maximum relative shift = 1.453e-01
111 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
52 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
52 === rate=2.39334e-33, T=0.0207383, TIT=0.0414765, IT=0.5
52 finished solveLinearSystemImpl_ 1
52 converged value: 1 121 1 let s go get convergedRemote
52 to  comm_.min(converged) 
52 did  comm_.min(converged) convergedRemote: 1
52 final convergedRemote: 1
52 Update: x^(k+1) = x^k - deltax^k 
52 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
52 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
52 Newton iteration  4 done52 , maximum relative shift = 1.453e-01
52 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
35 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
35 === rate=2.39334e-33, T=0.0206874, TIT=0.0413749, IT=0.5
35 finished solveLinearSystemImpl_ 1
35 converged value: 1 121 1 let s go get convergedRemote
35 to  comm_.min(converged) 
35 did  comm_.min(converged) convergedRemote: 1
35 final convergedRemote: 1
35 Update: x^(k+1) = x^k - deltax^k 
35 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
35 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
35 Newton iteration  4 done35 , maximum relative shift = 1.453e-01
35 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
17 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
17 === rate=2.39334e-33, T=0.0206885, TIT=0.041377, IT=0.5
17 finished solveLinearSystemImpl_ 1
17 converged value: 1 121 1 let s go get convergedRemote
17 to  comm_.min(converged) 
17 did  comm_.min(converged) convergedRemote: 1
17 final convergedRemote: 1
17 Update: x^(k+1) = x^k - deltax^k 
17 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
17 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
17 Newton iteration  4 done17 , maximum relative shift = 1.453e-01
17 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
31 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
31 === rate=2.39334e-33, T=0.0206992, TIT=0.0413983, IT=0.5
31 finished solveLinearSystemImpl_ 1
31 converged value: 1 121 1 let s go get convergedRemote
31 to  comm_.min(converged) 
31 did  comm_.min(converged) convergedRemote: 1
31 final convergedRemote: 1
31 Update: x^(k+1) = x^k - deltax^k 
31 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
31 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
31 Newton iteration  4 done31 , maximum relative shift = 1.453e-01
31 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
30 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
30 === rate=2.39334e-33, T=0.0206731, TIT=0.0413461, IT=0.5
30 finished solveLinearSystemImpl_ 1
30 converged value: 1 121 1 let s go get convergedRemote
30 to  comm_.min(converged) 
30 did  comm_.min(converged) convergedRemote: 1
30 final convergedRemote: 1
30 Update: x^(k+1) = x^k - deltax^k 
30 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
30 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
30 Newton iteration  4 done30 , maximum relative shift = 1.453e-01
30 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
66 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
66 === rate=2.39334e-33, T=0.0206931, TIT=0.0413862, IT=0.5
66 finished solveLinearSystemImpl_ 1
66 converged value: 1 121 1 let s go get convergedRemote
66 to  comm_.min(converged) 
66 did  comm_.min(converged) convergedRemote: 1
66 final convergedRemote: 1
66 Update: x^(k+1) = x^k - deltax^k 
66 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
66 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
66 Newton iteration  4 done66 , maximum relative shift = 1.453e-01
66 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
24 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
24 === rate=2.39334e-33, T=0.0206695, TIT=0.041339, IT=0.5
24 finished solveLinearSystemImpl_ 1
24 converged value: 1 121 1 let s go get convergedRemote
24 to  comm_.min(converged) 
24 did  comm_.min(converged) convergedRemote: 1
24 final convergedRemote: 1
24 Update: x^(k+1) = x^k - deltax^k 
24 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
24 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
24 Newton iteration  4 done24 , maximum relative shift = 1.453e-01
24 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
97 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
97 === rate=2.39334e-33, T=0.0207091, TIT=0.0414181, IT=0.5
97 finished solveLinearSystemImpl_ 1
97 converged value: 1 121 1 let s go get convergedRemote
97 to  comm_.min(converged) 
97 did  comm_.min(converged) convergedRemote: 1
97 final convergedRemote: 1
97 Update: x^(k+1) = x^k - deltax^k 
97 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
97 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
97 Newton iteration  4 done97 , maximum relative shift = 1.453e-01
97 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
91 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
91 === rate=2.39334e-33, T=0.0207121, TIT=0.0414242, IT=0.5
91 finished solveLinearSystemImpl_ 1
91 converged value: 1 121 1 let s go get convergedRemote
91 to  comm_.min(converged) 
91 did  comm_.min(converged) convergedRemote: 1
91 final convergedRemote: 1
91 Update: x^(k+1) = x^k - deltax^k 
91 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
91 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
91 Newton iteration  4 done91 , maximum relative shift = 1.453e-01
91 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
37 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
37 === rate=2.39334e-33, T=0.0207257, TIT=0.0414514, IT=0.5
37 finished solveLinearSystemImpl_ 1
37 converged value: 1 121 1 let s go get convergedRemote
37 to  comm_.min(converged) 
37 did  comm_.min(converged) convergedRemote: 1
37 final convergedRemote: 1
37 Update: x^(k+1) = x^k - deltax^k 
37 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
37 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
37 Newton iteration  4 done37 , maximum relative shift = 1.453e-01
37 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
98 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
98 === rate=2.39334e-33, T=0.0206927, TIT=0.0413853, IT=0.5
98 finished solveLinearSystemImpl_ 1
98 converged value: 1 121 1 let s go get convergedRemote
98 to  comm_.min(converged) 
98 did  comm_.min(converged) convergedRemote: 1
98 final convergedRemote: 1
98 Update: x^(k+1) = x^k - deltax^k 
98 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
98 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
98 Newton iteration  4 done98 , maximum relative shift = 1.453e-01
98 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
36 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
36 === rate=2.39334e-33, T=0.0207339, TIT=0.0414677, IT=0.5
36 finished solveLinearSystemImpl_ 1
36 converged value: 1 121 1 let s go get convergedRemote
36 to  comm_.min(converged) 
36 did  comm_.min(converged) convergedRemote: 1
36 final convergedRemote: 1
36 Update: x^(k+1) = x^k - deltax^k 
36 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
36 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
36 Newton iteration  4 done36 , maximum relative shift = 1.453e-01
36 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
58 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
58 === rate=2.39334e-33, T=0.0207086, TIT=0.0414173, IT=0.5
58 finished solveLinearSystemImpl_ 1
58 converged value: 1 121 1 let s go get convergedRemote
58 to  comm_.min(converged) 
58 did  comm_.min(converged) convergedRemote: 1
58 final convergedRemote: 1
58 Update: x^(k+1) = x^k - deltax^k 
58 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
58 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
58 Newton iteration  4 done58 , maximum relative shift = 1.453e-01
58 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
102 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
102 === rate=2.39334e-33, T=0.0206854, TIT=0.0413707, IT=0.5
102 finished solveLinearSystemImpl_ 1
102 converged value: 1 121 1 let s go get convergedRemote
102 to  comm_.min(converged) 
102 did  comm_.min(converged) convergedRemote: 1
102 final convergedRemote: 1
102 Update: x^(k+1) = x^k - deltax^k 
102 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
102 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
102 Newton iteration  4 done102 , maximum relative shift = 1.453e-01
102 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
9 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
9 === rate=2.39334e-33, T=0.020674, TIT=0.0413481, IT=0.5
9 finished solveLinearSystemImpl_ 1
9 converged value: 1 121 1 let s go get convergedRemote
9 to  comm_.min(converged) 
9 did  comm_.min(converged) convergedRemote: 1
9 final convergedRemote: 1
9 Update: x^(k+1) = x^k - deltax^k 
9 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
9 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
9 Newton iteration  4 done9 , maximum relative shift = 1.453e-01
9 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
81 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
81 === rate=2.39334e-33, T=0.0207229, TIT=0.0414459, IT=0.5
81 finished solveLinearSystemImpl_ 1
81 converged value: 1 121 1 let s go get convergedRemote
81 to  comm_.min(converged) 
81 did  comm_.min(converged) convergedRemote: 1
81 final convergedRemote: 1
81 Update: x^(k+1) = x^k - deltax^k 
81 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
81 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
81 Newton iteration  4 done81 , maximum relative shift = 1.453e-01
81 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
99 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
99 === rate=2.39334e-33, T=0.0206897, TIT=0.0413794, IT=0.5
99 finished solveLinearSystemImpl_ 1
99 converged value: 1 121 1 let s go get convergedRemote
99 to  comm_.min(converged) 
99 did  comm_.min(converged) convergedRemote: 1
99 final convergedRemote: 1
99 Update: x^(k+1) = x^k - deltax^k 
99 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
99 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
99 Newton iteration  4 done99 , maximum relative shift = 1.453e-01
99 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
92 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
92 === rate=2.39334e-33, T=0.0207076, TIT=0.0414151, IT=0.5
92 finished solveLinearSystemImpl_ 1
92 converged value: 1 121 1 let s go get convergedRemote
92 to  comm_.min(converged) 
92 did  comm_.min(converged) convergedRemote: 1
92 final convergedRemote: 1
92 Update: x^(k+1) = x^k - deltax^k 
92 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
92 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
92 Newton iteration  4 done92 , maximum relative shift = 1.453e-01
92 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
94 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
94 === rate=2.39334e-33, T=0.0207451, TIT=0.0414901, IT=0.5
94 finished solveLinearSystemImpl_ 1
94 converged value: 1 121 1 let s go get convergedRemote
94 to  comm_.min(converged) 
94 did  comm_.min(converged) convergedRemote: 1
94 final convergedRemote: 1
94 Update: x^(k+1) = x^k - deltax^k 
94 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
94 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
94 Newton iteration  4 done94 , maximum relative shift = 1.453e-01
94 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
34 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
34 === rate=2.39334e-33, T=0.0206598, TIT=0.0413196, IT=0.5
34 finished solveLinearSystemImpl_ 1
34 converged value: 1 121 1 let s go get convergedRemote
34 to  comm_.min(converged) 
34 did  comm_.min(converged) convergedRemote: 1
34 final convergedRemote: 1
34 Update: x^(k+1) = x^k - deltax^k 
34 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
34 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
34 Newton iteration  4 done34 , maximum relative shift = 1.453e-01
34 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
18 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
18 === rate=2.39334e-33, T=0.0206925, TIT=0.041385, IT=0.5
18 finished solveLinearSystemImpl_ 1
18 converged value: 1 121 1 let s go get convergedRemote
18 to  comm_.min(converged) 
18 did  comm_.min(converged) convergedRemote: 1
18 final convergedRemote: 1
18 Update: x^(k+1) = x^k - deltax^k 
18 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
18 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
18 Newton iteration  4 done18 , maximum relative shift = 1.453e-01
18 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
76 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
76 === rate=2.39334e-33, T=0.020701, TIT=0.0414019, IT=0.5
76 finished solveLinearSystemImpl_ 1
76 converged value: 1 121 1 let s go get convergedRemote
76 to  comm_.min(converged) 
76 did  comm_.min(converged) convergedRemote: 1
76 final convergedRemote: 1
76 Update: x^(k+1) = x^k - deltax^k 
76 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
76 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
76 Newton iteration  4 done76 , maximum relative shift = 1.453e-01
76 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
43 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
43 === rate=2.39334e-33, T=0.0206829, TIT=0.0413657, IT=0.5
43 finished solveLinearSystemImpl_ 1
43 converged value: 1 121 1 let s go get convergedRemote
43 to  comm_.min(converged) 
43 did  comm_.min(converged) convergedRemote: 1
43 final convergedRemote: 1
43 Update: x^(k+1) = x^k - deltax^k 
43 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
43 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
43 Newton iteration  4 done43 , maximum relative shift = 1.453e-01
43 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
42 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
42 === rate=2.39334e-33, T=0.0206964, TIT=0.0413929, IT=0.5
42 finished solveLinearSystemImpl_ 1
42 converged value: 1 121 1 let s go get convergedRemote
42 to  comm_.min(converged) 
42 did  comm_.min(converged) convergedRemote: 1
42 final convergedRemote: 1
42 Update: x^(k+1) = x^k - deltax^k 
42 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
42 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
42 Newton iteration  4 done42 , maximum relative shift = 1.453e-01
42 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
57 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
57 === rate=2.39334e-33, T=0.0207025, TIT=0.0414051, IT=0.5
57 finished solveLinearSystemImpl_ 1
57 converged value: 1 121 1 let s go get convergedRemote
57 to  comm_.min(converged) 
57 did  comm_.min(converged) convergedRemote: 1
57 final convergedRemote: 1
57 Update: x^(k+1) = x^k - deltax^k 
57 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
57 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
57 Newton iteration  4 done57 , maximum relative shift = 1.453e-01
57 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
21 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
21 === rate=2.39334e-33, T=0.0207122, TIT=0.0414244, IT=0.5
21 finished solveLinearSystemImpl_ 1
21 converged value: 1 121 1 let s go get convergedRemote
21 to  comm_.min(converged) 
21 did  comm_.min(converged) convergedRemote: 1
21 final convergedRemote: 1
21 Update: x^(k+1) = x^k - deltax^k 
21 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
21 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
21 Newton iteration  4 done21 , maximum relative shift = 1.453e-01
21 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
100 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
100 === rate=2.39334e-33, T=0.0207192, TIT=0.0414384, IT=0.5
100 finished solveLinearSystemImpl_ 1
100 converged value: 1 121 1 let s go get convergedRemote
100 to  comm_.min(converged) 
100 did  comm_.min(converged) convergedRemote: 1
100 final convergedRemote: 1
100 Update: x^(k+1) = x^k - deltax^k 
100 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
100 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
100 Newton iteration  4 done100 , maximum relative shift = 1.453e-01
100 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
96 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
96 === rate=2.39334e-33, T=0.0206926, TIT=0.0413852, IT=0.5
96 finished solveLinearSystemImpl_ 1
96 converged value: 1 121 1 let s go get convergedRemote
96 to  comm_.min(converged) 
96 did  comm_.min(converged) convergedRemote: 1
96 final convergedRemote: 1
96 Update: x^(k+1) = x^k - deltax^k 
96 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
96 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
96 Newton iteration  4 done96 , maximum relative shift = 1.453e-01
96 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
64 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
64 === rate=2.39334e-33, T=0.0206777, TIT=0.0413554, IT=0.5
64 finished solveLinearSystemImpl_ 1
64 converged value: 1 121 1 let s go get convergedRemote
64 to  comm_.min(converged) 
64 did  comm_.min(converged) convergedRemote: 1
64 final convergedRemote: 1
64 Update: x^(k+1) = x^k - deltax^k 
64 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
64 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
64 Newton iteration  4 done64 , maximum relative shift = 1.453e-01
64 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
93 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
93 === rate=2.39334e-33, T=0.020702, TIT=0.0414039, IT=0.5
93 finished solveLinearSystemImpl_ 1
93 converged value: 1 121 1 let s go get convergedRemote
93 to  comm_.min(converged) 
93 did  comm_.min(converged) convergedRemote: 1
93 final convergedRemote: 1
93 Update: x^(k+1) = x^k - deltax^k 
93 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
93 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
93 Newton iteration  4 done93 , maximum relative shift = 1.453e-01
93 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
13 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
13 === rate=2.39334e-33, T=0.0207185, TIT=0.041437, IT=0.5
13 finished solveLinearSystemImpl_ 1
13 converged value: 1 121 1 let s go get convergedRemote
13 to  comm_.min(converged) 
13 did  comm_.min(converged) convergedRemote: 1
13 final convergedRemote: 1
13 Update: x^(k+1) = x^k - deltax^k 
13 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
13 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
13 Newton iteration  4 done13 , maximum relative shift = 1.453e-01
13 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
47 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
47 === rate=2.39334e-33, T=0.0207262, TIT=0.0414523, IT=0.5
47 finished solveLinearSystemImpl_ 1
47 converged value: 1 121 1 let s go get convergedRemote
47 to  comm_.min(converged) 
47 did  comm_.min(converged) convergedRemote: 1
47 final convergedRemote: 1
47 Update: x^(k+1) = x^k - deltax^k 
47 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
47 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
47 Newton iteration  4 done47 , maximum relative shift = 1.453e-01
47 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
27 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
27 === rate=2.39334e-33, T=0.0207001, TIT=0.0414003, IT=0.5
27 finished solveLinearSystemImpl_ 1
27 converged value: 1 121 1 let s go get convergedRemote
27 to  comm_.min(converged) 
27 did  comm_.min(converged) convergedRemote: 1
27 final convergedRemote: 1
27 Update: x^(k+1) = x^k - deltax^k 
27 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
27 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
27 Newton iteration  4 done27 , maximum relative shift = 1.453e-01
27 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
83 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
83 === rate=2.39334e-33, T=0.0207147, TIT=0.0414294, IT=0.5
83 finished solveLinearSystemImpl_ 1
83 converged value: 1 121 1 let s go get convergedRemote
83 to  comm_.min(converged) 
83 did  comm_.min(converged) convergedRemote: 1
83 final convergedRemote: 1
83 Update: x^(k+1) = x^k - deltax^k 
83 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
83 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
83 Newton iteration  4 done83 , maximum relative shift = 1.453e-01
83 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
80 istlsolver::printOutput 
  0.5      1.19679e-22      4.89218e-17
80 === rate=2.39334e-33, T=0.0207152, TIT=0.0414304, IT=0.5
80 finished solveLinearSystemImpl_ 1
80 converged value: 1 121 1 let s go get convergedRemote
80 to  comm_.min(converged) 
80 did  comm_.min(converged) convergedRemote: 1
80 final convergedRemote: 1
80 Update: x^(k+1) = x^k - deltax^k 
80 newtonUpdateShift_: to shift_ = comm_.max(shift_) 
80 newtonUpdateShift_: did shift_ = comm_.max(shift_) 
80 Newton iteration  4 done80 , maximum relative shift = 1.453e-01
80 Assemble: r(x^k) = dS/dt + div F - q;   M = grad r
108 Solve: M deltax^k = r 
108 Newton::solveLinearSystem : entering the try section 4
108 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
108 solveLinearSystemImpl_, before converged = ls.solve 
108 121 amgbackend::solve isParallel 1
118 Solve: M deltax^k = r 
118 Newton::solveLinearSystem : entering the try section 4
118 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
118 solveLinearSystemImpl_, before converged = ls.solve 
118 121 amgbackend::solve isParallel 1
26 Solve: M deltax^k = r 
26 Newton::solveLinearSystem : entering the try section 4
26 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
26 solveLinearSystemImpl_, before converged = ls.solve 
26 121 amgbackend::solve isParallel 1
39 Solve: M deltax^k = r 
39 Newton::solveLinearSystem : entering the try section 4
39 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
39 solveLinearSystemImpl_, before converged = ls.solve 
39 121 amgbackend::solve isParallel 1
48 Solve: M deltax^k = r 
48 Newton::solveLinearSystem : entering the try section 4
48 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
48 solveLinearSystemImpl_, before converged = ls.solve 
48 121 amgbackend::solve isParallel 1
104 Solve: M deltax^k = r 
104 Newton::solveLinearSystem : entering the try section 4
104 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
104 solveLinearSystemImpl_, before converged = ls.solve 
104 121 amgbackend::solve isParallel 1
119 Solve: M deltax^k = r 
119 Newton::solveLinearSystem : entering the try section 4
119 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
119 solveLinearSystemImpl_, before converged = ls.solve 
119 121 amgbackend::solve isParallel 1
78 Solve: M deltax^k = r 
78 Newton::solveLinearSystem : entering the try section 4
78 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
78 solveLinearSystemImpl_, before converged = ls.solve 
78 121 amgbackend::solve isParallel 1
29 Solve: M deltax^k = r 
29 Newton::solveLinearSystem : entering the try section 4
29 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
29 solveLinearSystemImpl_, before converged = ls.solve 
29 121 amgbackend::solve isParallel 1
68 Solve: M deltax^k = r 
68 Newton::solveLinearSystem : entering the try section 4
68 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
68 solveLinearSystemImpl_, before converged = ls.solve 
68 121 amgbackend::solve isParallel 1
85 Solve: M deltax^k = r 
85 Newton::solveLinearSystem : entering the try section 4
85 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
85 solveLinearSystemImpl_, before converged = ls.solve 
85 121 amgbackend::solve isParallel 1
60 Solve: M deltax^k = r 
60 Newton::solveLinearSystem : entering the try section 4
60 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
60 solveLinearSystemImpl_, before converged = ls.solve 
60 121 amgbackend::solve isParallel 1
65 Solve: M deltax^k = r 
65 Newton::solveLinearSystem : entering the try section 4
65 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
65 solveLinearSystemImpl_, before converged = ls.solve 
65 121 amgbackend::solve isParallel 1
45 Solve: M deltax^k = r 
45 Newton::solveLinearSystem : entering the try section 4
45 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
45 solveLinearSystemImpl_, before converged = ls.solve 
45 121 amgbackend::solve isParallel 1
106 Solve: M deltax^k = r 
106 Newton::solveLinearSystem : entering the try section 4
106 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
106 solveLinearSystemImpl_, before converged = ls.solve 
106 121 amgbackend::solve isParallel 1
1 Solve: M deltax^k = r 
1 Newton::solveLinearSystem : entering the try section 4
1 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
1 solveLinearSystemImpl_, before converged = ls.solve 
1 121 amgbackend::solve isParallel 1
33 Solve: M deltax^k = r 
33 Newton::solveLinearSystem : entering the try section 4
33 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
33 solveLinearSystemImpl_, before converged = ls.solve 
33 121 amgbackend::solve isParallel 1
15 Solve: M deltax^k = r 
15 Newton::solveLinearSystem : entering the try section 4
15 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
15 solveLinearSystemImpl_, before converged = ls.solve 
15 121 amgbackend::solve isParallel 1
14 Solve: M deltax^k = r 
14 Newton::solveLinearSystem : entering the try section 4
14 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
14 solveLinearSystemImpl_, before converged = ls.solve 
14 121 amgbackend::solve isParallel 1
32 Solve: M deltax^k = r 
32 Newton::solveLinearSystem : entering the try section 4
32 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
32 solveLinearSystemImpl_, before converged = ls.solve 
32 121 amgbackend::solve isParallel 1
84 Solve: M deltax^k = r 
84 Newton::solveLinearSystem : entering the try section 4
84 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
84 solveLinearSystemImpl_, before converged = ls.solve 
84 121 amgbackend::solve isParallel 1
2 Solve: M deltax^k = r 
2 Newton::solveLinearSystem : entering the try section 4
2 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
2 solveLinearSystemImpl_, before converged = ls.solve 
2 121 amgbackend::solve isParallel 1
50 Solve: M deltax^k = r 
50 Newton::solveLinearSystem : entering the try section 4
50 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
50 solveLinearSystemImpl_, before converged = ls.solve 
50 121 amgbackend::solve isParallel 1
77 Solve: M deltax^k = r 
77 Newton::solveLinearSystem : entering the try section 4
77 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
77 solveLinearSystemImpl_, before converged = ls.solve 
77 121 amgbackend::solve isParallel 1
109 Solve: M deltax^k = r 
109 Newton::solveLinearSystem : entering the try section 4
109 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
109 solveLinearSystemImpl_, before converged = ls.solve 
109 121 amgbackend::solve isParallel 1
51 Solve: M deltax^k = r 
51 Newton::solveLinearSystem : entering the try section 4
51 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
51 solveLinearSystemImpl_, before converged = ls.solve 
51 121 amgbackend::solve isParallel 1
117 Solve: M deltax^k = r 
117 Newton::solveLinearSystem : entering the try section 4
117 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
117 solveLinearSystemImpl_, before converged = ls.solve 
117 121 amgbackend::solve isParallel 1
3 Solve: M deltax^k = r 
3 Newton::solveLinearSystem : entering the try section 4
3 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
3 solveLinearSystemImpl_, before converged = ls.solve 
3 121 amgbackend::solve isParallel 1
101 Solve: M deltax^k = r 
101 Newton::solveLinearSystem : entering the try section 4
101 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
101 solveLinearSystemImpl_, before converged = ls.solve 
101 121 amgbackend::solve isParallel 1
111 Solve: M deltax^k = r 
111 Newton::solveLinearSystem : entering the try section 4
111 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
111 solveLinearSystemImpl_, before converged = ls.solve 
111 121 amgbackend::solve isParallel 1
52 Solve: M deltax^k = r 
52 Newton::solveLinearSystem : entering the try section 4
52 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
52 solveLinearSystemImpl_, before converged = ls.solve 
52 121 amgbackend::solve isParallel 1
35 Solve: M deltax^k = r 
35 Newton::solveLinearSystem : entering the try section 4
35 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
35 solveLinearSystemImpl_, before converged = ls.solve 
35 121 amgbackend::solve isParallel 1
17 Solve: M deltax^k = r 
17 Newton::solveLinearSystem : entering the try section 4
17 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
17 solveLinearSystemImpl_, before converged = ls.solve 
17 121 amgbackend::solve isParallel 1
31 Solve: M deltax^k = r 
31 Newton::solveLinearSystem : entering the try section 4
31 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
31 solveLinearSystemImpl_, before converged = ls.solve 
31 121 amgbackend::solve isParallel 1
30 Solve: M deltax^k = r 
30 Newton::solveLinearSystem : entering the try section 4
30 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
30 solveLinearSystemImpl_, before converged = ls.solve 
30 121 amgbackend::solve isParallel 1
66 Solve: M deltax^k = r 
66 Newton::solveLinearSystem : entering the try section 4
66 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
66 solveLinearSystemImpl_, before converged = ls.solve 
66 121 amgbackend::solve isParallel 1
24 Solve: M deltax^k = r 
24 Newton::solveLinearSystem : entering the try section 4
24 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
24 solveLinearSystemImpl_, before converged = ls.solve 
24 121 amgbackend::solve isParallel 1
97 Solve: M deltax^k = r 
97 Newton::solveLinearSystem : entering the try section 4
97 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
97 solveLinearSystemImpl_, before converged = ls.solve 
97 121 amgbackend::solve isParallel 1
91 Solve: M deltax^k = r 
91 Newton::solveLinearSystem : entering the try section 4
91 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
91 solveLinearSystemImpl_, before converged = ls.solve 
91 121 amgbackend::solve isParallel 1
37 Solve: M deltax^k = r 
37 Newton::solveLinearSystem : entering the try section 4
37 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
37 solveLinearSystemImpl_, before converged = ls.solve 
37 121 amgbackend::solve isParallel 1
98 Solve: M deltax^k = r 
98 Newton::solveLinearSystem : entering the try section 4
98 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
98 solveLinearSystemImpl_, before converged = ls.solve 
98 121 amgbackend::solve isParallel 1
36 Solve: M deltax^k = r 
36 Newton::solveLinearSystem : entering the try section 4
36 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
36 solveLinearSystemImpl_, before converged = ls.solve 
36 121 amgbackend::solve isParallel 1
58 Solve: M deltax^k = r 
58 Newton::solveLinearSystem : entering the try section 4
58 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
58 solveLinearSystemImpl_, before converged = ls.solve 
58 121 amgbackend::solve isParallel 1
102 Solve: M deltax^k = r 
102 Newton::solveLinearSystem : entering the try section 4
102 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
102 solveLinearSystemImpl_, before converged = ls.solve 
102 121 amgbackend::solve isParallel 1
9 Solve: M deltax^k = r 
9 Newton::solveLinearSystem : entering the try section 4
9 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
9 solveLinearSystemImpl_, before converged = ls.solve 
9 121 amgbackend::solve isParallel 1
81 Solve: M deltax^k = r 
81 Newton::solveLinearSystem : entering the try section 4
81 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
81 solveLinearSystemImpl_, before converged = ls.solve 
81 121 amgbackend::solve isParallel 1
99 Solve: M deltax^k = r 
99 Newton::solveLinearSystem : entering the try section 4
99 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
99 solveLinearSystemImpl_, before converged = ls.solve 
99 121 amgbackend::solve isParallel 1
92 Solve: M deltax^k = r 
92 Newton::solveLinearSystem : entering the try section 4
92 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
92 solveLinearSystemImpl_, before converged = ls.solve 
92 121 amgbackend::solve isParallel 1
94 Solve: M deltax^k = r 
94 Newton::solveLinearSystem : entering the try section 4
94 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
94 solveLinearSystemImpl_, before converged = ls.solve 
94 121 amgbackend::solve isParallel 1
34 Solve: M deltax^k = r 
34 Newton::solveLinearSystem : entering the try section 4
34 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
34 solveLinearSystemImpl_, before converged = ls.solve 
34 121 amgbackend::solve isParallel 1
18 Solve: M deltax^k = r 
18 Newton::solveLinearSystem : entering the try section 4
18 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
18 solveLinearSystemImpl_, before converged = ls.solve 
18 121 amgbackend::solve isParallel 1
76 Solve: M deltax^k = r 
76 Newton::solveLinearSystem : entering the try section 4
76 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
76 solveLinearSystemImpl_, before converged = ls.solve 
76 121 amgbackend::solve isParallel 1
43 Solve: M deltax^k = r 
43 Newton::solveLinearSystem : entering the try section 4
43 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
43 solveLinearSystemImpl_, before converged = ls.solve 
43 121 amgbackend::solve isParallel 1
42 Solve: M deltax^k = r 
42 Newton::solveLinearSystem : entering the try section 4
42 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
42 solveLinearSystemImpl_, before converged = ls.solve 
42 121 amgbackend::solve isParallel 1
57 Solve: M deltax^k = r 
57 Newton::solveLinearSystem : entering the try section 4
57 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
57 solveLinearSystemImpl_, before converged = ls.solve 
57 121 amgbackend::solve isParallel 1
21 Solve: M deltax^k = r 
21 Newton::solveLinearSystem : entering the try section 4
21 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
21 solveLinearSystemImpl_, before converged = ls.solve 
21 121 amgbackend::solve isParallel 1
100 Solve: M deltax^k = r 
100 Newton::solveLinearSystem : entering the try section 4
100 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
100 solveLinearSystemImpl_, before converged = ls.solve 
100 121 amgbackend::solve isParallel 1
96 Solve: M deltax^k = r 
96 Newton::solveLinearSystem : entering the try section 4
96 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
96 solveLinearSystemImpl_, before converged = ls.solve 
96 121 amgbackend::solve isParallel 1
64 Solve: M deltax^k = r 
64 Newton::solveLinearSystem : entering the try section 4
64 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
64 solveLinearSystemImpl_, before converged = ls.solve 
64 121 amgbackend::solve isParallel 1
93 Solve: M deltax^k = r 
93 Newton::solveLinearSystem : entering the try section 4
93 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
93 solveLinearSystemImpl_, before converged = ls.solve 
93 121 amgbackend::solve isParallel 1
13 Solve: M deltax^k = r 
13 Newton::solveLinearSystem : entering the try section 4
13 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
13 solveLinearSystemImpl_, before converged = ls.solve 
13 121 amgbackend::solve isParallel 1
47 Solve: M deltax^k = r 
47 Newton::solveLinearSystem : entering the try section 4
47 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
47 solveLinearSystemImpl_, before converged = ls.solve 
47 121 amgbackend::solve isParallel 1
27 Solve: M deltax^k = r 
27 Newton::solveLinearSystem : entering the try section 4
27 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
27 solveLinearSystemImpl_, before converged = ls.solve 
27 121 amgbackend::solve isParallel 1
83 Solve: M deltax^k = r 
83 Newton::solveLinearSystem : entering the try section 4
83 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
83 solveLinearSystemImpl_, before converged = ls.solve 
83 121 amgbackend::solve isParallel 1
41 Solve: M deltax^k = r 
41 Newton::solveLinearSystem : entering the try section 4
41 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
41 solveLinearSystemImpl_, before converged = ls.solve 
41 121 amgbackend::solve isParallel 1
113 Solve: M deltax^k = r 
113 Newton::solveLinearSystem : entering the try section 4
113 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
113 solveLinearSystemImpl_, before converged = ls.solve 
113 121 amgbackend::solve isParallel 1
8 Solve: M deltax^k = r 
8 Newton::solveLinearSystem : entering the try section 4
8 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
8 solveLinearSystemImpl_, before converged = ls.solve 
8 121 amgbackend::solve isParallel 1
20 Solve: M deltax^k = r 
20 Newton::solveLinearSystem : entering the try section 4
20 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
20 solveLinearSystemImpl_, before converged = ls.solve 
20 121 amgbackend::solve isParallel 1
7 Solve: M deltax^k = r 
7 Newton::solveLinearSystem : entering the try section 4
7 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
7 solveLinearSystemImpl_, before converged = ls.solve 
7 121 amgbackend::solve isParallel 1
112 Solve: M deltax^k = r 
112 Newton::solveLinearSystem : entering the try section 4
112 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
112 solveLinearSystemImpl_, before converged = ls.solve 
112 121 amgbackend::solve isParallel 1
95 Solve: M deltax^k = r 
95 Newton::solveLinearSystem : entering the try section 4
95 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
95 solveLinearSystemImpl_, before converged = ls.solve 
95 121 amgbackend::solve isParallel 1
40 Solve: M deltax^k = r 
40 Newton::solveLinearSystem : entering the try section 4
40 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
40 solveLinearSystemImpl_, before converged = ls.solve 
40 121 amgbackend::solve isParallel 1
70 Solve: M deltax^k = r 
70 Newton::solveLinearSystem : entering the try section 4
70 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
70 solveLinearSystemImpl_, before converged = ls.solve 
70 121 amgbackend::solve isParallel 1
71 Solve: M deltax^k = r 
71 Newton::solveLinearSystem : entering the try section 4
71 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
71 solveLinearSystemImpl_, before converged = ls.solve 
71 121 amgbackend::solve isParallel 1
12 Solve: M deltax^k = r 
12 Newton::solveLinearSystem : entering the try section 4
12 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
12 solveLinearSystemImpl_, before converged = ls.solve 
12 121 amgbackend::solve isParallel 1
114 Solve: M deltax^k = r 
114 Newton::solveLinearSystem : entering the try section 4
114 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
114 solveLinearSystemImpl_, before converged = ls.solve 
114 121 amgbackend::solve isParallel 1
63 Solve: M deltax^k = r 
63 Newton::solveLinearSystem : entering the try section 4
63 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
63 solveLinearSystemImpl_, before converged = ls.solve 
63 121 amgbackend::solve isParallel 1
56 Solve: M deltax^k = r 
56 Newton::solveLinearSystem : entering the try section 4
56 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
56 solveLinearSystemImpl_, before converged = ls.solve 
56 121 amgbackend::solve isParallel 1
116 Solve: M deltax^k = r 
116 Newton::solveLinearSystem : entering the try section 4
116 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
116 solveLinearSystemImpl_, before converged = ls.solve 
116 121 amgbackend::solve isParallel 1
25 Solve: M deltax^k = r 
25 Newton::solveLinearSystem : entering the try section 4
25 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
25 solveLinearSystemImpl_, before converged = ls.solve 
25 121 amgbackend::solve isParallel 1
55 Solve: M deltax^k = r 
55 Newton::solveLinearSystem : entering the try section 4
55 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
55 solveLinearSystemImpl_, before converged = ls.solve 
55 121 amgbackend::solve isParallel 1
49 Solve: M deltax^k = r 
49 Newton::solveLinearSystem : entering the try section 4
49 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
49 solveLinearSystemImpl_, before converged = ls.solve 
49 121 amgbackend::solve isParallel 1
54 Solve: M deltax^k = r 
54 Newton::solveLinearSystem : entering the try section 4
54 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
54 solveLinearSystemImpl_, before converged = ls.solve 
54 121 amgbackend::solve isParallel 1
46 Solve: M deltax^k = r 
46 Newton::solveLinearSystem : entering the try section 4
46 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
46 solveLinearSystemImpl_, before converged = ls.solve 
46 121 amgbackend::solve isParallel 1
79 Solve: M deltax^k = r 
79 Newton::solveLinearSystem : entering the try section 4
79 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
79 solveLinearSystemImpl_, before converged = ls.solve 
79 121 amgbackend::solve isParallel 1
105 Solve: M deltax^k = r 
105 Newton::solveLinearSystem : entering the try section 4
105 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
105 solveLinearSystemImpl_, before converged = ls.solve 
105 121 amgbackend::solve isParallel 1
53 Solve: M deltax^k = r 
53 Newton::solveLinearSystem : entering the try section 4
53 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
53 solveLinearSystemImpl_, before converged = ls.solve 
53 121 amgbackend::solve isParallel 1
38 Solve: M deltax^k = r 
38 Newton::solveLinearSystem : entering the try section 4
38 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
38 solveLinearSystemImpl_, before converged = ls.solve 
38 121 amgbackend::solve isParallel 1
44 Solve: M deltax^k = r 
44 Newton::solveLinearSystem : entering the try section 4
44 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
44 solveLinearSystemImpl_, before converged = ls.solve 
44 121 amgbackend::solve isParallel 1
69 Solve: M deltax^k = r 
69 Newton::solveLinearSystem : entering the try section 4
69 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
69 solveLinearSystemImpl_, before converged = ls.solve 
69 121 amgbackend::solve isParallel 1
120 Solve: M deltax^k = r 
120 Newton::solveLinearSystem : entering the try section 4
120 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
120 solveLinearSystemImpl_, before converged = ls.solve 
120 121 amgbackend::solve isParallel 1
28 Solve: M deltax^k = r 
28 Newton::solveLinearSystem : entering the try section 4
28 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
28 solveLinearSystemImpl_, before converged = ls.solve 
28 121 amgbackend::solve isParallel 1
75 Solve: M deltax^k = r 
75 Newton::solveLinearSystem : entering the try section 4
75 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
75 solveLinearSystemImpl_, before converged = ls.solve 
75 121 amgbackend::solve isParallel 1
61 Solve: M deltax^k = r 
61 Newton::solveLinearSystem : entering the try section 4
61 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
61 solveLinearSystemImpl_, before converged = ls.solve 
61 121 amgbackend::solve isParallel 1
6 Solve: M deltax^k = r 
6 Newton::solveLinearSystem : entering the try section 4
6 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
6 solveLinearSystemImpl_, before converged = ls.solve 
6 121 amgbackend::solve isParallel 1
110 Solve: M deltax^k = r 
110 Newton::solveLinearSystem : entering the try section 4
110 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
110 solveLinearSystemImpl_, before converged = ls.solve 
110 121 amgbackend::solve isParallel 1
74 Solve: M deltax^k = r 
74 Newton::solveLinearSystem : entering the try section 4
74 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
74 solveLinearSystemImpl_, before converged = ls.solve 
74 121 amgbackend::solve isParallel 1
10 Solve: M deltax^k = r 
10 Newton::solveLinearSystem : entering the try section 4
10 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
10 solveLinearSystemImpl_, before converged = ls.solve 
10 121 amgbackend::solve isParallel 1
59 Solve: M deltax^k = r 
59 Newton::solveLinearSystem : entering the try section 4
59 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
59 solveLinearSystemImpl_, before converged = ls.solve 
59 121 amgbackend::solve isParallel 1
72 Solve: M deltax^k = r 
72 Newton::solveLinearSystem : entering the try section 4
72 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
72 solveLinearSystemImpl_, before converged = ls.solve 
72 121 amgbackend::solve isParallel 1
89 Solve: M deltax^k = r 
89 Newton::solveLinearSystem : entering the try section 4
89 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
89 solveLinearSystemImpl_, before converged = ls.solve 
89 121 amgbackend::solve isParallel 1
23 Solve: M deltax^k = r 
23 Newton::solveLinearSystem : entering the try section 4
23 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
23 solveLinearSystemImpl_, before converged = ls.solve 
23 121 amgbackend::solve isParallel 1
80 Solve: M deltax^k = r 
80 Newton::solveLinearSystem : entering the try section 4
80 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
80 solveLinearSystemImpl_, before converged = ls.solve 
80 121 amgbackend::solve isParallel 1
73 Solve: M deltax^k = r 
73 Newton::solveLinearSystem : entering the try section 4
73 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
73 solveLinearSystemImpl_, before converged = ls.solve 
73 121 amgbackend::solve isParallel 1
67 Solve: M deltax^k = r 
67 Newton::solveLinearSystem : entering the try section 4
67 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
67 solveLinearSystemImpl_, before converged = ls.solve 
67 121 amgbackend::solve isParallel 1
90 Solve: M deltax^k = r 
90 Newton::solveLinearSystem : entering the try section 4
90 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
90 solveLinearSystemImpl_, before converged = ls.solve 
90 121 amgbackend::solve isParallel 1
86 Solve: M deltax^k = r 
86 Newton::solveLinearSystem : entering the try section 4
86 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
86 solveLinearSystemImpl_, before converged = ls.solve 
86 121 amgbackend::solve isParallel 1
87 Solve: M deltax^k = r 
87 Newton::solveLinearSystem : entering the try section 4
87 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
87 solveLinearSystemImpl_, before converged = ls.solve 
87 121 amgbackend::solve isParallel 1
16 Solve: M deltax^k = r 
16 Newton::solveLinearSystem : entering the try section 4
16 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
16 solveLinearSystemImpl_, before converged = ls.solve 
16 121 amgbackend::solve isParallel 1
19 Solve: M deltax^k = r 
19 Newton::solveLinearSystem : entering the try section 4
19 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
19 solveLinearSystemImpl_, before converged = ls.solve 
19 121 amgbackend::solve isParallel 1
0 Solve: M deltax^k = r 
0 Newton::solveLinearSystem : entering the try section 4
0 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
0 solveLinearSystemImpl_, before converged = ls.solve 
0 121 amgbackend::solve isParallel 1
103 Solve: M deltax^k = r 
103 Newton::solveLinearSystem : entering the try section 4
103 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
103 solveLinearSystemImpl_, before converged = ls.solve 
103 121 amgbackend::solve isParallel 1
115 Solve: M deltax^k = r 
115 Newton::solveLinearSystem : entering the try section 4
115 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
115 solveLinearSystemImpl_, before converged = ls.solve 
115 121 amgbackend::solve isParallel 1
107 Solve: M deltax^k = r 
107 Newton::solveLinearSystem : entering the try section 4
107 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
107 solveLinearSystemImpl_, before converged = ls.solve 
107 121 amgbackend::solve isParallel 1
62 Solve: M deltax^k = r 
62 Newton::solveLinearSystem : entering the try section 4
62 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
62 solveLinearSystemImpl_, before converged = ls.solve 
62 121 amgbackend::solve isParallel 1
4 Solve: M deltax^k = r 
4 Newton::solveLinearSystem : entering the try section 4
4 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
4 solveLinearSystemImpl_, before converged = ls.solve 
4 121 amgbackend::solve isParallel 1
22 Solve: M deltax^k = r 
22 Newton::solveLinearSystem : entering the try section 4
22 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
22 solveLinearSystemImpl_, before converged = ls.solve 
22 121 amgbackend::solve isParallel 1
82 Solve: M deltax^k = r 
82 Newton::solveLinearSystem : entering the try section 4
82 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
82 solveLinearSystemImpl_, before converged = ls.solve 
82 121 amgbackend::solve isParallel 1
88 Solve: M deltax^k = r 
88 Newton::solveLinearSystem : entering the try section 4
88 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
88 solveLinearSystemImpl_, before converged = ls.solve 
88 121 amgbackend::solve isParallel 1
11 Solve: M deltax^k = r 
11 Newton::solveLinearSystem : entering the try section 4
11 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
11 solveLinearSystemImpl_, before converged = ls.solve 
11 121 amgbackend::solve isParallel 1
5 Solve: M deltax^k = r 
5 Newton::solveLinearSystem : entering the try section 4
5 in solveLinearSystemImpl_ typename std::enable_if_t<!isMultiTypeBlockVector<V>(), bool>
5 solveLinearSystemImpl_, before converged = ls.solve 
5 121 amgbackend::solve isParallel 1
43 121 before Dune::BiCGSTABSolver 
43 Dune::BiCGSTABSolver.apply(x, b, result_) 
43 BiCGSTABSolver::apply 
42 121 before Dune::BiCGSTABSolver 
42 Dune::BiCGSTABSolver.apply(x, b, result_) 
42 BiCGSTABSolver::apply 
57 121 before Dune::BiCGSTABSolver 
57 Dune::BiCGSTABSolver.apply(x, b, result_) 
57 BiCGSTABSolver::apply 
21 121 before Dune::BiCGSTABSolver 
21 Dune::BiCGSTABSolver.apply(x, b, result_) 
21 BiCGSTABSolver::apply 
100 121 before Dune::BiCGSTABSolver 
100 Dune::BiCGSTABSolver.apply(x, b, result_) 
100 BiCGSTABSolver::apply 
96 121 before Dune::BiCGSTABSolver 
96 Dune::BiCGSTABSolver.apply(x, b, result_) 
96 BiCGSTABSolver::apply 
64 121 before Dune::BiCGSTABSolver 
64 Dune::BiCGSTABSolver.apply(x, b, result_) 
64 BiCGSTABSolver::apply 
93 121 before Dune::BiCGSTABSolver 
93 Dune::BiCGSTABSolver.apply(x, b, result_) 
93 BiCGSTABSolver::apply 
13 121 before Dune::BiCGSTABSolver 
13 Dune::BiCGSTABSolver.apply(x, b, result_) 
13 BiCGSTABSolver::apply 
47 121 before Dune::BiCGSTABSolver 
47 Dune::BiCGSTABSolver.apply(x, b, result_) 
47 BiCGSTABSolver::apply 
27 121 before Dune::BiCGSTABSolver 
27 Dune::BiCGSTABSolver.apply(x, b, result_) 
27 BiCGSTABSolver::apply 
83 121 before Dune::BiCGSTABSolver 
83 Dune::BiCGSTABSolver.apply(x, b, result_) 
83 BiCGSTABSolver::apply 
41 121 before Dune::BiCGSTABSolver 
41 Dune::BiCGSTABSolver.apply(x, b, result_) 
41 BiCGSTABSolver::apply 
113 121 before Dune::BiCGSTABSolver 
113 Dune::BiCGSTABSolver.apply(x, b, result_) 
113 BiCGSTABSolver::apply 
8 121 before Dune::BiCGSTABSolver 
8 Dune::BiCGSTABSolver.apply(x, b, result_) 
8 BiCGSTABSolver::apply 
20 121 before Dune::BiCGSTABSolver 
20 Dune::BiCGSTABSolver.apply(x, b, result_) 
20 BiCGSTABSolver::apply 
7 121 before Dune::BiCGSTABSolver 
7 Dune::BiCGSTABSolver.apply(x, b, result_) 
7 BiCGSTABSolver::apply 
112 121 before Dune::BiCGSTABSolver 
112 Dune::BiCGSTABSolver.apply(x, b, result_) 
112 BiCGSTABSolver::apply 
95 121 before Dune::BiCGSTABSolver 
95 Dune::BiCGSTABSolver.apply(x, b, result_) 
95 BiCGSTABSolver::apply 
40 121 before Dune::BiCGSTABSolver 
40 Dune::BiCGSTABSolver.apply(x, b, result_) 
40 BiCGSTABSolver::apply 
70 121 before Dune::BiCGSTABSolver 
70 Dune::BiCGSTABSolver.apply(x, b, result_) 
70 BiCGSTABSolver::apply 
71 121 before Dune::BiCGSTABSolver 
71 Dune::BiCGSTABSolver.apply(x, b, result_) 
71 BiCGSTABSolver::apply 
12 121 before Dune::BiCGSTABSolver 
12 Dune::BiCGSTABSolver.apply(x, b, result_) 
12 BiCGSTABSolver::apply 
114 121 before Dune::BiCGSTABSolver 
114 Dune::BiCGSTABSolver.apply(x, b, result_) 
114 BiCGSTABSolver::apply 
63 121 before Dune::BiCGSTABSolver 
63 Dune::BiCGSTABSolver.apply(x, b, result_) 
63 BiCGSTABSolver::apply 
56 121 before Dune::BiCGSTABSolver 
56 Dune::BiCGSTABSolver.apply(x, b, result_) 
56 BiCGSTABSolver::apply 
116 121 before Dune::BiCGSTABSolver 
116 Dune::BiCGSTABSolver.apply(x, b, result_) 
116 BiCGSTABSolver::apply 
25 121 before Dune::BiCGSTABSolver 
25 Dune::BiCGSTABSolver.apply(x, b, result_) 
25 BiCGSTABSolver::apply 
55 121 before Dune::BiCGSTABSolver 
55 Dune::BiCGSTABSolver.apply(x, b, result_) 
55 BiCGSTABSolver::apply 
49 121 before Dune::BiCGSTABSolver 
49 Dune::BiCGSTABSolver.apply(x, b, result_) 
49 BiCGSTABSolver::apply 
54 121 before Dune::BiCGSTABSolver 
54 Dune::BiCGSTABSolver.apply(x, b, result_) 
54 BiCGSTABSolver::apply 
46 121 before Dune::BiCGSTABSolver 
46 Dune::BiCGSTABSolver.apply(x, b, result_) 
46 BiCGSTABSolver::apply 
79 121 before Dune::BiCGSTABSolver 
79 Dune::BiCGSTABSolver.apply(x, b, result_) 
79 BiCGSTABSolver::apply 
105 121 before Dune::BiCGSTABSolver 
105 Dune::BiCGSTABSolver.apply(x, b, result_) 
105 BiCGSTABSolver::apply 
53 121 before Dune::BiCGSTABSolver 
53 Dune::BiCGSTABSolver.apply(x, b, result_) 
53 BiCGSTABSolver::apply 
38 121 before Dune::BiCGSTABSolver 
38 Dune::BiCGSTABSolver.apply(x, b, result_) 
38 BiCGSTABSolver::apply 
44 121 before Dune::BiCGSTABSolver 
44 Dune::BiCGSTABSolver.apply(x, b, result_) 
44 BiCGSTABSolver::apply 
69 121 before Dune::BiCGSTABSolver 
69 Dune::BiCGSTABSolver.apply(x, b, result_) 
69 BiCGSTABSolver::apply 
120 121 before Dune::BiCGSTABSolver 
120 Dune::BiCGSTABSolver.apply(x, b, result_) 
120 BiCGSTABSolver::apply 
28 121 before Dune::BiCGSTABSolver 
28 Dune::BiCGSTABSolver.apply(x, b, result_) 
28 BiCGSTABSolver::apply 
75 121 before Dune::BiCGSTABSolver 
75 Dune::BiCGSTABSolver.apply(x, b, result_) 
75 BiCGSTABSolver::apply 
61 121 before Dune::BiCGSTABSolver 
61 Dune::BiCGSTABSolver.apply(x, b, result_) 
61 BiCGSTABSolver::apply 
6 121 before Dune::BiCGSTABSolver 
6 Dune::BiCGSTABSolver.apply(x, b, result_) 
6 BiCGSTABSolver::apply 
110 121 before Dune::BiCGSTABSolver 
110 Dune::BiCGSTABSolver.apply(x, b, result_) 
110 BiCGSTABSolver::apply 
74 121 before Dune::BiCGSTABSolver 
74 Dune::BiCGSTABSolver.apply(x, b, result_) 
74 BiCGSTABSolver::apply 
10 121 before Dune::BiCGSTABSolver 
10 Dune::BiCGSTABSolver.apply(x, b, result_) 
10 BiCGSTABSolver::apply 
59 121 before Dune::BiCGSTABSolver 
59 Dune::BiCGSTABSolver.apply(x, b, result_) 
59 BiCGSTABSolver::apply 
72 121 before Dune::BiCGSTABSolver 
72 Dune::BiCGSTABSolver.apply(x, b, result_) 
72 BiCGSTABSolver::apply 
89 121 before Dune::BiCGSTABSolver 
89 Dune::BiCGSTABSolver.apply(x, b, result_) 
89 BiCGSTABSolver::apply 
5 121 before Dune::BiCGSTABSolver 
5 Dune::BiCGSTABSolver.apply(x, b, result_) 
5 BiCGSTABSolver::apply 
111 121 before Dune::BiCGSTABSolver 
111 Dune::BiCGSTABSolver.apply(x, b, result_) 
111 BiCGSTABSolver::apply 
52 121 before Dune::BiCGSTABSolver 
52 Dune::BiCGSTABSolver.apply(x, b, result_) 
52 BiCGSTABSolver::apply 
35 121 before Dune::BiCGSTABSolver 
35 Dune::BiCGSTABSolver.apply(x, b, result_) 
35 BiCGSTABSolver::apply 
17 121 before Dune::BiCGSTABSolver 
17 Dune::BiCGSTABSolver.apply(x, b, result_) 
17 BiCGSTABSolver::apply 
31 121 before Dune::BiCGSTABSolver 
31 Dune::BiCGSTABSolver.apply(x, b, result_) 
31 BiCGSTABSolver::apply 
30 121 before Dune::BiCGSTABSolver 
30 Dune::BiCGSTABSolver.apply(x, b, result_) 
30 BiCGSTABSolver::apply 
66 121 before Dune::BiCGSTABSolver 
66 Dune::BiCGSTABSolver.apply(x, b, result_) 
66 BiCGSTABSolver::apply 
24 121 before Dune::BiCGSTABSolver 
24 Dune::BiCGSTABSolver.apply(x, b, result_) 
24 BiCGSTABSolver::apply 
97 121 before Dune::BiCGSTABSolver 
97 Dune::BiCGSTABSolver.apply(x, b, result_) 
97 BiCGSTABSolver::apply 
91 121 before Dune::BiCGSTABSolver 
91 Dune::BiCGSTABSolver.apply(x, b, result_) 
91 BiCGSTABSolver::apply 
37 121 before Dune::BiCGSTABSolver 
37 Dune::BiCGSTABSolver.apply(x, b, result_) 
37 BiCGSTABSolver::apply 
98 121 before Dune::BiCGSTABSolver 
98 Dune::BiCGSTABSolver.apply(x, b, result_) 
98 BiCGSTABSolver::apply 
36 121 before Dune::BiCGSTABSolver 
36 Dune::BiCGSTABSolver.apply(x, b, result_) 
36 BiCGSTABSolver::apply 
58 121 before Dune::BiCGSTABSolver 
58 Dune::BiCGSTABSolver.apply(x, b, result_) 
58 BiCGSTABSolver::apply 
102 121 before Dune::BiCGSTABSolver 
102 Dune::BiCGSTABSolver.apply(x, b, result_) 
102 BiCGSTABSolver::apply 
9 121 before Dune::BiCGSTABSolver 
9 Dune::BiCGSTABSolver.apply(x, b, result_) 
9 BiCGSTABSolver::apply 
81 121 before Dune::BiCGSTABSolver 
81 Dune::BiCGSTABSolver.apply(x, b, result_) 
81 BiCGSTABSolver::apply 
99 121 before Dune::BiCGSTABSolver 
99 Dune::BiCGSTABSolver.apply(x, b, result_) 
99 BiCGSTABSolver::apply 
92 121 before Dune::BiCGSTABSolver 
92 Dune::BiCGSTABSolver.apply(x, b, result_) 
92 BiCGSTABSolver::apply 
94 121 before Dune::BiCGSTABSolver 
94 Dune::BiCGSTABSolver.apply(x, b, result_) 
94 BiCGSTABSolver::apply 
34 121 before Dune::BiCGSTABSolver 
34 Dune::BiCGSTABSolver.apply(x, b, result_) 
34 BiCGSTABSolver::apply 
18 121 before Dune::BiCGSTABSolver 
18 Dune::BiCGSTABSolver.apply(x, b, result_) 
18 BiCGSTABSolver::apply 
76 121 before Dune::BiCGSTABSolver 
76 Dune::BiCGSTABSolver.apply(x, b, result_) 
76 BiCGSTABSolver::apply 
80 121 before Dune::BiCGSTABSolver 
80 Dune::BiCGSTABSolver.apply(x, b, result_) 
80 BiCGSTABSolver::apply 
73 121 before Dune::BiCGSTABSolver 
73 Dune::BiCGSTABSolver.apply(x, b, result_) 
73 BiCGSTABSolver::apply 
67 121 before Dune::BiCGSTABSolver 
67 Dune::BiCGSTABSolver.apply(x, b, result_) 
67 BiCGSTABSolver::apply 
90 121 before Dune::BiCGSTABSolver 
90 Dune::BiCGSTABSolver.apply(x, b, result_) 
90 BiCGSTABSolver::apply 
86 121 before Dune::BiCGSTABSolver 
86 Dune::BiCGSTABSolver.apply(x, b, result_) 
86 BiCGSTABSolver::apply 
87 121 before Dune::BiCGSTABSolver 
87 Dune::BiCGSTABSolver.apply(x, b, result_) 
87 BiCGSTABSolver::apply 
16 121 before Dune::BiCGSTABSolver 
16 Dune::BiCGSTABSolver.apply(x, b, result_) 
16 BiCGSTABSolver::apply 
19 121 before Dune::BiCGSTABSolver 
19 Dune::BiCGSTABSolver.apply(x, b, result_) 
19 BiCGSTABSolver::apply 
103 121 before Dune::BiCGSTABSolver 
103 Dune::BiCGSTABSolver.apply(x, b, result_) 
103 BiCGSTABSolver::apply 
115 121 before Dune::BiCGSTABSolver 
115 Dune::BiCGSTABSolver.apply(x, b, result_) 
115 BiCGSTABSolver::apply 
107 121 before Dune::BiCGSTABSolver 
107 Dune::BiCGSTABSolver.apply(x, b, result_) 
107 BiCGSTABSolver::apply 
62 121 before Dune::BiCGSTABSolver 
62 Dune::BiCGSTABSolver.apply(x, b, result_) 
62 BiCGSTABSolver::apply 
4 121 before Dune::BiCGSTABSolver 
4 Dune::BiCGSTABSolver.apply(x, b, result_) 
4 BiCGSTABSolver::apply 
22 121 before Dune::BiCGSTABSolver 
22 Dune::BiCGSTABSolver.apply(x, b, result_) 
22 BiCGSTABSolver::apply 
82 121 before Dune::BiCGSTABSolver 
82 Dune::BiCGSTABSolver.apply(x, b, result_) 
82 BiCGSTABSolver::apply 
88 121 before Dune::BiCGSTABSolver 
88 Dune::BiCGSTABSolver.apply(x, b, result_) 
88 BiCGSTABSolver::apply 
11 121 before Dune::BiCGSTABSolver 
11 Dune::BiCGSTABSolver.apply(x, b, result_) 
11 BiCGSTABSolver::apply 
23 121 before Dune::BiCGSTABSolver 
23 Dune::BiCGSTABSolver.apply(x, b, result_) 
23 BiCGSTABSolver::apply 
108 121 before Dune::BiCGSTABSolver 
108 Dune::BiCGSTABSolver.apply(x, b, result_) 
108 BiCGSTABSolver::apply 
118 121 before Dune::BiCGSTABSolver 
118 Dune::BiCGSTABSolver.apply(x, b, result_) 
118 BiCGSTABSolver::apply 
26 121 before Dune::BiCGSTABSolver 
26 Dune::BiCGSTABSolver.apply(x, b, result_) 
26 BiCGSTABSolver::apply 
39 121 before Dune::BiCGSTABSolver 
39 Dune::BiCGSTABSolver.apply(x, b, result_) 
39 BiCGSTABSolver::apply 
48 121 before Dune::BiCGSTABSolver 
48 Dune::BiCGSTABSolver.apply(x, b, result_) 
48 BiCGSTABSolver::apply 
104 121 before Dune::BiCGSTABSolver 
104 Dune::BiCGSTABSolver.apply(x, b, result_) 
104 BiCGSTABSolver::apply 
119 121 before Dune::BiCGSTABSolver 
119 Dune::BiCGSTABSolver.apply(x, b, result_) 
119 BiCGSTABSolver::apply 
78 121 before Dune::BiCGSTABSolver 
78 Dune::BiCGSTABSolver.apply(x, b, result_) 
78 BiCGSTABSolver::apply 
29 121 before Dune::BiCGSTABSolver 
29 Dune::BiCGSTABSolver.apply(x, b, result_) 
29 BiCGSTABSolver::apply 
68 121 before Dune::BiCGSTABSolver 
68 Dune::BiCGSTABSolver.apply(x, b, result_) 
68 BiCGSTABSolver::apply 
85 121 before Dune::BiCGSTABSolver 
85 Dune::BiCGSTABSolver.apply(x, b, result_) 
85 BiCGSTABSolver::apply 
60 121 before Dune::BiCGSTABSolver 
60 Dune::BiCGSTABSolver.apply(x, b, result_) 
60 BiCGSTABSolver::apply 
65 121 before Dune::BiCGSTABSolver 
65 Dune::BiCGSTABSolver.apply(x, b, result_) 
65 BiCGSTABSolver::apply 
45 121 before Dune::BiCGSTABSolver 
45 Dune::BiCGSTABSolver.apply(x, b, result_) 
45 BiCGSTABSolver::apply 
106 121 before Dune::BiCGSTABSolver 
106 Dune::BiCGSTABSolver.apply(x, b, result_) 
106 BiCGSTABSolver::apply 
1 121 before Dune::BiCGSTABSolver 
1 Dune::BiCGSTABSolver.apply(x, b, result_) 
1 BiCGSTABSolver::apply 
33 121 before Dune::BiCGSTABSolver 
33 Dune::BiCGSTABSolver.apply(x, b, result_) 
33 BiCGSTABSolver::apply 
15 121 before Dune::BiCGSTABSolver 
15 Dune::BiCGSTABSolver.apply(x, b, result_) 
15 BiCGSTABSolver::apply 
14 121 before Dune::BiCGSTABSolver 
14 Dune::BiCGSTABSolver.apply(x, b, result_) 
14 BiCGSTABSolver::apply 
32 121 before Dune::BiCGSTABSolver 
32 Dune::BiCGSTABSolver.apply(x, b, result_) 
32 BiCGSTABSolver::apply 
84 121 before Dune::BiCGSTABSolver 
84 Dune::BiCGSTABSolver.apply(x, b, result_) 
84 BiCGSTABSolver::apply 
2 121 before Dune::BiCGSTABSolver 
2 Dune::BiCGSTABSolver.apply(x, b, result_) 
2 BiCGSTABSolver::apply 
50 121 before Dune::BiCGSTABSolver 
50 Dune::BiCGSTABSolver.apply(x, b, result_) 
50 BiCGSTABSolver::apply 
77 121 before Dune::BiCGSTABSolver 
77 Dune::BiCGSTABSolver.apply(x, b, result_) 
77 BiCGSTABSolver::apply 
109 121 before Dune::BiCGSTABSolver 
109 Dune::BiCGSTABSolver.apply(x, b, result_) 
109 BiCGSTABSolver::apply 
51 121 before Dune::BiCGSTABSolver 
51 Dune::BiCGSTABSolver.apply(x, b, result_) 
51 BiCGSTABSolver::apply 
117 121 before Dune::BiCGSTABSolver 
117 Dune::BiCGSTABSolver.apply(x, b, result_) 
117 BiCGSTABSolver::apply 
3 121 before Dune::BiCGSTABSolver 
3 Dune::BiCGSTABSolver.apply(x, b, result_) 
3 BiCGSTABSolver::apply 
101 121 before Dune::BiCGSTABSolver 
101 Dune::BiCGSTABSolver.apply(x, b, result_) 
101 BiCGSTABSolver::apply 
14 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
32 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
84 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
2 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
50 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
77 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
109 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
51 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
117 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
3 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
5 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
111 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
52 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
35 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
17 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
31 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
30 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
66 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
24 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
97 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
91 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
37 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
98 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
36 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
58 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
102 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
9 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
81 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
99 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
92 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
94 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
34 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
18 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
89 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
43 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
42 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
57 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
21 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
100 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
96 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
64 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
93 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
13 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
47 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
27 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
83 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
41 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
113 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
8 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
20 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
7 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
112 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
95 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
40 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
70 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
71 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
12 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
114 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
63 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
56 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
116 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
25 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
55 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
49 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
54 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
46 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
79 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
105 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
53 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
38 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
44 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
69 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
120 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
28 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
75 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
61 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
6 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
110 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
74 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
10 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
59 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
72 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
101 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
76 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
80 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
73 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
67 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
90 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
86 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
87 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
16 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
Using a direct coarse solver (SuperLU)
Building hierarchy of 2 levels (inclusive coarse solver) took 0.02386 seconds.
0 121 before Dune::BiCGSTABSolver 
0 Dune::BiCGSTABSolver.apply(x, b, result_) 
0 BiCGSTABSolver::apply 
0 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
19 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
103 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
115 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
107 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
62 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
4 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
22 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
82 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
88 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
11 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
23 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
108 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
118 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
26 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
39 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
48 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
104 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
119 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
78 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
29 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
68 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
85 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
60 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
65 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
45 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
106 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
1 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
33 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
15 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.58147e-06
Newton::solveLinearSystem : Caught exception from the linear solver when getting converged: "FMatrixError [luDecomposition:/home/m.giraud/DUMUXexud/dune-common/dune/common/densematrix.hh:909]: matrix is singular"
80 converged value: 0 121 1 let s go get convergedRemote
80 to  comm_.min(converged) 
Newton::solveLinearSystem : Caught exception from the linear solver when getting converged: "FMatrixError [luDecomposition:/home/m.giraud/DUMUXexud/dune-common/dune/common/densematrix.hh:909]: matrix is singular"
86 converged value: 0 121 1 let s go get convergedRemote
86 to  comm_.min(converged) 
