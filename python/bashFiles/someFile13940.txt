112 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
112: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 5
112: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
112: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 5
112: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
112: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 5
112: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
112: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 5
112: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
112: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 5
112: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
69 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
69  (it = 0.5; it < _maxit; it+=.5) 0.5 250
69  before p = r 
69  before  y = W^-1 * p 
69  before _prec->apply(y,p); 0.5 250
69 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
69 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
69 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
69: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 7
69: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
69: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 7
69: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
69: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 7
69: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
69: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 7
69: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
3 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
3 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
3  (it = 0.5; it < _maxit; it+=.5) 0.5 250
3  before p = r 
3  before  y = W^-1 * p 
3  before _prec->apply(y,p); 0.5 250
3 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
3 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
3 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finish30 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
30  (it = 0.5; it < _maxit; it+=.5) 0.5 250
30  before p = r 
30  before  y = W^-1 * p 
30  before _prec->apply(y,p); 0.5 250
30 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
30 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
30 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
30: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 6
30: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
30: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 6
30: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
30: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 6
30: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
30: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 6
30: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
30: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 6
30: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
30: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 6
30: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
30 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
30 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
30: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 6
65 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
65  (it = 0.5; it < _maxit; it+=.5) 0.5 250
65  before p = r 
65  before  y = W^-1 * p 
65  before _prec->apply(y,p); 0.5 250
65 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
65 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
65 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
65: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 9
65: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
65: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 9
65: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
65: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 9
65: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
65: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 9
65: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
65: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 9
65: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
65: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 9
65: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
65: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 9
65: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
65: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 9
65: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
65: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 9
65: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
118 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
118  (it = 0.5; it < _maxit; it+=.5) 0.5 250
118  before p = r 
118  before  y = W^-1 * p 
118  before _prec->apply(y,p); 0.5 250
118 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
118 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
118 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
117 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
117  (it = 0.5; it < _maxit; it+=.5) 0.5 250
117  before p = r 
117  before  y = W^-1 * p 
117  before _prec->apply(y,p); 0.5 250
117 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
117 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
117 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 20 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 21 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 22
117: commun6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
6 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
6  (it = 0.5; it < _maxit; it+=.5) 0.5 250
6  before p = r 
6  before  y = W^-1 * p 
6  before _prec->apply(y,p); 0.5 250
6 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
6 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
6 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 17
6: communi66 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
66  (it = 0.5; it < _maxit; it+=.5) 0.5 250
66  before p = r 
66  before  y = W^-1 * p 
66  before _prec->apply(y,p); 0.5 250
66 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
66 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
66 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
35 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
35  (it = 0.5; it < _maxit; it+=.5) 0.5 250
35  before p = r 
35  before  y = W^-1 * p 
35  before _prec->apply(y,p); 0.5 250
35 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
35 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
35 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
35: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 9
35: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
35: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 9
35: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
35: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 9
35: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
35: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 9
35: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
35: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 9
35: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
35: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 9
35: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
35: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 9
109 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
109  (it = 0.5; it < _maxit; it+=.5) 0.5 250
109  before p = r 
109  before  y = W^-1 * p 
109  before _prec->apply(y,p); 0.5 250
109 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
109 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
109 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 20 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 20
109: communi80 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
80  (it = 0.5; it < _maxit; it+=.5) 0.5 250
80  before p = r 
80  before  y = W^-1 * p 
80  before _prec->apply(y,p); 0.5 250
80 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
80 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
80 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
80: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 10
80: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
80: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 10
80: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
80: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 10
80: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
80: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 10
80: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
80: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 10
80: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
80: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 10
80: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
80: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 10
80: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
80: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 10
80: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
80: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 10
63 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
63  (it = 0.5; it < _maxit; it+=.5) 0.5 250
63  before p = r 
63  before  y = W^-1 * p 
63  before _prec->apply(y,p); 0.5 250
63 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
63 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
63 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
63: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 9
63: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
63: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 9
63: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
63: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 9
63: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
63: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 9
63: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
63: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 9
63: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
63: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 9
63: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
63: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 9
63: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
63: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 9
78 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
78  (it = 0.5; it < _maxit; it+=.5) 0.5 250
78  before p = r 
78  before  y = W^-1 * p 
78  before _prec->apply(y,p); 0.5 250
78 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
78 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
78 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
78: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 15
78: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
78: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 15
78: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
78: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 15
78: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
78: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 15
78: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
78: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 15
78: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
78: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 15
78: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
78: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 15
78: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
78: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 15
78: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
78: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 15
78: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
78: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 15
78: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
78: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 15
78: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
78: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 15
111 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
111  (it = 0.5; it < _maxit; it+=.5) 0.5 250
111  before p = r 
111  before  y = W^-1 * p 
111  before _prec->apply(y,p); 0.5 250
111 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
111 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
111 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
111 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
111 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 11
107 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
107  (it = 0.5; it < _maxit; it+=.5) 0.5 250
107  before p = r 
107  before  y = W^-1 * p 
107  before _prec->apply(y,p); 0.5 250
107 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
107 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
107 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
107: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 5
107: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
107: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 5
107: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
107: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 5
107: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
107: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 5
107: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
107: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 5
107: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
107 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
107 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
107: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 5
107: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
32 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
32  (it = 0.5; it < _maxit; it+=.5) 0.5 250
32  before p = r 
32  before  y = W^-1 * p 
32  before _prec->apply(y,p); 0.5 250
32 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
32 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
32 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 16
32: communicator.hh::sendRecv, before assert(finished !39 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
39  (it = 0.5; it < _maxit; it+=.5) 0.5 250
39  before p = r 
39  before  y = W^-1 * p 
39  before _prec->apply(y,p); 0.5 250
39 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
39 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
39 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
39: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 9
39: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
39: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 9
39: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
39: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 9
39: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
39: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 9
39: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
39: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 9
39: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
39: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 9
39: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
39: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 9
39: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
39: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 9
39: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
39: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 9
39: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
39 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
39 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
50 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
50  (it = 0.5; it < _maxit; it+=.5) 0.5 250
50  before p = r 
50  before  y = W^-1 * p 
50  before _prec->apply(y,p); 0.5 250
50 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
50 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
50 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
50: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 10
50: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
50: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 10
50: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
50: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 10
50: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
50: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 10
50: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
50: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 10
50: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
50: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 10
50: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
50: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 10
50: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
50: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 10
50: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
50: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 10
50: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
50: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 10
50: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
50 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
50 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
50: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 10
50: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
50: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 10
50: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
50: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 10
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
10 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
10  (it = 0.5; it < _maxit; it+=.5) 0.5 250
10  before p = r 
10  before  y = W^-1 * p 
10  before _prec->apply(y,p); 0.5 250
10 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
10 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
10 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
10 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
10 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waita45 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
45  (it = 0.5; it < _maxit; it+=.5) 0.5 250
45  before p = r 
45  before  y = W^-1 * p 
45  before _prec->apply(y,p); 0.5 250
45 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
45 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
45 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 17
45: communicator.hh::sendRecv, before assert(finished !54 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
54  (it = 0.5; it < _maxit; it+=.5) 0.5 250
54  before p = r 
54  before  y = W^-1 * p 
54  before _prec->apply(y,p); 0.5 250
54 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
54 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
54 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
54: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 18
54: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
54: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 18
54: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
54: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 18
54: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
54: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 18
54: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
54: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 18
54: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
54: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 18
54: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
54: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 18
54: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
54: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 18
54: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
54: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 18
54: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
54: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 18
54: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
54: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 18
54: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
54: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 18
54: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
54: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 18
54: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
54: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 18
54: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
54: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 18
54: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
54: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 18
54: communicator.hh::sendRecv, before assert(finished !=119 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
119  (it = 0.5; it < _maxit; it+=.5) 0.5 250
119  before p = r 
119  before  y = W^-1 * p 
119  before _prec->apply(y,p); 0.5 250
119 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
119 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
119 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
119 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
119 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, 94 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
94  (it = 0.5; it < _maxit; it+=.5) 0.5 250
94  before p = r 
94  before  y = W^-1 * p 
94  before _prec->apply(y,p); 0.5 250
94 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
94 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
94 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 20 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 21
94: communicator.hh::sendRecv, before assert(finishe51 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
51  (it = 0.5; it < _maxit; it+=.5) 0.5 250
51  before p = r 
51  before  y = W^-1 * p 
51  before _prec->apply(y,p); 0.5 250
51 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
51 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
51 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
51: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 10
51: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
51: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 10
51: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
51: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 10
51: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
51: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 10
51: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
51: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 10
51: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
51: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 10
51: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
51: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 10
51: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
51: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 10
51: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
51: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 10
60 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
60  (it = 0.5; it < _maxit; it+=.5) 0.5 250
60  before p = r 
60  before  y = W^-1 * p 
60  before _prec->apply(y,p); 0.5 250
60 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
60 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
60 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
60: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 6
60: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
60: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 6
60: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
60: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 6
60: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
60: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 6
60: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
60: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 6
60: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
60: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 6
60: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
60 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
60 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
60: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 6
108 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
108  (it = 0.5; it < _maxit; it+=.5) 0.5 250
108  before p = r 
108  before  y = W^-1 * p 
108  before _prec->apply(y,p); 0.5 250
108 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
108 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
108 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
108: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 9
108: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
108: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 9
108: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
108: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 9
108: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
108: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 9
108: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
108: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 9
108: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
108: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 9
108: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
108: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 9
108: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
108: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 9
108: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
108: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 9
108: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
108 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
108 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
108: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 9
108: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
108: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 9
108: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
108: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 9
108: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
108: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 9
108: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
108: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status)114 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
114  (it = 0.5; it < _maxit; it+=.5) 0.5 250
114  before p = r 
114  before  y = W^-1 * p 
114  before _prec->apply(y,p); 0.5 250
114 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
114 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
114 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
114 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
114 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, 105 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
105  (it = 0.5; it < _maxit; it+=.5) 0.5 250
105  before p = r 
105  before  y = W^-1 * p 
105  before _prec->apply(y,p); 0.5 250
105 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
105 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
105 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
105: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 9
105: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
105: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 9
105: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
105: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 9
105: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
105: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 9
105: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
105: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 9
105: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
105: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 9
105: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
105: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 9
105: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
105: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 9
105: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
105: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 9
105: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
105 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
105 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
105: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 9
105: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
105: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 9
105: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
105: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 9
105: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
105: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 9
105: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
105: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status)28 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
28  (it = 0.5; it < _maxit; it+=.5) 0.5 250
28  before p = r 
28  before  y = W^-1 * p 
28  before _prec->apply(y,p); 0.5 250
28 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
28 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
28 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 18
28: communicator.hh::sendRecv, before assert(finished 115 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
115  (it = 0.5; it < _maxit; it+=.5) 0.5 250
115  before p = r 
115  before  y = W^-1 * p 
115  before _prec->apply(y,p); 0.5 250
115 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
115 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
115 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
115 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
115 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &fin97 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
97  (it = 0.5; it < _maxit; it+=.5) 0.5 250
97  before p = r 
97  before  y = W^-1 * p 
97  before _prec->apply(y,p); 0.5 250
97 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
97 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
97 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
97: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 9
97: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
97: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 9
97: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
97: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 9
97: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
97: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 9
97: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
97: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 9
97: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
97: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 9
97: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
97: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 9
97: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
97: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 9
97: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
97: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 9
97: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
97 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
97 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
97: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 9
97: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
97: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 9
97: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
97: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 9
97: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
97: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 9
97: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
97: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 9
97: communicator.hh::sendRecv, 81 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
81  (it = 0.5; it < _maxit; it+=.5) 0.5 250
81  before p = r 
81  before  y = W^-1 * p 
81  before _prec->apply(y,p); 0.5 250
81 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
81 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
81 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
81: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 11
81: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
81: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 11
81: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
81: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 11
81: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
81: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 11
81: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
81: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 11
81: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
81: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 11
81: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
81: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 11
81: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
81: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
81: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
81: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 11
81: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
81: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 11
81: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
81: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 11
81: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
81 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
81 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
81: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 11
81: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
81: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 11
81: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
81: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 11
81: communicato29 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
29  (it = 0.5; it < _maxit; it+=.5) 0.5 250
29  before p = r 
29  before  y = W^-1 * p 
29  before _prec->apply(y,p); 0.5 250
29 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
29 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
29 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
29: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 11
29: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
29: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 11
29: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
29: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 11
29: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
29: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 11
29: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
29: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 11
29: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
29: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 11
29: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
29: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 11
29: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
29: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
29: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
29: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 11
29: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
29: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 11
29: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
29: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 11
29: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
29 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
29 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
29: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 11
29: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
29: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 11
29: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
29: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 11
29: communicato20 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
20  (it = 0.5; it < _maxit; it+=.5) 0.5 250
20  before p = r 
20  before  y = W^-1 * p 
20  before _prec->apply(y,p); 0.5 250
20 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
20 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
20 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 10
20: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 10
20: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 10
20: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 10
20: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 10
20: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 10
20: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 10
20: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 10
20: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 10
20: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 10
20: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
20 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
20 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 10
20: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 10
20: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 10
20: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 10
20: communicator.71 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
71  (it = 0.5; it < _maxit; it+=.5) 0.5 250
71  before p = r 
71  before  y = W^-1 * p 
71  before _prec->apply(y,p); 0.5 250
71 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
71 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
71 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
71: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 20
71: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
71: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 20
71: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
71: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 20
71: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
71: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 20
71: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
71: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 20
71: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
71: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 20
71: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
71: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 20
71: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
71: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 20
71: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
71: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 20
71: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
71: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 20
71: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
71: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 20
71: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
71: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 20
71: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 20 -32766 0 0
71: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 20
71: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
71: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 20
71: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
71: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 20
89 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
89  (it = 0.5; it < _maxit; it+=.5) 0.5 250
89  before p = r 
89  before  y = W^-1 * p 
89  before _prec->apply(y,p); 0.5 250
89 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
89 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
89 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
89: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 11
89: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
89: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 11
89: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
89: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 11
89: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
89: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 11
89: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
89: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 11
89: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
89: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 11
89: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
89: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 11
89: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
89: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
89: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
89: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 11
82 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
82  (it = 0.5; it < _maxit; it+=.5) 0.5 250
82  before p = r 
82  before  y = W^-1 * p 
82  before _prec->apply(y,p); 0.5 250
82 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
91 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
91  (it = 0.5; it < _maxit; it+=.5) 0.5 250
91  before p = r 
91  before  y = W^-1 * p 
91  before _prec->apply(y,p); 0.5 250
91 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
91 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
91 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
91: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 9
91: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
91: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 9
91: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
91: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 9
91: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
91: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 9
91: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
91: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 9
91: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
91: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 9
91: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
91: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 9
91: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
91: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 9
91: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
91: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 9
91: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
91 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
91 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
91: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 9
91: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
91: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 9
91: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
91: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 9
91: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
91: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 9
91: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
91: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 9
91: communicator.hh::sendRecv, 76 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
76  (it = 0.5; it < _maxit; it+=.5) 0.5 250
76  before p = r 
76  before  y = W^-1 * p 
76  before _prec->apply(y,p); 0.5 250
76 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
76 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
76 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
76: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 12
76: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
76: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 12
76: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
76: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 12
76: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
76: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 12
76: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
76: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 12
76: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
76: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 12
76: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
76: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 12
76: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
76: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 12
76: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
76: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 12
76: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
76: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 12
76: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
76: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 12
44 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
44  (it = 0.5; it < _maxit; it+=.5) 0.5 250
44  before p = r 
44  before  y = W^-1 * p 
44  before _prec->apply(y,p); 0.5 250
44 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
4 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
4  (it = 0.5; it < _maxit; it+=.5) 0.5 250
4  before p = r 
4  before  y = W^-1 * p 
4  before _prec->apply(y,p); 0.5 250
4 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
4 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
4 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 14
4: communica46 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
46  (it = 0.5; it < _maxit; it+=.5) 0.5 250
46  before p = r 
46  before  y = W^-1 * p 
46  before _prec->apply(y,p); 0.5 250
46 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
46 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
46 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
46: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 12
46: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
46: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 12
46: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
46: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 12
46: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
46: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 12
46: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
46: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 12
46: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
46: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 12
46: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
46: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 12
46: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
46: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 12
46: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
46: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 12
46: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
46: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 12
46: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
46: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 12
46: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
46: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 12
46: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
46 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
46 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
46: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 12
46: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
46: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 12
46: communica43 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
43  (it = 0.5; it < _maxit; it+=.5) 0.5 250
43  before p = r 
43  before  y = W^-1 * p 
43  before _prec->apply(y,p); 0.5 250
43 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
43 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
43 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
43: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 11
43: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
43: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 11
43: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
43: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 11
43: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
43: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 11
43: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
43: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 11
43: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
43: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 11
43: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
43: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 11
43: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
43: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
43: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
43: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 11
43: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
43: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 11
70 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
70  (it = 0.5; it < _maxit; it+=.5) 0.5 250
70  before p = r 
70  before  y = W^-1 * p 
70  before _prec->apply(y,p); 0.5 250
70 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
106 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
106  (it = 0.5; it < _maxit; it+=.5) 0.5 250
106  before p = r 
106  before  y = W^-1 * p 
106  before _prec->apply(y,p); 0.5 250
106 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
106 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
106 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 16
106: communicato93 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
93  (it = 0.5; it < _maxit; it+=.5) 0.5 250
93  before p = r 
93  before  y = W^-1 * p 
93  before _prec->apply(y,p); 0.5 250
93 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
93 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
93 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
93 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
93 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 13
93: commun67 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
67  (it = 0.5; it < _maxit; it+=.5) 0.5 250
67  before p = r 
67  before  y = W^-1 * p 
67  before _prec->apply(y,p); 0.5 250
67 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
67 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
67 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
67: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 13
67: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
67: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 13
67: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
67: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 13
67: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
67: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 13
67: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
67: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 13
67: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
67: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 13
67: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
67: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 13
67: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
67: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 13
67: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
67: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 13
16 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
16  (it = 0.5; it < _maxit; it+=.5) 0.5 250
16  before p = r 
16  before  y = W^-1 * p 
16  before _prec->apply(y,p); 0.5 250
16 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
16 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
16 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
16: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 6
16: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
16: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 6
16: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
16: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 6
16: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
16: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 6
16: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
16: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 6
16: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
16: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 6
16: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
16 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
16 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
16: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 6
16: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
16: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 6
16: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
16: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 6
16: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
16: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 6
16: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
16: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 6
16: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
16: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 6
16: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
16: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
84 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
84  (it = 0.5; it < _maxit; it+=.5) 0.5 250
84  before p = r 
84  before  y = W^-1 * p 
84  before _prec->apply(y,p); 0.5 250
84 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
84 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
84 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
84: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 18
84: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
84: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 18
84: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
84: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 18
84: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
84: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 18
84: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
84: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 18
84: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
84: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 18
84: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
84: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 18
84: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
84: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 18
84: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
84: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 18
84: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
84: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 18
84: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
84: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 18
84: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
84: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 18
84: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
84: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 18
84: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
84: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 18
22 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
22  (it = 0.5; it < _maxit; it+=.5) 0.5 250
22  before p = r 
22  before  y = W^-1 * p 
22  before _prec->apply(y,p); 0.5 250
22 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
22 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
22 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 20
22: communicator.hh::sendRecv, before assert(finished !56 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
56  (it = 0.5; it < _maxit; it+=.5) 0.5 250
56  before p = r 
56  before  y = W^-1 * p 
56  before _prec->apply(y,p); 0.5 250
56 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
56 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
56 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 31
56: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 31
56: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 31
56: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 31
56: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 31
56: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 31
56: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 31
56: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 20 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 31
56: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 26 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 31
56: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 31
56: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 31
56: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 31
56: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 31
56: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 31
56: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 29 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 31
56: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 31
56: communicator.hh::sendRecv, before assert(finished92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
92 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
92 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.s72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 20 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherT37: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
37: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 15
37: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
37: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 15
37: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
37: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 15
37: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
37: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 15
37: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
37: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 15
37: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
37: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 15
37: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
37: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 15
37: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
37 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
37 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
37: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 15
37: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
37: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 15
37: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
37: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 15
37: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
37: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 15
37: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
37: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 15
37: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
37: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 15
37: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
37: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 15
37: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
37: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 15
37: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
37: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 15
37: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
37: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 15
74: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 11
74: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
74: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 11
74: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
74: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 11
74: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
74 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
74 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
74: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 11
74: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
74: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 11
74: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
74: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 11
74: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
74: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 11
74: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
74: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 11
74: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
74: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 11
74: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
74: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 11
74: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
74: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
77: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
77: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 6
77: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
77: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 6
77: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
77: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 6
77: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
77: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 6
77: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
77: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 6
77: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
77 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
77 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
77: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 6
55: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
55: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 11
55: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
55: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 11
55: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
55: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 11
55: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
55: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 11
55: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
55: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 11
55: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
55: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 11
55: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
55: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
55: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
55: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 11
55: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
55: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 11
55: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
55: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 11
15: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
15: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 8
15: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
15: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 8
15: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
15 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
15 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
15: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 8
15: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
15: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 8
15: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
15: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 8
15: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
15: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 8
15: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
15: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 8
15: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
15: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 8
15: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
15: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 8
15: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
15: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 8
15: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
15: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
23: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 11
23: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
23: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
23: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
23: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 11
23: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
23: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 11
23: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
23: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 11
23: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
23 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
23 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
23: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 11
23: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
23: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 11
23: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
23: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 11
23: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
23: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 11
23: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
23: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 11
23: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
23: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 11
23: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
23: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 11
23: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
23: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
23: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
23: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 11
23: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
23: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 11
23: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
23: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 11
23: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
23: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
5: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
5: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
5: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
5: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 11
5: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
5: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 11
5: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
5: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 11
5: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
5 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
5 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
5: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 11
5: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
5: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 11
5: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
5: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 11
5: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
5: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 11
5: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
5: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 11
5: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
5: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 11
5: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
5: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 11
5: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
5: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
5: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
5: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 11
5: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
5: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 11
5: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
5: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 11
2: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
2: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 8
2: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
2 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
2 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
2: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 8
2: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
2: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 8
2: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
2: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 8
2: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
2: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 8
2: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
2: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 8
2: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
2: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 8
2: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
2: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 8
2: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
2: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 8
2: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
2: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
24 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
24 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size17: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
17: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 3
17: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
17: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 3
17: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
17: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 3
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 3
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 22 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 23 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 24 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 87 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 89 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 117
0: communicator.hh::svoid presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
116 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
116 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
116: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 7
116: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
116: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 7
116: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
116: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 7
116: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
116: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 7
116: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
116: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 7
116: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
116: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 7
116: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
116: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 7
116: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
116: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
41: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 20
41: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
41: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 20
41: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
41: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 20
41: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -32766 0 0
41: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 20
41: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
41: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 20
41: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
41: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 20
41: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
41: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 20
11: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
11: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 17
11: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
11: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 17
11: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
11: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 17
11: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
11: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 17
11: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
11 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
11 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
11: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 17
11: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
11: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 17
11: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
11: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 17
11: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
11: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 17
11: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
11: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 17
11: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
11: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 17
11: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
11: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 17
11: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
11: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 17
11: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
11: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 17
11: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
11: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 17
11: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
11: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 17
11: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
11: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 17
11: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
11: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 17
11: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
11: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.31: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
31: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 10
31: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
31 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
31 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
31: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 10
31: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
31: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 10
31: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
31: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 10
31: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
31: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 10
31: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
31: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 10
31: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
31: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 10
31: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
31: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 10
88: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 21
88: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
88: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 21
88: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
88: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 21
88: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
88: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 21
88: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
88: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 21
88: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 20 -32766 0 0
88: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 21
27: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
27: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 17
27: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
27: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 17
27: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
27: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 17
27: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
27: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 17
27: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
27: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 17
27: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
27 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
27 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
27: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 17
27: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
27: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 17
27: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
27: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 17
27: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
27: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 17
27: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
27: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 17
27: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
27: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 17
27: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
27: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 17
27: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
27: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 17
27: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
27: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 17
27: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
27: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 17
27: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
27: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 17
27: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
27: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 17
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 18
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 18
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 18
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 18
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
98 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
98 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 18
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 18
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 18
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 18
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 18
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 18
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 18
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 18
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 18
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 18
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 18
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 18
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 18
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformat40: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
40: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 15
40: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
40: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 15
40: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
40: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 15
40: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
40: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 15
40: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
40: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 15
40: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
40: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 15
40: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
40: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 15
40: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
40: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 15
104: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
104: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 9
104: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
104: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 9
104: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
104 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
104 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
104: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 9
104: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
104: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 9
104: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
104: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 9
104: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
104: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 9
104: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
104: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 9
104: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
104: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 9
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
99 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
99 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
99: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 13
99: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
99: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 13
99: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
99: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 13
99: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
99: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 13
99: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
99: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 13
99: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
99: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 13
99: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
99: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 13
99: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
99: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 13
99: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
99: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 13
99: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
99: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 13
99: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
99: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 13
99: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
99: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 13
42: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
42: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 20
19: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
19: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 17
19: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
19 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
19 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
19: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 17
19: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
19: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 17
19: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
19: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 17
19: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
19: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 17
19: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
19: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 17
19: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
19: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 17
19: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
19: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 17
19: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
19: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 17
19: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
19: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 17
19: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
19: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 17
19: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
19: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 17
19: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
19: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 17
19: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
19: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 17
19: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
19: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 17
19: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
19: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 17
61: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
61: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 9
13: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
13: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 11
13: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
13 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
13 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
13: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 11
13: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
13: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 11
13: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
13: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 11
13: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
13: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 11
13: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
13: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 11
13: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
13: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 11
13: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
13: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 11
13: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
13: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
13: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
13: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 11
13: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
13: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 11
!= MPI_UNDEFINED); 10 -32766 0 0
38: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 24
38: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
38: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 24
38: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
38: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 24
38: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -32766 0 0
38: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 24
38: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 20 -32766 0 0
38: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 20 24
38: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 21 -32766 0 0
38: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 21 24
38: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
38: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 22 24
38: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
38: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 23 24
103: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
103 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
103 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
103: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 16
103: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
103: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 16
103: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
103: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 16
103: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
103: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 16
103: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
103: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 16
103: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
103: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 16
103: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
103: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 16
103: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
103: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 16
103: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
103: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 16
103: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
103: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 16
103: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
103: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 16
103: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
103: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 16
103: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
103: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 16
120: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
120 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
120 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
120: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 7
120: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
120: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 7
120: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
120: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 7
120: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
120: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 7
120: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
120: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 7
120: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
120: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 7
120: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
120: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 7
120: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
120: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
87: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
87: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 19
87: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
87: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 19
64: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
64: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 14
18: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
18 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
18 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
18: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 14
18: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
18: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 14
18: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
18: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 14
18: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
18: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 14
18: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
18: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 14
18: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
18: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 14
18: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
18: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 14
18: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
18: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 14
18: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
18: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 14
18: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
18: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 14
18: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
18: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 14
18: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
18: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 14
18: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
18: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 14
18: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
18: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 14
18: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
18: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
21 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
21 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
21: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 12
21: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
21: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 12
21: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
21: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 12
21: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
21: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 12
21: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
21: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 12
21: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
21: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 12
21: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
21: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 12
21: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
21: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 12
21: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
21: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 12
21: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
21: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 12
21: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
21: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 12
112 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
112 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
112: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 5
112: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
112: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 5
112: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
112: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 5
112: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
112: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 5
112: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
112: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 5
112: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
112: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
69: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 7
ed, &status); 6 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
3 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
3 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 9
3: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
3: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
30: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
30: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 6
30: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
30: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 6
30: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
30: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 6
30: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
30: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 6
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
65 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
65 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
65: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 9
65: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
65: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 9
65: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
65: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 9
65: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
65: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 9
65: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
65: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 9
65: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
65: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 9
65: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
65: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 9
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
118 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
118 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 14
118: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
118: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
icator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 20 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 21 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
117 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
117 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Wacator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
6 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
6 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 17
6: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
6: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 1void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
66 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
66 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 15
66: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
66: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 15
cator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
109 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
109 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Wa111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 11
111: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
111: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
107: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 5
107: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
107: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 5
107: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
107: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 5
107: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
107: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 5
107: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
107: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
= MPI_UNDEFINED); 1 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
32 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
32 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 16
32: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
32: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 16
39: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 9
39: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
39: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 9
39: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
39: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 9
39: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
39: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 9
39: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
39: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 9
39: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
39: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 9
50: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
50: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 10
ny(messageInformation_.size(), recvRequests, &finished, &status); 2 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 11
10: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
10: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
= MPI_UNDEFINED); 10 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
45 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
45 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 17
45: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
45: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 17
 MPI_UNDEFINED); 17 -32766 0 0
54: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 18
54: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
54: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 18
&finished, &status); 0 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 13
119: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
119: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
d != MPI_UNDEFINED); 6 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 20 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
94 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
94 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 20 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 21
; 4 9
108: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
108: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 9
108: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
108: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 9
108: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
108: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 9
108: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
108: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 9
108: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
108: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
&finished, &status); 0 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 13
114: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
114: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
; 4 9
105: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
105: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 9
105: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
105: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 9
105: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
105: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 9
105: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
105: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 9
105: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
105: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
!= MPI_UNDEFINED); 16 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
28 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
28 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 18
28: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
28: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 18
ished, &status); 2 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 11
115: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
115: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
97: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 9
97: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
97: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 9
97: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
97: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 9
97: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
97: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 9
97: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
97: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
r.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
81: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 11
81: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
81: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 11
81: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
81: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 11
81: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
81: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 11
81: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
81: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
r.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
29: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 11
29: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
29: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 11
29: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
29: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 11
29: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
29: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 11
29: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
29: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 10
20: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 10
20: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 10
20: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 10
20: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 10
20: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 10
20: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
20: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
91: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 9
91: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
91: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 9
91: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
91: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 9
91: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
91: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 9
91: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
91: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
tor.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
4 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
4 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 14
4: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
4: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
tor.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
46: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 12
46: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
46: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 12
46: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
46: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 12
46: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
46: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 12
46: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
46: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 12
46: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
46: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 12
r.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
106 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
106 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 16
106: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
106: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
icator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 13
93: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
93: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
 != MPI_UNDEFINED); 9 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 31
56: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 31
56: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 31
56: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 31
56: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 20 31
56: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 21 -32766 0 0
56: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 21 31
48 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
48  (it = 0.5; it < _maxit; it+=.5) 0.5 250
48  before p = r 
48  before  y = W^-1 * p 
48  before _prec->apply(y,p); 0.5 250
48 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
48 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
48 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
48: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 15
48: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
48: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 15
48: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
48: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 15
48: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
48: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 15
48: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
48: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 15
48: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
48: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 15
48: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
48: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 15
48: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
48: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 15
48: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
48: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 15
48: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
48: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 15
48: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
48: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 15
48: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
48: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 15
48: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
48: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 15
48: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
48: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 15
48: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
48: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 15
= MPI_UNDEFINED); 19 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
22 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
22 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 20
22: 34 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
34  (it = 0.5; it < _maxit; it+=.5) 0.5 250
34  before p = r 
34  before  y = W^-1 * p 
34  before _prec->apply(y,p); 0.5 250
34 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
34 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
34 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
34: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 14
34: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
34: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 14
34: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
34: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 14
34: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
34: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 14
34: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
34: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 14
34: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
34: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 14
34: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
34: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 14
34: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
34: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 14
34: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
34: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 14
34: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
34: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 14
34: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
34: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 14
34: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
34: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 14
34: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
34: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 14
34: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
34: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 14
90 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
90  (it = 0.5; it < _maxit; it+=.5) 0.5 250
90  before p = r 
90  before  y = W^-1 * p 
90  before _prec->apply(y,p); 0.5 250
90 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
90 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
90 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
90: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 6
90: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
90: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 6
90: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
90: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 6
90: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
90: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 6
90: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
90: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 6
90: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
90: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 6
90: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
90 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
90 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
90: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 6
90: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
90: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 6
90: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
90: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 6
90: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
90: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 6
90: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
90: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 6
90: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
90: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 6
90: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
90 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
90: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 6
86 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
86  (it = 0.5; it < _maxit; it+=.5) 0.5 250
86  before p = r 
86  before  y = W^-1 * p 
86  before _prec->apply(y,p); 0.5 250
86 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
86 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
86 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 21 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 29 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 23 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 25 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 30 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 24 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 20 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 26 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 28 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 31
86: communicator.hh::sendRecv, before assert(fin100 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
100  (it = 0.5; it < _maxit; it+=.5) 0.5 250
100  before p = r 
100  before  y = W^-1 * p 
100  before _prec->apply(y,p); 0.5 250
100 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
100 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
100 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
100: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 6
100: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
100: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 6
100: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
100: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 6
100: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
100: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 6
100: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
100: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 6
100: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
100: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 6
100: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
100 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
100 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
100: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 6
100: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
100: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 6
100: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
100: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 6
100: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
100: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 6
100: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
100: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 6
100: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
100: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 6
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
14 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
14 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 17
14: communicator.hh::sendRecv, before68 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
68  (it = 0.5; it < _maxit; it+=.5) 0.5 250
68  before p = r 
68  before  y = W^-1 * p 
68  before _prec->apply(y,p); 0.5 250
68 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
62 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
62  (it = 0.5; it < _maxit; it+=.5) 0.5 250
62  before p = r 
62  before  y = W^-1 * p 
62  before _prec->apply(y,p); 0.5 250
62 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
102 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
102  (it = 0.5; it < _maxit; it+=.5) 0.5 250
102  before p = r 
102  before  y = W^-1 * p 
102  before _prec->apply(y,p); 0.5 250
102 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
102 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
102 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void pr95 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
95  (it = 0.5; it < _maxit; it+=.5) 0.5 250
95  before p = r 
95  before  y = W^-1 * p 
95  before _prec->apply(y,p); 0.5 250
95 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
95 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
95 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
95: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 7
95: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
95: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 7
95: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
95: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 7
95: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
95: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 7
95: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
95: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 7
95: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
95: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 7
95: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
95: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 7
95: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
95 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
95 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
95: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 7
95: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
95: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 7
95: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
95: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 7
95: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
95: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 7
95: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
95: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 7
95: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
95: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 7
95: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
95: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 7
95: communicator.hh::sendRecv, 52 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
52  (it = 0.5; it < _maxit; it+=.5) 0.5 250
52  before p = r 
52  before  y = W^-1 * p 
52  before _prec->apply(y,p); 0.5 250
52 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
52 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
52 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 21 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 20 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 26
52: communicator.hh::sendRecv, before assert(finished 12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 20 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 21 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -3276110 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
110  (it = 0.5; it < _maxit; it+=.5) 0.5 250
110  before p = r 
110  before  y = W^-1 * p 
110  before _prec->apply(y,p); 0.5 250
110 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
110 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
110 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
110 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
110 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &fin26 === BiCGSTABSolver
 Iter          Defect            Rate
    0      1.17536e-06
26  (it = 0.5; it < _maxit; it+=.5) 0.5 250
26  before p = r 
26  before  y = W^-1 * p 
26  before _prec->apply(y,p); 0.5 250
26 void AMG<M,X,S,PI,A>::apply(Domain& v, const Range& d), before mgc(levelContext) 
void AMG<M,X,S,PI,A>::mgc(LevelContext& levelContext), before presmooth(levelContext, preSteps_) 
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
26 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
26 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 25 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 26
26: communicator.hh::sendRecv, before assert(finished !1: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
1: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 5
1: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
1 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
1 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
1: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 5
1: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
1: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 5
1: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
1: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 5
1: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
1: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 5
1: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
1: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 5
1: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
1: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
, recvRequests, &finished, &status); 2 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
7 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
7 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.s101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 22 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 20 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 21 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 23 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 22 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 23 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
101 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
101 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
101: communicator.hh::49: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 15
49: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
49: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 15
49: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
49: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 15
49: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
49: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 15
49: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
49: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 15
49: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
49: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 15
49: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
49: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 15
49: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
49: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 15
49: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
49: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 15
49: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
49: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 15
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
8 schwarz.hh:vir9: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
9: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 7
9: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
9: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 7
9: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
9 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
9 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
9: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 7
9: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
9: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 7
9: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
9: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 7
9: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
9: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 7
9: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
9: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 7
9: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
9: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 7
9: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
9: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 7
9: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
9: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
33: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
33: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 9
33: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
33: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 9
33: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
33: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 9
33: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
33: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 9
33: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
33: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 9
33: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
33: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 9
47: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
47: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 6
47: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
47: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 6
47: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
47: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 6
47: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
47: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 6
47: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
47: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 6
47: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
47 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
47 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
47: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 6
47: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
47: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 6
47: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
47: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 6
47: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
47: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 6
47: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
47: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 6
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
113 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
113 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
113: communicator.hh::sendRecv, 53: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
53: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 17
53: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
53: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 17
53: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
53: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 17
53: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
53: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 17
53: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
53: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 17
53: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
53: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 17
53: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
53: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 17
53: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
53: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 17
53: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
53: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 17
53: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
53: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 17
53: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
53: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 17
53: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
53: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 17
53: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
53: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 17
53: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
53: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 17
79: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 16
79: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
79: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 16
79: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
79: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 16
79: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
79: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 16
79: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
79: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 16
79: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
79: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 16
79: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
79: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 16
79: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
79 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
79 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
79: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 16
79: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
79: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 16
79: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
79: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 16
79: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
79: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 16
79: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
79: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 16
79: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
79: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 16
79: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
79: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 16
79: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
79: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 16
79: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
79: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 16
79: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
79: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 16
79: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
79: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 16
25: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 7
25: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
25: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 7
25: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
25: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 7
25: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
25: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 7
25: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
25 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
25 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
25: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 7
25: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
25: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 7
25: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
25: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 7
25: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
25: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 7
25: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
25: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 7
25: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
25: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 7
25: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
25: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 7
25: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
25: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
96: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
96: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 12
96: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
96: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 12
96: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
96: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 12
96: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
96: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 12
96: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
96: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 12
96: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
96: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 12
96: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
96: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 12
96: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
96 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
96 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
96: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 12
96: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
96: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 12
96: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
96: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 12
96: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
96: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 12
96: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
96: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 12
96: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
96: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 12
96: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
96: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 12
96: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
96: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 12
96: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
96: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 12
96: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
96: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 12
96: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
96: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), 58: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
58: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 21
58: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
58: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 21
58: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
58: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 21
58: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
58: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 21
58: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
58: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 21
58: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
58: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 21
58: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
58: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 21
58: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
58: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 21
58: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
58: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 21
58: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
58: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 21
58: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
58: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 21
94: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
94: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 21
communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 20
22: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
22: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
ished != MPI_UNDEFINED); 22 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 27 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 20 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 21 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 22 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 23 31
86: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
86: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 24 31
 assert(finished != MPI_UNDEFINED); 0 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 17
14: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
14: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 17
eSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
102 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
102 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 15
102: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
102: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 15
before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
95: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
!= MPI_UNDEFINED); 10 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 20 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 21 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 24 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 22 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 25 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 23 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 22 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 24 26
52: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
52: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 25 26
6 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 20 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 22 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 21 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 23 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 22 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 24 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 23 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 25 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 24 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 25 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
12 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
12 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 26
12: communicator.hh::sendReished, &status); 2 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 11
110: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
110: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
= MPI_UNDEFINED); 9 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 22 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 23 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 20 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 21 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 22 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 23 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 20 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 24 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 21 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 25 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 24 -32766 0 0
void presmooth(LevelContext& levelContext, size_t steps), before SmootherApplier<typename LevelContext::SmootherType>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
26 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
26 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 26
ize(), recvRequests, &finished, &status); 7 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 13
7: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
7: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 20 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 21 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 24
101: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 22 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 24
101: communicator.hh::sendRecv, before assert(finished != MPItual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
8 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -32766 0 0
8: communicator.hh::before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 18
113: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
113: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
recvRequests, &finished, &status); 10 12
ize(), recvRequests, &finished, &status); 7 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 1 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 16
92: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
92: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 16
ype>::preSmooth 
void preSmooth(Smoother& smoother, Domain& v, const Range& d), before smoother.apply(v,d);
72 schwarz.hh:virtual void apply (X& v, const Y& d), before communication.copyOwnerToAll(v,v); 
72 owneroverlapcopy.hh::copyOwnerToAll (const T& source, T& dest), before communicator.template forward<CopyGatherScatter<T> >(source,dest);
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 1 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 2 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 3 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 4 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 5 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 6 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 20 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 7 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 3 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 20
72: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
72: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 20
(), recvRequests, &finished, &status); 10 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 14
24: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
24: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
endRecv, before assert(finished != MPI_UNDEFINED); 91 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 93 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 101 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 20 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 103 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 21 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 104 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 22 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 107 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 23 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 108 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 24 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 111 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 25 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 112 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 26 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 116 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 27 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 28 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 21 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 29 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 102 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 30 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 105 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 31 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 106 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 32 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 109 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 33 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 110 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 34 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 113 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 35 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 114 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 36 117
0: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 115 -32766 0 0
0: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 37 117
size(), recvRequests, &finished, &status); 13 17
11: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
11: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 17
11: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
11: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 17
ion_.size(), recvRequests, &finished, &status); 13 18
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 18
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 0 -32766 0 0
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 18
98: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
98: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 18
itany(messageInformation_.size(), recvRequests, &finished, &status); 11 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 21 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 4 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 7 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 20 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 20 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 21 22
117: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
117: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
7
itany(messageInformation_.size(), recvRequests, &finished, &status); 13 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 18 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 20 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 20
109: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
109: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
Newton::solveLinearSystem : Caught exception from the linear solver when getting converged: "FMatrixError [luDecomposition:/home/m.giraud/DUMUXexud/dune-common/dune/common/densematrix.hh:909]: matrix is singular"
68 converged value: 0 121 1 let s go get convergedRemote
68 to  comm_.min(converged) 
Newton::solveLinearSystem : Caught exception from the linear solver when getting converged: "FMatrixError [luDecomposition:/home/m.giraud/DUMUXexud/dune-common/dune/common/densematrix.hh:909]: matrix is singular"
62 converged value: 0 121 1 let s go get convergedRemote
62 to  comm_.min(converged) 
cv, before assert(finished != MPI_UNDEFINED); 6 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 21 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 5 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 20 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 21 26
12: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 23 -32766 0 0
12: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 22 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 8 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 8 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 9 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 9 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 10 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 10 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 11 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 11 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 12 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 12 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 13 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 13 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 14 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 14 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 15 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 15 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 16 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 16 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 17 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 17 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 20 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 18 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 21 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 26
26: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 2 -32766 0 0
26: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 20 26
_UNDEFINED); 23 -32766 0 0
101: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 20 24
sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 19 20
8: communicator.hh::sendRecv, before assert(finished != MPI_UNDEFINED); 19 -32766 0 0
8: communicator.hh::sendRecv, before MPI_Waitany(messageInformation_.size(), recvRequests, &finished, &status); 0 1
Newton::solveLinearSystem : Caught exception from the linear solver when getting converged: "FMatrixError [luDecomposition:/home/m.giraud/DUMUXexud/dune-common/dune/common/densematrix.hh:909]: matrix is singular"
83 converged value: 0 121 1 let s go get convergedRemote
83 to  comm_.min(converged) 
Newton::solveLinearSystem : Caught exception from the linear solver when getting converged: "FMatrixError [luDecomposition:/home/m.giraud/DUMUXexud/dune-common/dune/common/densematrix.hh:909]: matrix is singular"
85 converged value: 0 121 1 let s go get convergedRemote
85 to  comm_.min(converged) 
Newton::solveLinearSystem : Caught exception from the linear solver when getting converged: "FMatrixError [luDecomposition:/home/m.giraud/DUMUXexud/dune-common/dune/common/densematrix.hh:909]: matrix is singular"
36 converged value: 0 121 1 let s go get convergedRemote
36 to  comm_.min(converged) 
Newton::solveLinearSystem : Caught exception from the linear solver when getting converged: "FMatrixError [luDecomposition:/home/m.giraud/DUMUXexud/dune-common/dune/common/densematrix.hh:909]: matrix is singular"
75 converged value: 0 121 1 let s go get convergedRemote
75 to  comm_.min(converged) 
Newton::solveLinearSystem : Caught exception from the linear solver when getting converged: "FMatrixError [luDecomposition:/home/m.giraud/DUMUXexud/dune-common/dune/common/densematrix.hh:909]: matrix is singular"
57 converged value: 0 121 1 let s go get convergedRemote
57 to  comm_.min(converged) 
Newton::solveLinearSystem : Caught exception from the linear solver when getting converged: "FMatrixError [luDecomposition:/home/m.giraud/DUMUXexud/dune-common/dune/common/densematrix.hh:909]: matrix is singular"
82 converged value: 0 121 1 let s go get convergedRemote
82 to  comm_.min(converged) 
Newton::solveLinearSystem : Caught exception from the linear solver when getting converged: "FMatrixError [luDecomposition:/home/m.giraud/DUMUXexud/dune-common/dune/common/densematrix.hh:909]: matrix is singular"
44 converged value: 0 121 1 let s go get convergedRemote
44 to  comm_.min(converged) 
Newton::solveLinearSystem : Caught exception from the linear solver when getting converged: "FMatrixError [luDecomposition:/home/m.giraud/DUMUXexud/dune-common/dune/common/densematrix.hh:909]: matrix is singular"
70 converged value: 0 121 1 let s go get convergedRemote
70 to  comm_.min(converged) 
